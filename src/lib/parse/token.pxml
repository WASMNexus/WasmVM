<!DOCTYPE pxml>
<pxml>
    <tokens namespace="Tokens" headerFile="Token.hpp" sourceFile="Token.cpp">
        {% header file %}
        <header indent=0 position="top">
            #include \<string>
            #include \<Types.hpp>
            #include \<exception.hpp>
        </header>
        {% tokens %}
        <token name="ParenL" />
        <token name="ParenR" />
        <token name="Id">
            <type>std::string</type>
        </token>
        <token name="String">
            <type>std::string</type>
        </token>
        <token name="Integer">
            <type>std::string</type>
        </token>
        <token name="Float">
            <type>std::string</type>
        </token>
        <token name="MemOffset">
            <type>offset_t</type>
        </token>
        <token name="MemAlign">
            <type>align_t</type>
        </token>
        <token name="Module" />
        <token name="Type" />
        <token name="Import" />
        <token name="Export" />
        <token name="Param" />
        <token name="Result" />
        <token name="Funcref" />
        <token name="Extern" />
        <token name="Externref" />
        <token name="Func" />
        <token name="Table" />
        <token name="Memory" />
        <token name="Global" />
        <token name="Mut" />
        <token name="Local" />
        <token name="Elem" />
        <token name="Item" />
        <token name="Declare" />
        <token name="Offset" />
        <token name="Data" />
        <token name="Start" />
        <token name="Then" />
        <token name="ControlInstr">
            <member>
                enum Kind {Unreachable, Nop, Return};
            </member>
            <type>ControlInstr::Kind</type>
        </token>
        <token name="Block" />
        <token name="End" />
        <token name="Loop" />
        <token name="If" />
        <token name="Else" />
        <token name="Br" />
        <token name="Br_if" />
        <token name="Br_table" />
        <token name="Call" />
        <token name="Call_indirect" />
        <token name="Ref_null" />
        <token name="Ref_is_null" />
        <token name="Ref_func" />
        <token name="Drop" />
        <token name="Select" />
        <token name="VariableInstr">
            <member>
                enum Kind {LocalGet, LocalSet, LocalTee, GlobalGet, GlobalSet};
            </member>
            <type>VariableInstr::Kind</type>
        </token>
        <token name="TableInstr">
            <member>
                enum Kind {TableGet, TableSet, TableSize, TableGrow, TableFill};
            </member>
            <type>TableInstr::Kind</type>
        </token>
        <token name="Table_copy" />
        <token name="Table_init" />
        <token name="Elem_drop" />
        <token name="Memory_size" />
        <token name="Memory_grow" />
        <token name="Memory_fill" />
        <token name="Memory_init" />
        <token name="Memory_copy" />
        <token name="Data_drop" />
        <token name="MemoryInstr">
            <member>
                enum Kind {I32Load, I64Load, F32Load, F64Load, I32Load8_s, I32Load8_u, I32Load16_s, I32Load16_u, I64Load8_s, I64Load8_u, I64Load16_s, I64Load16_u, I64Load32_s, I64Load32_u, I32Store, I64Store, F32Store, F64Store, I32Store8, I32Store16, I64Store8, I64Store16, I64Store32};
            </member>
            <type>MemoryInstr::Kind</type>
        </token>
        <token name="I32_const" />
        <token name="I64_const" />
        <token name="F32_const" />
        <token name="F64_const" />
        <token name="NumericInstr">
            <member>
                enum Kind {I32Eqz,I32Eq,I32Ne,I32Lt_s,I32Lt_u,I32Gt_s,I32Gt_u,I32Le_s,I32Le_u,I32Ge_s,I32Ge_u,I64Eqz,I64Eq,I64Ne,I64Lt_s,I64Lt_u,I64Gt_s,I64Gt_u,I64Le_s,I64Le_u,I64Ge_s,I64Ge_u,F32Eq,F32Ne,F32Lt,F32Gt,F32Le,F32Ge,F64Eq,F64Ne,F64Lt,F64Gt,F64Le,F64Ge,I32Clz,I32Ctz,I32Popcnt,I32Add,I32Sub,I32Mul,I32Div_s,I32Div_u,I32Rem_s,I32Rem_u,I32And,I32Or,I32Xor,I32Shl,I32Shr_s,I32Shr_u,I32Rotl,I32Rotr,I64Clz,I64Ctz,I64Popcnt,I64Add,I64Sub,I64Mul,I64Div_s,I64Div_u,I64Rem_s,I64Rem_u,I64And,I64Or,I64Xor,I64Shl,I64Shr_s,I64Shr_u,I64Rotl,I64Rotr,F32Abs,F32Neg,F32Ceil,F32Floor,F32Trunc,F32Nearest,F32Sqrt,F32Add,F32Sub,F32Mul,F32Div,F32Min,F32Max,F32Copysign,F64Abs,F64Neg,F64Ceil,F64Floor,F64Trunc,F64Nearest,F64Sqrt,F64Add,F64Sub,F64Mul,F64Div,F64Min,F64Max,F64Copysign,I32Wrap_i64,I32Trunc_s_f32,I32Trunc_u_f32,I32Trunc_s_f64,I32Trunc_u_f64,I64Extend_s_i32,I64Extend_u_i32,I64Trunc_s_f32,I64Trunc_u_f32,I64Trunc_s_f64,I64Trunc_u_f64,F32Convert_s_i32,F32Convert_u_i32,F32Convert_s_i64,F32Convert_u_i64,F32Demote_f64,F64Convert_s_i32,F64Convert_u_i32,F64Convert_s_i64,F64Convert_u_i64,F64Promote_f32,I32Reinterpret_f32,I64Reinterpret_f64,F32Reinterpret_i32,F64Reinterpret_i64,I32Extend8_s,I32Extend16_s,I64Extend8_s,I64Extend16_s,I64Extend32_s,I32Trunc_sat_f32_s,I32Trunc_sat_f32_u,I32Trunc_sat_f64_s,I32Trunc_sat_f64_u,I64Trunc_sat_f32_s,I64Trunc_sat_f64_u,I64Trunc_sat_f64_s,I64Trunc_sat_f32_u};
            </member>
            <type>NumericInstr::Kind</type>
        </token>
        <token name="NumType">
            <type>std::string</type>
        </token>
    </tokens>
</pxml>