digraph {
  node [shape="box"]
S0 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S0</td></tr>0<tr><td> : . module (EOF,) [0]</td></tr><tr><td>module : . EOF (EOF,) [13]</td></tr><tr><td>module : . modulefield (EOF,) [11]</td></tr><tr><td>module : . ParenL ParenR (EOF,) [12]</td></tr><tr><td>module : . ParenL Module ParenR (EOF,) [10]</td></tr><tr><td>module : . ParenL Module Id ParenR (EOF,) [9]</td></tr><tr><td>module : . ParenL Module modulefield ParenR (EOF,) [10]</td></tr><tr><td>module : . ParenL Module Id modulefield ParenR (EOF,) [9]</td></tr><tr><td>modulefield : . export (EOF,ParenL,) [6]</td></tr><tr><td>modulefield : . func (EOF,ParenL,) [7]</td></tr><tr><td>modulefield : . global (EOF,ParenL,) [5]</td></tr><tr><td>modulefield : . import (EOF,ParenL,) [2]</td></tr><tr><td>modulefield : . memory (EOF,ParenL,) [4]</td></tr><tr><td>modulefield : . table (EOF,ParenL,) [3]</td></tr><tr><td>modulefield : . type (EOF,ParenL,) [1]</td></tr><tr><td>modulefield : . modulefield export (EOF,ParenL,) [6]</td></tr><tr><td>modulefield : . modulefield func (EOF,ParenL,) [7]</td></tr><tr><td>modulefield : . modulefield global (EOF,ParenL,) [5]</td></tr><tr><td>modulefield : . modulefield import (EOF,ParenL,) [2]</td></tr><tr><td>modulefield : . modulefield memory (EOF,ParenL,) [4]</td></tr><tr><td>modulefield : . modulefield table (EOF,ParenL,) [3]</td></tr><tr><td>modulefield : . modulefield type (EOF,ParenL,) [1]</td></tr><tr><td>export : . ParenL Export String ParenL Func funcidx ParenR ParenR (EOF,) [68]</td></tr><tr><td>export : . ParenL Export String ParenL Table tableidx ParenR ParenR (EOF,) [69]</td></tr><tr><td>export : . ParenL Export String ParenL Memory memidx ParenR ParenR (EOF,) [70]</td></tr><tr><td>export : . ParenL Export String ParenL Global globalidx ParenR ParenR (EOF,) [71]</td></tr><tr><td>func : . ParenL Func ParenR (EOF,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr ParenR (EOF,) [80]</td></tr><tr><td>func : . ParenL Func id ParenR (EOF,) [80]</td></tr><tr><td>func : . ParenL Func instrs ParenR (EOF,) [80]</td></tr><tr><td>func : . ParenL Func locals ParenR (EOF,) [80]</td></tr><tr><td>func : . ParenL Func typeuse ParenR (EOF,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr instrs ParenR (EOF,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr locals ParenR (EOF,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr typeuse ParenR (EOF,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr ParenR (EOF,) [80]</td></tr><tr><td>func : . ParenL Func id instrs ParenR (EOF,) [80]</td></tr><tr><td>func : . ParenL Func id locals ParenR (EOF,) [80]</td></tr><tr><td>func : . ParenL Func id typeuse ParenR (EOF,) [80]</td></tr><tr><td>func : . ParenL Func locals instrs ParenR (EOF,) [80]</td></tr><tr><td>func : . ParenL Func typeuse instrs ParenR (EOF,) [80]</td></tr><tr><td>func : . ParenL Func typeuse locals ParenR (EOF,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr locals instrs ParenR (EOF,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr typeuse instrs ParenR (EOF,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr typeuse locals ParenR (EOF,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr instrs ParenR (EOF,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr locals ParenR (EOF,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr typeuse ParenR (EOF,) [80]</td></tr><tr><td>func : . ParenL Func id locals instrs ParenR (EOF,) [80]</td></tr><tr><td>func : . ParenL Func id typeuse instrs ParenR (EOF,) [80]</td></tr><tr><td>func : . ParenL Func id typeuse locals ParenR (EOF,) [80]</td></tr><tr><td>func : . ParenL Func typeuse locals instrs ParenR (EOF,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr typeuse locals instrs ParenR (EOF,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr locals instrs ParenR (EOF,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr typeuse instrs ParenR (EOF,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr typeuse locals ParenR (EOF,) [80]</td></tr><tr><td>func : . ParenL Func id typeuse locals instrs ParenR (EOF,) [80]</td></tr><tr><td>func : . ParenL Func ParenL Import String String ParenR ParenR (EOF,) [81]</td></tr><tr><td>func : . ParenL Func id exportabbr typeuse locals instrs ParenR (EOF,) [80]</td></tr><tr><td>func : . ParenL Func ParenL Import String String ParenR typeuse ParenR (EOF,) [81]</td></tr><tr><td>func : . ParenL Func exportabbr ParenL Import String String ParenR ParenR (EOF,) [81]</td></tr><tr><td>func : . ParenL Func id ParenL Import String String ParenR ParenR (EOF,) [81]</td></tr><tr><td>func : . ParenL Func exportabbr ParenL Import String String ParenR typeuse ParenR (EOF,) [81]</td></tr><tr><td>func : . ParenL Func id ParenL Import String String ParenR typeuse ParenR (EOF,) [81]</td></tr><tr><td>func : . ParenL Func id exportabbr ParenL Import String String ParenR ParenR (EOF,) [81]</td></tr><tr><td>func : . ParenL Func id exportabbr ParenL Import String String ParenR typeuse ParenR (EOF,) [81]</td></tr><tr><td>global : . ParenL Global globaltype constexpr ParenR (EOF,) [84]</td></tr><tr><td>global : . ParenL Global exportabbr globaltype constexpr ParenR (EOF,) [84]</td></tr><tr><td>global : . ParenL Global id globaltype constexpr ParenR (EOF,) [84]</td></tr><tr><td>global : . ParenL Global id exportabbr globaltype constexpr ParenR (EOF,) [84]</td></tr><tr><td>global : . ParenL Global ParenL Import String String ParenR globaltype ParenR (EOF,) [85]</td></tr><tr><td>global : . ParenL Global exportabbr ParenL Import String String ParenR globaltype ParenR (EOF,) [85]</td></tr><tr><td>global : . ParenL Global id ParenL Import String String ParenR globaltype ParenR (EOF,) [85]</td></tr><tr><td>global : . ParenL Global id exportabbr ParenL Import String String ParenR globaltype ParenR (EOF,) [85]</td></tr><tr><td>import : . ParenL Import String String importdesc ParenR (EOF,) [63]</td></tr><tr><td>memory : . ParenL Memory limits ParenR (EOF,) [83]</td></tr><tr><td>memory : . ParenL Memory exportabbr limits ParenR (EOF,) [83]</td></tr><tr><td>memory : . ParenL Memory id limits ParenR (EOF,) [83]</td></tr><tr><td>memory : . ParenL Memory importabbr limits ParenR (EOF,) [83]</td></tr><tr><td>memory : . ParenL Memory exportabbr importabbr limits ParenR (EOF,) [83]</td></tr><tr><td>memory : . ParenL Memory id exportabbr limits ParenR (EOF,) [83]</td></tr><tr><td>memory : . ParenL Memory id importabbr limits ParenR (EOF,) [83]</td></tr><tr><td>memory : . ParenL Memory id exportabbr importabbr limits ParenR (EOF,) [83]</td></tr><tr><td>table : . ParenL Table tabletype ParenR (EOF,) [82]</td></tr><tr><td>table : . ParenL Table exportabbr tabletype ParenR (EOF,) [82]</td></tr><tr><td>table : . ParenL Table id tabletype ParenR (EOF,) [82]</td></tr><tr><td>table : . ParenL Table importabbr tabletype ParenR (EOF,) [82]</td></tr><tr><td>table : . ParenL Table exportabbr importabbr tabletype ParenR (EOF,) [82]</td></tr><tr><td>table : . ParenL Table id exportabbr tabletype ParenR (EOF,) [82]</td></tr><tr><td>table : . ParenL Table id importabbr tabletype ParenR (EOF,) [82]</td></tr><tr><td>table : . ParenL Table id exportabbr importabbr tabletype ParenR (EOF,) [82]</td></tr><tr><td>type : . ParenL Type functype ParenR (EOF,) [31]</td></tr><tr><td>type : . ParenL Type id functype ParenR (EOF,) [31]</td></tr></table>>];
S0 -> S1 [label="EOF"];
S0 -> S2 [label="ParenL"];
S0 -> S18 [label="export"];
S0 -> S19 [label="func"];
S0 -> S20 [label="global"];
S0 -> S21 [label="import"];
S0 -> S22 [label="memory"];
S0 -> S3 [label="module"];
S0 -> S4 [label="modulefield"];
S0 -> S24 [label="table"];
S0 -> S25 [label="type"];
S1 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S1</td></tr>1<tr><td><font color="red">module : EOF . (EOF,) [13]</font></td></tr></table>>];
S2 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S2</td></tr>2<tr><td>export : ParenL . Export String ParenL Func funcidx ParenR ParenR (EOF,ParenL,ParenR,) [68]</td></tr><tr><td>export : ParenL . Export String ParenL Table tableidx ParenR ParenR (EOF,ParenL,ParenR,) [69]</td></tr><tr><td>export : ParenL . Export String ParenL Memory memidx ParenR ParenR (EOF,ParenL,ParenR,) [70]</td></tr><tr><td>export : ParenL . Export String ParenL Global globalidx ParenR ParenR (EOF,ParenL,ParenR,) [71]</td></tr><tr><td>func : ParenL . Func ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL . Func exportabbr ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL . Func id ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL . Func instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL . Func locals ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL . Func typeuse ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL . Func exportabbr instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL . Func exportabbr locals ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL . Func exportabbr typeuse ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL . Func id exportabbr ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL . Func id instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL . Func id locals ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL . Func id typeuse ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL . Func locals instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL . Func typeuse instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL . Func typeuse locals ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL . Func exportabbr locals instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL . Func exportabbr typeuse instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL . Func exportabbr typeuse locals ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL . Func id exportabbr instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL . Func id exportabbr locals ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL . Func id exportabbr typeuse ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL . Func id locals instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL . Func id typeuse instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL . Func id typeuse locals ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL . Func typeuse locals instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL . Func exportabbr typeuse locals instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL . Func id exportabbr locals instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL . Func id exportabbr typeuse instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL . Func id exportabbr typeuse locals ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL . Func id typeuse locals instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL . Func ParenL Import String String ParenR ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL . Func id exportabbr typeuse locals instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL . Func ParenL Import String String ParenR typeuse ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL . Func exportabbr ParenL Import String String ParenR ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL . Func id ParenL Import String String ParenR ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL . Func exportabbr ParenL Import String String ParenR typeuse ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL . Func id ParenL Import String String ParenR typeuse ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL . Func id exportabbr ParenL Import String String ParenR ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL . Func id exportabbr ParenL Import String String ParenR typeuse ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>global : ParenL . Global globaltype constexpr ParenR (EOF,ParenL,ParenR,) [84]</td></tr><tr><td>global : ParenL . Global exportabbr globaltype constexpr ParenR (EOF,ParenL,ParenR,) [84]</td></tr><tr><td>global : ParenL . Global id globaltype constexpr ParenR (EOF,ParenL,ParenR,) [84]</td></tr><tr><td>global : ParenL . Global id exportabbr globaltype constexpr ParenR (EOF,ParenL,ParenR,) [84]</td></tr><tr><td>global : ParenL . Global ParenL Import String String ParenR globaltype ParenR (EOF,ParenL,ParenR,) [85]</td></tr><tr><td>global : ParenL . Global exportabbr ParenL Import String String ParenR globaltype ParenR (EOF,ParenL,ParenR,) [85]</td></tr><tr><td>global : ParenL . Global id ParenL Import String String ParenR globaltype ParenR (EOF,ParenL,ParenR,) [85]</td></tr><tr><td>global : ParenL . Global id exportabbr ParenL Import String String ParenR globaltype ParenR (EOF,ParenL,ParenR,) [85]</td></tr><tr><td>import : ParenL . Import String String importdesc ParenR (EOF,ParenL,ParenR,) [63]</td></tr><tr><td>memory : ParenL . Memory limits ParenR (EOF,ParenL,ParenR,) [83]</td></tr><tr><td>memory : ParenL . Memory exportabbr limits ParenR (EOF,ParenL,ParenR,) [83]</td></tr><tr><td>memory : ParenL . Memory id limits ParenR (EOF,ParenL,ParenR,) [83]</td></tr><tr><td>memory : ParenL . Memory importabbr limits ParenR (EOF,ParenL,ParenR,) [83]</td></tr><tr><td>memory : ParenL . Memory exportabbr importabbr limits ParenR (EOF,ParenL,ParenR,) [83]</td></tr><tr><td>memory : ParenL . Memory id exportabbr limits ParenR (EOF,ParenL,ParenR,) [83]</td></tr><tr><td>memory : ParenL . Memory id importabbr limits ParenR (EOF,ParenL,ParenR,) [83]</td></tr><tr><td>memory : ParenL . Memory id exportabbr importabbr limits ParenR (EOF,ParenL,ParenR,) [83]</td></tr><tr><td>module : ParenL . ParenR (EOF,) [12]</td></tr><tr><td>module : ParenL . Module ParenR (EOF,) [10]</td></tr><tr><td>module : ParenL . Module Id ParenR (EOF,) [9]</td></tr><tr><td>module : ParenL . Module modulefield ParenR (EOF,) [10]</td></tr><tr><td>module : ParenL . Module Id modulefield ParenR (EOF,) [9]</td></tr><tr><td>table : ParenL . Table tabletype ParenR (EOF,ParenL,ParenR,) [82]</td></tr><tr><td>table : ParenL . Table exportabbr tabletype ParenR (EOF,ParenL,ParenR,) [82]</td></tr><tr><td>table : ParenL . Table id tabletype ParenR (EOF,ParenL,ParenR,) [82]</td></tr><tr><td>table : ParenL . Table importabbr tabletype ParenR (EOF,ParenL,ParenR,) [82]</td></tr><tr><td>table : ParenL . Table exportabbr importabbr tabletype ParenR (EOF,ParenL,ParenR,) [82]</td></tr><tr><td>table : ParenL . Table id exportabbr tabletype ParenR (EOF,ParenL,ParenR,) [82]</td></tr><tr><td>table : ParenL . Table id importabbr tabletype ParenR (EOF,ParenL,ParenR,) [82]</td></tr><tr><td>table : ParenL . Table id exportabbr importabbr tabletype ParenR (EOF,ParenL,ParenR,) [82]</td></tr><tr><td>type : ParenL . Type functype ParenR (EOF,ParenL,ParenR,) [31]</td></tr><tr><td>type : ParenL . Type id functype ParenR (EOF,ParenL,ParenR,) [31]</td></tr></table>>];
S2 -> S5 [label="ParenR"];
S2 -> S6 [label="Module"];
S2 -> S43 [label="Type"];
S2 -> S44 [label="Import"];
S2 -> S45 [label="Export"];
S2 -> S46 [label="Func"];
S2 -> S47 [label="Table"];
S2 -> S48 [label="Memory"];
S2 -> S49 [label="Global"];
S3 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S3</td></tr>3<tr><td><font color="red"> : module . (EOF,) [0]</font></td></tr></table>>];
S4 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S4</td></tr>4<tr><td><font color="red">module : modulefield . (EOF,) [11]</font></td></tr><tr><td>modulefield : modulefield . export (EOF,ParenL,) [6]</td></tr><tr><td>modulefield : modulefield . func (EOF,ParenL,) [7]</td></tr><tr><td>modulefield : modulefield . global (EOF,ParenL,) [5]</td></tr><tr><td>modulefield : modulefield . import (EOF,ParenL,) [2]</td></tr><tr><td>modulefield : modulefield . memory (EOF,ParenL,) [4]</td></tr><tr><td>modulefield : modulefield . table (EOF,ParenL,) [3]</td></tr><tr><td>modulefield : modulefield . type (EOF,ParenL,) [1]</td></tr><tr><td>export : . ParenL Export String ParenL Func funcidx ParenR ParenR (EOF,ParenL,) [68]</td></tr><tr><td>export : . ParenL Export String ParenL Table tableidx ParenR ParenR (EOF,ParenL,) [69]</td></tr><tr><td>export : . ParenL Export String ParenL Memory memidx ParenR ParenR (EOF,ParenL,) [70]</td></tr><tr><td>export : . ParenL Export String ParenL Global globalidx ParenR ParenR (EOF,ParenL,) [71]</td></tr><tr><td>func : . ParenL Func ParenR (EOF,ParenL,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr ParenR (EOF,ParenL,) [80]</td></tr><tr><td>func : . ParenL Func id ParenR (EOF,ParenL,) [80]</td></tr><tr><td>func : . ParenL Func instrs ParenR (EOF,ParenL,) [80]</td></tr><tr><td>func : . ParenL Func locals ParenR (EOF,ParenL,) [80]</td></tr><tr><td>func : . ParenL Func typeuse ParenR (EOF,ParenL,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr instrs ParenR (EOF,ParenL,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr locals ParenR (EOF,ParenL,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr typeuse ParenR (EOF,ParenL,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr ParenR (EOF,ParenL,) [80]</td></tr><tr><td>func : . ParenL Func id instrs ParenR (EOF,ParenL,) [80]</td></tr><tr><td>func : . ParenL Func id locals ParenR (EOF,ParenL,) [80]</td></tr><tr><td>func : . ParenL Func id typeuse ParenR (EOF,ParenL,) [80]</td></tr><tr><td>func : . ParenL Func locals instrs ParenR (EOF,ParenL,) [80]</td></tr><tr><td>func : . ParenL Func typeuse instrs ParenR (EOF,ParenL,) [80]</td></tr><tr><td>func : . ParenL Func typeuse locals ParenR (EOF,ParenL,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr locals instrs ParenR (EOF,ParenL,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr typeuse instrs ParenR (EOF,ParenL,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr typeuse locals ParenR (EOF,ParenL,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr instrs ParenR (EOF,ParenL,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr locals ParenR (EOF,ParenL,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr typeuse ParenR (EOF,ParenL,) [80]</td></tr><tr><td>func : . ParenL Func id locals instrs ParenR (EOF,ParenL,) [80]</td></tr><tr><td>func : . ParenL Func id typeuse instrs ParenR (EOF,ParenL,) [80]</td></tr><tr><td>func : . ParenL Func id typeuse locals ParenR (EOF,ParenL,) [80]</td></tr><tr><td>func : . ParenL Func typeuse locals instrs ParenR (EOF,ParenL,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr typeuse locals instrs ParenR (EOF,ParenL,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr locals instrs ParenR (EOF,ParenL,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr typeuse instrs ParenR (EOF,ParenL,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr typeuse locals ParenR (EOF,ParenL,) [80]</td></tr><tr><td>func : . ParenL Func id typeuse locals instrs ParenR (EOF,ParenL,) [80]</td></tr><tr><td>func : . ParenL Func ParenL Import String String ParenR ParenR (EOF,ParenL,) [81]</td></tr><tr><td>func : . ParenL Func id exportabbr typeuse locals instrs ParenR (EOF,ParenL,) [80]</td></tr><tr><td>func : . ParenL Func ParenL Import String String ParenR typeuse ParenR (EOF,ParenL,) [81]</td></tr><tr><td>func : . ParenL Func exportabbr ParenL Import String String ParenR ParenR (EOF,ParenL,) [81]</td></tr><tr><td>func : . ParenL Func id ParenL Import String String ParenR ParenR (EOF,ParenL,) [81]</td></tr><tr><td>func : . ParenL Func exportabbr ParenL Import String String ParenR typeuse ParenR (EOF,ParenL,) [81]</td></tr><tr><td>func : . ParenL Func id ParenL Import String String ParenR typeuse ParenR (EOF,ParenL,) [81]</td></tr><tr><td>func : . ParenL Func id exportabbr ParenL Import String String ParenR ParenR (EOF,ParenL,) [81]</td></tr><tr><td>func : . ParenL Func id exportabbr ParenL Import String String ParenR typeuse ParenR (EOF,ParenL,) [81]</td></tr><tr><td>global : . ParenL Global globaltype constexpr ParenR (EOF,ParenL,) [84]</td></tr><tr><td>global : . ParenL Global exportabbr globaltype constexpr ParenR (EOF,ParenL,) [84]</td></tr><tr><td>global : . ParenL Global id globaltype constexpr ParenR (EOF,ParenL,) [84]</td></tr><tr><td>global : . ParenL Global id exportabbr globaltype constexpr ParenR (EOF,ParenL,) [84]</td></tr><tr><td>global : . ParenL Global ParenL Import String String ParenR globaltype ParenR (EOF,ParenL,) [85]</td></tr><tr><td>global : . ParenL Global exportabbr ParenL Import String String ParenR globaltype ParenR (EOF,ParenL,) [85]</td></tr><tr><td>global : . ParenL Global id ParenL Import String String ParenR globaltype ParenR (EOF,ParenL,) [85]</td></tr><tr><td>global : . ParenL Global id exportabbr ParenL Import String String ParenR globaltype ParenR (EOF,ParenL,) [85]</td></tr><tr><td>import : . ParenL Import String String importdesc ParenR (EOF,ParenL,) [63]</td></tr><tr><td>memory : . ParenL Memory limits ParenR (EOF,ParenL,) [83]</td></tr><tr><td>memory : . ParenL Memory exportabbr limits ParenR (EOF,ParenL,) [83]</td></tr><tr><td>memory : . ParenL Memory id limits ParenR (EOF,ParenL,) [83]</td></tr><tr><td>memory : . ParenL Memory importabbr limits ParenR (EOF,ParenL,) [83]</td></tr><tr><td>memory : . ParenL Memory exportabbr importabbr limits ParenR (EOF,ParenL,) [83]</td></tr><tr><td>memory : . ParenL Memory id exportabbr limits ParenR (EOF,ParenL,) [83]</td></tr><tr><td>memory : . ParenL Memory id importabbr limits ParenR (EOF,ParenL,) [83]</td></tr><tr><td>memory : . ParenL Memory id exportabbr importabbr limits ParenR (EOF,ParenL,) [83]</td></tr><tr><td>table : . ParenL Table tabletype ParenR (EOF,ParenL,) [82]</td></tr><tr><td>table : . ParenL Table exportabbr tabletype ParenR (EOF,ParenL,) [82]</td></tr><tr><td>table : . ParenL Table id tabletype ParenR (EOF,ParenL,) [82]</td></tr><tr><td>table : . ParenL Table importabbr tabletype ParenR (EOF,ParenL,) [82]</td></tr><tr><td>table : . ParenL Table exportabbr importabbr tabletype ParenR (EOF,ParenL,) [82]</td></tr><tr><td>table : . ParenL Table id exportabbr tabletype ParenR (EOF,ParenL,) [82]</td></tr><tr><td>table : . ParenL Table id importabbr tabletype ParenR (EOF,ParenL,) [82]</td></tr><tr><td>table : . ParenL Table id exportabbr importabbr tabletype ParenR (EOF,ParenL,) [82]</td></tr><tr><td>type : . ParenL Type functype ParenR (EOF,ParenL,) [31]</td></tr><tr><td>type : . ParenL Type id functype ParenR (EOF,ParenL,) [31]</td></tr></table>>];
S4 -> S2 [label="ParenL"];
S4 -> S7 [label="export"];
S4 -> S8 [label="func"];
S4 -> S9 [label="global"];
S4 -> S10 [label="import"];
S4 -> S11 [label="memory"];
S4 -> S12 [label="table"];
S4 -> S13 [label="type"];
S5 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S5</td></tr>5<tr><td><font color="red">module : ParenL ParenR . (EOF,) [12]</font></td></tr></table>>];
S6 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S6</td></tr>6<tr><td>module : ParenL Module . ParenR (EOF,) [10]</td></tr><tr><td>module : ParenL Module . Id ParenR (EOF,) [9]</td></tr><tr><td>module : ParenL Module . modulefield ParenR (EOF,) [10]</td></tr><tr><td>module : ParenL Module . Id modulefield ParenR (EOF,) [9]</td></tr><tr><td>modulefield : . export (ParenL,ParenR,) [6]</td></tr><tr><td>modulefield : . func (ParenL,ParenR,) [7]</td></tr><tr><td>modulefield : . global (ParenL,ParenR,) [5]</td></tr><tr><td>modulefield : . import (ParenL,ParenR,) [2]</td></tr><tr><td>modulefield : . memory (ParenL,ParenR,) [4]</td></tr><tr><td>modulefield : . table (ParenL,ParenR,) [3]</td></tr><tr><td>modulefield : . type (ParenL,ParenR,) [1]</td></tr><tr><td>modulefield : . modulefield export (ParenL,ParenR,) [6]</td></tr><tr><td>modulefield : . modulefield func (ParenL,ParenR,) [7]</td></tr><tr><td>modulefield : . modulefield global (ParenL,ParenR,) [5]</td></tr><tr><td>modulefield : . modulefield import (ParenL,ParenR,) [2]</td></tr><tr><td>modulefield : . modulefield memory (ParenL,ParenR,) [4]</td></tr><tr><td>modulefield : . modulefield table (ParenL,ParenR,) [3]</td></tr><tr><td>modulefield : . modulefield type (ParenL,ParenR,) [1]</td></tr><tr><td>export : . ParenL Export String ParenL Func funcidx ParenR ParenR (ParenR,) [68]</td></tr><tr><td>export : . ParenL Export String ParenL Table tableidx ParenR ParenR (ParenR,) [69]</td></tr><tr><td>export : . ParenL Export String ParenL Memory memidx ParenR ParenR (ParenR,) [70]</td></tr><tr><td>export : . ParenL Export String ParenL Global globalidx ParenR ParenR (ParenR,) [71]</td></tr><tr><td>func : . ParenL Func ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func instrs ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func locals ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func typeuse ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr instrs ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr locals ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr typeuse ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id instrs ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id locals ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id typeuse ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func locals instrs ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func typeuse instrs ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func typeuse locals ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr locals instrs ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr typeuse instrs ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr typeuse locals ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr instrs ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr locals ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr typeuse ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id locals instrs ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id typeuse instrs ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id typeuse locals ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func typeuse locals instrs ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr typeuse locals instrs ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr locals instrs ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr typeuse instrs ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr typeuse locals ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id typeuse locals instrs ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func ParenL Import String String ParenR ParenR (ParenR,) [81]</td></tr><tr><td>func : . ParenL Func id exportabbr typeuse locals instrs ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func ParenL Import String String ParenR typeuse ParenR (ParenR,) [81]</td></tr><tr><td>func : . ParenL Func exportabbr ParenL Import String String ParenR ParenR (ParenR,) [81]</td></tr><tr><td>func : . ParenL Func id ParenL Import String String ParenR ParenR (ParenR,) [81]</td></tr><tr><td>func : . ParenL Func exportabbr ParenL Import String String ParenR typeuse ParenR (ParenR,) [81]</td></tr><tr><td>func : . ParenL Func id ParenL Import String String ParenR typeuse ParenR (ParenR,) [81]</td></tr><tr><td>func : . ParenL Func id exportabbr ParenL Import String String ParenR ParenR (ParenR,) [81]</td></tr><tr><td>func : . ParenL Func id exportabbr ParenL Import String String ParenR typeuse ParenR (ParenR,) [81]</td></tr><tr><td>global : . ParenL Global globaltype constexpr ParenR (ParenR,) [84]</td></tr><tr><td>global : . ParenL Global exportabbr globaltype constexpr ParenR (ParenR,) [84]</td></tr><tr><td>global : . ParenL Global id globaltype constexpr ParenR (ParenR,) [84]</td></tr><tr><td>global : . ParenL Global id exportabbr globaltype constexpr ParenR (ParenR,) [84]</td></tr><tr><td>global : . ParenL Global ParenL Import String String ParenR globaltype ParenR (ParenR,) [85]</td></tr><tr><td>global : . ParenL Global exportabbr ParenL Import String String ParenR globaltype ParenR (ParenR,) [85]</td></tr><tr><td>global : . ParenL Global id ParenL Import String String ParenR globaltype ParenR (ParenR,) [85]</td></tr><tr><td>global : . ParenL Global id exportabbr ParenL Import String String ParenR globaltype ParenR (ParenR,) [85]</td></tr><tr><td>import : . ParenL Import String String importdesc ParenR (ParenR,) [63]</td></tr><tr><td>memory : . ParenL Memory limits ParenR (ParenR,) [83]</td></tr><tr><td>memory : . ParenL Memory exportabbr limits ParenR (ParenR,) [83]</td></tr><tr><td>memory : . ParenL Memory id limits ParenR (ParenR,) [83]</td></tr><tr><td>memory : . ParenL Memory importabbr limits ParenR (ParenR,) [83]</td></tr><tr><td>memory : . ParenL Memory exportabbr importabbr limits ParenR (ParenR,) [83]</td></tr><tr><td>memory : . ParenL Memory id exportabbr limits ParenR (ParenR,) [83]</td></tr><tr><td>memory : . ParenL Memory id importabbr limits ParenR (ParenR,) [83]</td></tr><tr><td>memory : . ParenL Memory id exportabbr importabbr limits ParenR (ParenR,) [83]</td></tr><tr><td>table : . ParenL Table tabletype ParenR (ParenR,) [82]</td></tr><tr><td>table : . ParenL Table exportabbr tabletype ParenR (ParenR,) [82]</td></tr><tr><td>table : . ParenL Table id tabletype ParenR (ParenR,) [82]</td></tr><tr><td>table : . ParenL Table importabbr tabletype ParenR (ParenR,) [82]</td></tr><tr><td>table : . ParenL Table exportabbr importabbr tabletype ParenR (ParenR,) [82]</td></tr><tr><td>table : . ParenL Table id exportabbr tabletype ParenR (ParenR,) [82]</td></tr><tr><td>table : . ParenL Table id importabbr tabletype ParenR (ParenR,) [82]</td></tr><tr><td>table : . ParenL Table id exportabbr importabbr tabletype ParenR (ParenR,) [82]</td></tr><tr><td>type : . ParenL Type functype ParenR (ParenR,) [31]</td></tr><tr><td>type : . ParenL Type id functype ParenR (ParenR,) [31]</td></tr></table>>];
S6 -> S2 [label="ParenL"];
S6 -> S14 [label="ParenR"];
S6 -> S15 [label="Id"];
S6 -> S18 [label="export"];
S6 -> S19 [label="func"];
S6 -> S20 [label="global"];
S6 -> S21 [label="import"];
S6 -> S22 [label="memory"];
S6 -> S16 [label="modulefield"];
S6 -> S24 [label="table"];
S6 -> S25 [label="type"];
S7 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S7</td></tr>7<tr><td><font color="red">modulefield : modulefield export . (EOF,ParenL,ParenR,) [6]</font></td></tr></table>>];
S8 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S8</td></tr>8<tr><td><font color="red">modulefield : modulefield func . (EOF,ParenL,ParenR,) [7]</font></td></tr></table>>];
S9 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S9</td></tr>9<tr><td><font color="red">modulefield : modulefield global . (EOF,ParenL,ParenR,) [5]</font></td></tr></table>>];
S10 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S10</td></tr>10<tr><td><font color="red">modulefield : modulefield import . (EOF,ParenL,ParenR,) [2]</font></td></tr></table>>];
S11 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S11</td></tr>11<tr><td><font color="red">modulefield : modulefield memory . (EOF,ParenL,ParenR,) [4]</font></td></tr></table>>];
S12 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S12</td></tr>12<tr><td><font color="red">modulefield : modulefield table . (EOF,ParenL,ParenR,) [3]</font></td></tr></table>>];
S13 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S13</td></tr>13<tr><td><font color="red">modulefield : modulefield type . (EOF,ParenL,ParenR,) [1]</font></td></tr></table>>];
S14 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S14</td></tr>14<tr><td><font color="red">module : ParenL Module ParenR . (EOF,) [10]</font></td></tr></table>>];
S15 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S15</td></tr>15<tr><td>module : ParenL Module Id . ParenR (EOF,) [9]</td></tr><tr><td>module : ParenL Module Id . modulefield ParenR (EOF,) [9]</td></tr><tr><td>modulefield : . export (ParenL,ParenR,) [6]</td></tr><tr><td>modulefield : . func (ParenL,ParenR,) [7]</td></tr><tr><td>modulefield : . global (ParenL,ParenR,) [5]</td></tr><tr><td>modulefield : . import (ParenL,ParenR,) [2]</td></tr><tr><td>modulefield : . memory (ParenL,ParenR,) [4]</td></tr><tr><td>modulefield : . table (ParenL,ParenR,) [3]</td></tr><tr><td>modulefield : . type (ParenL,ParenR,) [1]</td></tr><tr><td>modulefield : . modulefield export (ParenL,ParenR,) [6]</td></tr><tr><td>modulefield : . modulefield func (ParenL,ParenR,) [7]</td></tr><tr><td>modulefield : . modulefield global (ParenL,ParenR,) [5]</td></tr><tr><td>modulefield : . modulefield import (ParenL,ParenR,) [2]</td></tr><tr><td>modulefield : . modulefield memory (ParenL,ParenR,) [4]</td></tr><tr><td>modulefield : . modulefield table (ParenL,ParenR,) [3]</td></tr><tr><td>modulefield : . modulefield type (ParenL,ParenR,) [1]</td></tr><tr><td>export : . ParenL Export String ParenL Func funcidx ParenR ParenR (ParenR,) [68]</td></tr><tr><td>export : . ParenL Export String ParenL Table tableidx ParenR ParenR (ParenR,) [69]</td></tr><tr><td>export : . ParenL Export String ParenL Memory memidx ParenR ParenR (ParenR,) [70]</td></tr><tr><td>export : . ParenL Export String ParenL Global globalidx ParenR ParenR (ParenR,) [71]</td></tr><tr><td>func : . ParenL Func ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func instrs ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func locals ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func typeuse ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr instrs ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr locals ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr typeuse ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id instrs ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id locals ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id typeuse ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func locals instrs ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func typeuse instrs ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func typeuse locals ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr locals instrs ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr typeuse instrs ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr typeuse locals ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr instrs ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr locals ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr typeuse ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id locals instrs ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id typeuse instrs ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id typeuse locals ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func typeuse locals instrs ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr typeuse locals instrs ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr locals instrs ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr typeuse instrs ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr typeuse locals ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id typeuse locals instrs ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func ParenL Import String String ParenR ParenR (ParenR,) [81]</td></tr><tr><td>func : . ParenL Func id exportabbr typeuse locals instrs ParenR (ParenR,) [80]</td></tr><tr><td>func : . ParenL Func ParenL Import String String ParenR typeuse ParenR (ParenR,) [81]</td></tr><tr><td>func : . ParenL Func exportabbr ParenL Import String String ParenR ParenR (ParenR,) [81]</td></tr><tr><td>func : . ParenL Func id ParenL Import String String ParenR ParenR (ParenR,) [81]</td></tr><tr><td>func : . ParenL Func exportabbr ParenL Import String String ParenR typeuse ParenR (ParenR,) [81]</td></tr><tr><td>func : . ParenL Func id ParenL Import String String ParenR typeuse ParenR (ParenR,) [81]</td></tr><tr><td>func : . ParenL Func id exportabbr ParenL Import String String ParenR ParenR (ParenR,) [81]</td></tr><tr><td>func : . ParenL Func id exportabbr ParenL Import String String ParenR typeuse ParenR (ParenR,) [81]</td></tr><tr><td>global : . ParenL Global globaltype constexpr ParenR (ParenR,) [84]</td></tr><tr><td>global : . ParenL Global exportabbr globaltype constexpr ParenR (ParenR,) [84]</td></tr><tr><td>global : . ParenL Global id globaltype constexpr ParenR (ParenR,) [84]</td></tr><tr><td>global : . ParenL Global id exportabbr globaltype constexpr ParenR (ParenR,) [84]</td></tr><tr><td>global : . ParenL Global ParenL Import String String ParenR globaltype ParenR (ParenR,) [85]</td></tr><tr><td>global : . ParenL Global exportabbr ParenL Import String String ParenR globaltype ParenR (ParenR,) [85]</td></tr><tr><td>global : . ParenL Global id ParenL Import String String ParenR globaltype ParenR (ParenR,) [85]</td></tr><tr><td>global : . ParenL Global id exportabbr ParenL Import String String ParenR globaltype ParenR (ParenR,) [85]</td></tr><tr><td>import : . ParenL Import String String importdesc ParenR (ParenR,) [63]</td></tr><tr><td>memory : . ParenL Memory limits ParenR (ParenR,) [83]</td></tr><tr><td>memory : . ParenL Memory exportabbr limits ParenR (ParenR,) [83]</td></tr><tr><td>memory : . ParenL Memory id limits ParenR (ParenR,) [83]</td></tr><tr><td>memory : . ParenL Memory importabbr limits ParenR (ParenR,) [83]</td></tr><tr><td>memory : . ParenL Memory exportabbr importabbr limits ParenR (ParenR,) [83]</td></tr><tr><td>memory : . ParenL Memory id exportabbr limits ParenR (ParenR,) [83]</td></tr><tr><td>memory : . ParenL Memory id importabbr limits ParenR (ParenR,) [83]</td></tr><tr><td>memory : . ParenL Memory id exportabbr importabbr limits ParenR (ParenR,) [83]</td></tr><tr><td>table : . ParenL Table tabletype ParenR (ParenR,) [82]</td></tr><tr><td>table : . ParenL Table exportabbr tabletype ParenR (ParenR,) [82]</td></tr><tr><td>table : . ParenL Table id tabletype ParenR (ParenR,) [82]</td></tr><tr><td>table : . ParenL Table importabbr tabletype ParenR (ParenR,) [82]</td></tr><tr><td>table : . ParenL Table exportabbr importabbr tabletype ParenR (ParenR,) [82]</td></tr><tr><td>table : . ParenL Table id exportabbr tabletype ParenR (ParenR,) [82]</td></tr><tr><td>table : . ParenL Table id importabbr tabletype ParenR (ParenR,) [82]</td></tr><tr><td>table : . ParenL Table id exportabbr importabbr tabletype ParenR (ParenR,) [82]</td></tr><tr><td>type : . ParenL Type functype ParenR (ParenR,) [31]</td></tr><tr><td>type : . ParenL Type id functype ParenR (ParenR,) [31]</td></tr></table>>];
S15 -> S2 [label="ParenL"];
S15 -> S17 [label="ParenR"];
S15 -> S18 [label="export"];
S15 -> S19 [label="func"];
S15 -> S20 [label="global"];
S15 -> S21 [label="import"];
S15 -> S22 [label="memory"];
S15 -> S23 [label="modulefield"];
S15 -> S24 [label="table"];
S15 -> S25 [label="type"];
S16 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S16</td></tr>16<tr><td>module : ParenL Module modulefield . ParenR (EOF,) [10]</td></tr><tr><td>modulefield : modulefield . export (ParenL,ParenR,) [6]</td></tr><tr><td>modulefield : modulefield . func (ParenL,ParenR,) [7]</td></tr><tr><td>modulefield : modulefield . global (ParenL,ParenR,) [5]</td></tr><tr><td>modulefield : modulefield . import (ParenL,ParenR,) [2]</td></tr><tr><td>modulefield : modulefield . memory (ParenL,ParenR,) [4]</td></tr><tr><td>modulefield : modulefield . table (ParenL,ParenR,) [3]</td></tr><tr><td>modulefield : modulefield . type (ParenL,ParenR,) [1]</td></tr><tr><td>export : . ParenL Export String ParenL Func funcidx ParenR ParenR (ParenL,ParenR,) [68]</td></tr><tr><td>export : . ParenL Export String ParenL Table tableidx ParenR ParenR (ParenL,ParenR,) [69]</td></tr><tr><td>export : . ParenL Export String ParenL Memory memidx ParenR ParenR (ParenL,ParenR,) [70]</td></tr><tr><td>export : . ParenL Export String ParenL Global globalidx ParenR ParenR (ParenL,ParenR,) [71]</td></tr><tr><td>func : . ParenL Func ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func instrs ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func locals ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func typeuse ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr instrs ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr locals ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr typeuse ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id instrs ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id locals ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id typeuse ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func locals instrs ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func typeuse instrs ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func typeuse locals ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr locals instrs ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr typeuse instrs ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr typeuse locals ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr instrs ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr locals ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr typeuse ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id locals instrs ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id typeuse instrs ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id typeuse locals ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func typeuse locals instrs ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr typeuse locals instrs ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr locals instrs ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr typeuse instrs ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr typeuse locals ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id typeuse locals instrs ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func ParenL Import String String ParenR ParenR (ParenL,ParenR,) [81]</td></tr><tr><td>func : . ParenL Func id exportabbr typeuse locals instrs ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func ParenL Import String String ParenR typeuse ParenR (ParenL,ParenR,) [81]</td></tr><tr><td>func : . ParenL Func exportabbr ParenL Import String String ParenR ParenR (ParenL,ParenR,) [81]</td></tr><tr><td>func : . ParenL Func id ParenL Import String String ParenR ParenR (ParenL,ParenR,) [81]</td></tr><tr><td>func : . ParenL Func exportabbr ParenL Import String String ParenR typeuse ParenR (ParenL,ParenR,) [81]</td></tr><tr><td>func : . ParenL Func id ParenL Import String String ParenR typeuse ParenR (ParenL,ParenR,) [81]</td></tr><tr><td>func : . ParenL Func id exportabbr ParenL Import String String ParenR ParenR (ParenL,ParenR,) [81]</td></tr><tr><td>func : . ParenL Func id exportabbr ParenL Import String String ParenR typeuse ParenR (ParenL,ParenR,) [81]</td></tr><tr><td>global : . ParenL Global globaltype constexpr ParenR (ParenL,ParenR,) [84]</td></tr><tr><td>global : . ParenL Global exportabbr globaltype constexpr ParenR (ParenL,ParenR,) [84]</td></tr><tr><td>global : . ParenL Global id globaltype constexpr ParenR (ParenL,ParenR,) [84]</td></tr><tr><td>global : . ParenL Global id exportabbr globaltype constexpr ParenR (ParenL,ParenR,) [84]</td></tr><tr><td>global : . ParenL Global ParenL Import String String ParenR globaltype ParenR (ParenL,ParenR,) [85]</td></tr><tr><td>global : . ParenL Global exportabbr ParenL Import String String ParenR globaltype ParenR (ParenL,ParenR,) [85]</td></tr><tr><td>global : . ParenL Global id ParenL Import String String ParenR globaltype ParenR (ParenL,ParenR,) [85]</td></tr><tr><td>global : . ParenL Global id exportabbr ParenL Import String String ParenR globaltype ParenR (ParenL,ParenR,) [85]</td></tr><tr><td>import : . ParenL Import String String importdesc ParenR (ParenL,ParenR,) [63]</td></tr><tr><td>memory : . ParenL Memory limits ParenR (ParenL,ParenR,) [83]</td></tr><tr><td>memory : . ParenL Memory exportabbr limits ParenR (ParenL,ParenR,) [83]</td></tr><tr><td>memory : . ParenL Memory id limits ParenR (ParenL,ParenR,) [83]</td></tr><tr><td>memory : . ParenL Memory importabbr limits ParenR (ParenL,ParenR,) [83]</td></tr><tr><td>memory : . ParenL Memory exportabbr importabbr limits ParenR (ParenL,ParenR,) [83]</td></tr><tr><td>memory : . ParenL Memory id exportabbr limits ParenR (ParenL,ParenR,) [83]</td></tr><tr><td>memory : . ParenL Memory id importabbr limits ParenR (ParenL,ParenR,) [83]</td></tr><tr><td>memory : . ParenL Memory id exportabbr importabbr limits ParenR (ParenL,ParenR,) [83]</td></tr><tr><td>table : . ParenL Table tabletype ParenR (ParenL,ParenR,) [82]</td></tr><tr><td>table : . ParenL Table exportabbr tabletype ParenR (ParenL,ParenR,) [82]</td></tr><tr><td>table : . ParenL Table id tabletype ParenR (ParenL,ParenR,) [82]</td></tr><tr><td>table : . ParenL Table importabbr tabletype ParenR (ParenL,ParenR,) [82]</td></tr><tr><td>table : . ParenL Table exportabbr importabbr tabletype ParenR (ParenL,ParenR,) [82]</td></tr><tr><td>table : . ParenL Table id exportabbr tabletype ParenR (ParenL,ParenR,) [82]</td></tr><tr><td>table : . ParenL Table id importabbr tabletype ParenR (ParenL,ParenR,) [82]</td></tr><tr><td>table : . ParenL Table id exportabbr importabbr tabletype ParenR (ParenL,ParenR,) [82]</td></tr><tr><td>type : . ParenL Type functype ParenR (ParenL,ParenR,) [31]</td></tr><tr><td>type : . ParenL Type id functype ParenR (ParenL,ParenR,) [31]</td></tr></table>>];
S16 -> S2 [label="ParenL"];
S16 -> S26 [label="ParenR"];
S16 -> S7 [label="export"];
S16 -> S8 [label="func"];
S16 -> S9 [label="global"];
S16 -> S10 [label="import"];
S16 -> S11 [label="memory"];
S16 -> S12 [label="table"];
S16 -> S13 [label="type"];
S17 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S17</td></tr>17<tr><td><font color="red">module : ParenL Module Id ParenR . (EOF,) [9]</font></td></tr></table>>];
S18 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S18</td></tr>18<tr><td><font color="red">modulefield : export . (EOF,ParenL,ParenR,) [6]</font></td></tr></table>>];
S19 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S19</td></tr>19<tr><td><font color="red">modulefield : func . (EOF,ParenL,ParenR,) [7]</font></td></tr></table>>];
S20 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S20</td></tr>20<tr><td><font color="red">modulefield : global . (EOF,ParenL,ParenR,) [5]</font></td></tr></table>>];
S21 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S21</td></tr>21<tr><td><font color="red">modulefield : import . (EOF,ParenL,ParenR,) [2]</font></td></tr></table>>];
S22 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S22</td></tr>22<tr><td><font color="red">modulefield : memory . (EOF,ParenL,ParenR,) [4]</font></td></tr></table>>];
S23 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S23</td></tr>23<tr><td>module : ParenL Module Id modulefield . ParenR (EOF,) [9]</td></tr><tr><td>modulefield : modulefield . export (ParenL,ParenR,) [6]</td></tr><tr><td>modulefield : modulefield . func (ParenL,ParenR,) [7]</td></tr><tr><td>modulefield : modulefield . global (ParenL,ParenR,) [5]</td></tr><tr><td>modulefield : modulefield . import (ParenL,ParenR,) [2]</td></tr><tr><td>modulefield : modulefield . memory (ParenL,ParenR,) [4]</td></tr><tr><td>modulefield : modulefield . table (ParenL,ParenR,) [3]</td></tr><tr><td>modulefield : modulefield . type (ParenL,ParenR,) [1]</td></tr><tr><td>export : . ParenL Export String ParenL Func funcidx ParenR ParenR (ParenL,ParenR,) [68]</td></tr><tr><td>export : . ParenL Export String ParenL Table tableidx ParenR ParenR (ParenL,ParenR,) [69]</td></tr><tr><td>export : . ParenL Export String ParenL Memory memidx ParenR ParenR (ParenL,ParenR,) [70]</td></tr><tr><td>export : . ParenL Export String ParenL Global globalidx ParenR ParenR (ParenL,ParenR,) [71]</td></tr><tr><td>func : . ParenL Func ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func instrs ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func locals ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func typeuse ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr instrs ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr locals ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr typeuse ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id instrs ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id locals ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id typeuse ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func locals instrs ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func typeuse instrs ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func typeuse locals ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr locals instrs ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr typeuse instrs ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr typeuse locals ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr instrs ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr locals ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr typeuse ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id locals instrs ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id typeuse instrs ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id typeuse locals ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func typeuse locals instrs ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func exportabbr typeuse locals instrs ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr locals instrs ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr typeuse instrs ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id exportabbr typeuse locals ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func id typeuse locals instrs ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func ParenL Import String String ParenR ParenR (ParenL,ParenR,) [81]</td></tr><tr><td>func : . ParenL Func id exportabbr typeuse locals instrs ParenR (ParenL,ParenR,) [80]</td></tr><tr><td>func : . ParenL Func ParenL Import String String ParenR typeuse ParenR (ParenL,ParenR,) [81]</td></tr><tr><td>func : . ParenL Func exportabbr ParenL Import String String ParenR ParenR (ParenL,ParenR,) [81]</td></tr><tr><td>func : . ParenL Func id ParenL Import String String ParenR ParenR (ParenL,ParenR,) [81]</td></tr><tr><td>func : . ParenL Func exportabbr ParenL Import String String ParenR typeuse ParenR (ParenL,ParenR,) [81]</td></tr><tr><td>func : . ParenL Func id ParenL Import String String ParenR typeuse ParenR (ParenL,ParenR,) [81]</td></tr><tr><td>func : . ParenL Func id exportabbr ParenL Import String String ParenR ParenR (ParenL,ParenR,) [81]</td></tr><tr><td>func : . ParenL Func id exportabbr ParenL Import String String ParenR typeuse ParenR (ParenL,ParenR,) [81]</td></tr><tr><td>global : . ParenL Global globaltype constexpr ParenR (ParenL,ParenR,) [84]</td></tr><tr><td>global : . ParenL Global exportabbr globaltype constexpr ParenR (ParenL,ParenR,) [84]</td></tr><tr><td>global : . ParenL Global id globaltype constexpr ParenR (ParenL,ParenR,) [84]</td></tr><tr><td>global : . ParenL Global id exportabbr globaltype constexpr ParenR (ParenL,ParenR,) [84]</td></tr><tr><td>global : . ParenL Global ParenL Import String String ParenR globaltype ParenR (ParenL,ParenR,) [85]</td></tr><tr><td>global : . ParenL Global exportabbr ParenL Import String String ParenR globaltype ParenR (ParenL,ParenR,) [85]</td></tr><tr><td>global : . ParenL Global id ParenL Import String String ParenR globaltype ParenR (ParenL,ParenR,) [85]</td></tr><tr><td>global : . ParenL Global id exportabbr ParenL Import String String ParenR globaltype ParenR (ParenL,ParenR,) [85]</td></tr><tr><td>import : . ParenL Import String String importdesc ParenR (ParenL,ParenR,) [63]</td></tr><tr><td>memory : . ParenL Memory limits ParenR (ParenL,ParenR,) [83]</td></tr><tr><td>memory : . ParenL Memory exportabbr limits ParenR (ParenL,ParenR,) [83]</td></tr><tr><td>memory : . ParenL Memory id limits ParenR (ParenL,ParenR,) [83]</td></tr><tr><td>memory : . ParenL Memory importabbr limits ParenR (ParenL,ParenR,) [83]</td></tr><tr><td>memory : . ParenL Memory exportabbr importabbr limits ParenR (ParenL,ParenR,) [83]</td></tr><tr><td>memory : . ParenL Memory id exportabbr limits ParenR (ParenL,ParenR,) [83]</td></tr><tr><td>memory : . ParenL Memory id importabbr limits ParenR (ParenL,ParenR,) [83]</td></tr><tr><td>memory : . ParenL Memory id exportabbr importabbr limits ParenR (ParenL,ParenR,) [83]</td></tr><tr><td>table : . ParenL Table tabletype ParenR (ParenL,ParenR,) [82]</td></tr><tr><td>table : . ParenL Table exportabbr tabletype ParenR (ParenL,ParenR,) [82]</td></tr><tr><td>table : . ParenL Table id tabletype ParenR (ParenL,ParenR,) [82]</td></tr><tr><td>table : . ParenL Table importabbr tabletype ParenR (ParenL,ParenR,) [82]</td></tr><tr><td>table : . ParenL Table exportabbr importabbr tabletype ParenR (ParenL,ParenR,) [82]</td></tr><tr><td>table : . ParenL Table id exportabbr tabletype ParenR (ParenL,ParenR,) [82]</td></tr><tr><td>table : . ParenL Table id importabbr tabletype ParenR (ParenL,ParenR,) [82]</td></tr><tr><td>table : . ParenL Table id exportabbr importabbr tabletype ParenR (ParenL,ParenR,) [82]</td></tr><tr><td>type : . ParenL Type functype ParenR (ParenL,ParenR,) [31]</td></tr><tr><td>type : . ParenL Type id functype ParenR (ParenL,ParenR,) [31]</td></tr></table>>];
S23 -> S2 [label="ParenL"];
S23 -> S42 [label="ParenR"];
S23 -> S7 [label="export"];
S23 -> S8 [label="func"];
S23 -> S9 [label="global"];
S23 -> S10 [label="import"];
S23 -> S11 [label="memory"];
S23 -> S12 [label="table"];
S23 -> S13 [label="type"];
S24 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S24</td></tr>24<tr><td><font color="red">modulefield : table . (EOF,ParenL,ParenR,) [3]</font></td></tr></table>>];
S25 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S25</td></tr>25<tr><td><font color="red">modulefield : type . (EOF,ParenL,ParenR,) [1]</font></td></tr></table>>];
S26 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S26</td></tr>26<tr><td><font color="red">module : ParenL Module modulefield ParenR . (EOF,) [10]</font></td></tr></table>>];
S27 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S27</td></tr>27<tr><td>functype : ParenL Func . ParenR (ParenR,) [26]</td></tr><tr><td>functype : ParenL Func . params ParenR (ParenR,) [26]</td></tr><tr><td>functype : ParenL Func . results ParenR (ParenR,) [26]</td></tr><tr><td>functype : ParenL Func . params results ParenR (ParenR,) [26]</td></tr><tr><td>params : . ParenL Param ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . ParenL Param valtypes ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . params ParenL Param ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . ParenL Param Id valtype ParenR (ParenL,ParenR,) [21]</td></tr><tr><td>params : . params ParenL Param valtypes ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . params ParenL Param Id valtype ParenR (ParenL,ParenR,) [21]</td></tr><tr><td>results : . ParenL Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . ParenL Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . results ParenL Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . results ParenL Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr></table>>];
S27 -> S32 [label="ParenL"];
S27 -> S50 [label="ParenR"];
S27 -> S51 [label="params"];
S27 -> S52 [label="results"];
S28 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S28</td></tr>28<tr><td>typeuse : ParenL Type . typeidx ParenR (ParenL,ParenR,) [48]</td></tr><tr><td>typeuse : ParenL Type . typeidx ParenR params (ParenL,ParenR,) [48]</td></tr><tr><td>typeuse : ParenL Type . typeidx ParenR results (ParenL,ParenR,) [48]</td></tr><tr><td>typeuse : ParenL Type . typeidx ParenR params results (ParenL,ParenR,) [48]</td></tr><tr><td>typeidx : . Id (ParenR,) [39]</td></tr><tr><td>typeidx : . u32 (ParenR,) [38]</td></tr><tr><td>u32 : . Integer (ParenR,) [32]</td></tr></table>>];
S28 -> S53 [label="Id"];
S28 -> S337 [label="Integer"];
S28 -> S54 [label="typeidx"];
S28 -> S55 [label="u32"];
S29 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S29</td></tr>29<tr><td>params : ParenL Param . ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : ParenL Param . valtypes ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : ParenL Param . Id valtype ParenR (ParenL,ParenR,) [21]</td></tr><tr><td>valtypes : . valtype (ParenR,Funcref,Externref,NumType,) [19]</td></tr><tr><td>valtypes : . valtypes valtype (ParenR,Funcref,Externref,NumType,) [19]</td></tr><tr><td>valtype : . Funcref (ParenR,) [15]</td></tr><tr><td>valtype : . Externref (ParenR,) [16]</td></tr><tr><td>valtype : . NumType (ParenR,) [14]</td></tr></table>>];
S29 -> S56 [label="ParenR"];
S29 -> S57 [label="Id"];
S29 -> S378 [label="Funcref"];
S29 -> S379 [label="Externref"];
S29 -> S380 [label="NumType"];
S29 -> S119 [label="valtype"];
S29 -> S58 [label="valtypes"];
S30 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S30</td></tr>30<tr><td>results : ParenL Result . ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : ParenL Result . valtypes ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>valtypes : . valtype (ParenR,Funcref,Externref,NumType,) [19]</td></tr><tr><td>valtypes : . valtypes valtype (ParenR,Funcref,Externref,NumType,) [19]</td></tr><tr><td>valtype : . Funcref (ParenR,) [15]</td></tr><tr><td>valtype : . Externref (ParenR,) [16]</td></tr><tr><td>valtype : . NumType (ParenR,) [14]</td></tr></table>>];
S30 -> S59 [label="ParenR"];
S30 -> S378 [label="Funcref"];
S30 -> S379 [label="Externref"];
S30 -> S380 [label="NumType"];
S30 -> S119 [label="valtype"];
S30 -> S60 [label="valtypes"];
S31 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S31</td></tr>31<tr><td>locals : ParenL Local . ParenR (ParenR,) [77]</td></tr><tr><td>locals : ParenL Local . ParenR locals (ParenR,) [77]</td></tr><tr><td>locals : ParenL Local . valtypes ParenR (ParenR,) [77]</td></tr><tr><td>locals : ParenL Local . Id valtype ParenR (ParenR,) [76]</td></tr><tr><td>locals : ParenL Local . valtypes ParenR locals (ParenR,) [77]</td></tr><tr><td>locals : ParenL Local . Id valtype ParenR locals (ParenR,) [76]</td></tr><tr><td>valtypes : . valtype (ParenR,Funcref,Externref,NumType,) [19]</td></tr><tr><td>valtypes : . valtypes valtype (ParenR,Funcref,Externref,NumType,) [19]</td></tr><tr><td>valtype : . Funcref (ParenR,) [15]</td></tr><tr><td>valtype : . Externref (ParenR,) [16]</td></tr><tr><td>valtype : . NumType (ParenR,) [14]</td></tr></table>>];
S31 -> S61 [label="ParenR"];
S31 -> S62 [label="Id"];
S31 -> S378 [label="Funcref"];
S31 -> S379 [label="Externref"];
S31 -> S380 [label="NumType"];
S31 -> S119 [label="valtype"];
S31 -> S63 [label="valtypes"];
S32 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S32</td></tr>32<tr><td>exportabbr : exportabbr ParenL . Export String ParenR (ParenL,ParenR,) [74]</td></tr><tr><td>func : ParenL Func exportabbr ParenL . Import String String ParenR ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL Func exportabbr ParenL . Import String String ParenR typeuse ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>locals : ParenL . Local ParenR (ParenR,) [77]</td></tr><tr><td>locals : ParenL . Local ParenR locals (ParenR,) [77]</td></tr><tr><td>locals : ParenL . Local valtypes ParenR (ParenR,) [77]</td></tr><tr><td>locals : ParenL . Local Id valtype ParenR (ParenR,) [76]</td></tr><tr><td>locals : ParenL . Local valtypes ParenR locals (ParenR,) [77]</td></tr><tr><td>locals : ParenL . Local Id valtype ParenR locals (ParenR,) [76]</td></tr><tr><td>params : ParenL . Param ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : ParenL . Param valtypes ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : ParenL . Param Id valtype ParenR (ParenL,ParenR,) [21]</td></tr><tr><td>results : ParenL . Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : ParenL . Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>typeuse : ParenL . Type typeidx ParenR (ParenL,ParenR,) [48]</td></tr><tr><td>typeuse : ParenL . Type typeidx ParenR params (ParenL,ParenR,) [48]</td></tr><tr><td>typeuse : ParenL . Type typeidx ParenR results (ParenL,ParenR,) [48]</td></tr><tr><td>typeuse : ParenL . Type typeidx ParenR params results (ParenL,ParenR,) [48]</td></tr></table>>];
S32 -> S28 [label="Type"];
S32 -> S196 [label="Import"];
S32 -> S69 [label="Export"];
S32 -> S29 [label="Param"];
S32 -> S30 [label="Result"];
S32 -> S31 [label="Local"];
S33 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S33</td></tr>33<tr><td>params : params ParenL . Param ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : params ParenL . Param valtypes ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : params ParenL . Param Id valtype ParenR (ParenL,ParenR,) [21]</td></tr><tr><td>results : ParenL . Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : ParenL . Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr></table>>];
S33 -> S64 [label="Param"];
S33 -> S30 [label="Result"];
S34 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S34</td></tr>34<tr><td>results : results ParenL . Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : results ParenL . Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr></table>>];
S34 -> S65 [label="Result"];
S35 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S35</td></tr>35<tr><td>importabbr : ParenL Import . String String ParenR (Integer,) [72]</td></tr></table>>];
S35 -> S66 [label="String"];
S36 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S36</td></tr>36<tr><td>exportabbr : exportabbr ParenL . Export String ParenR (ParenL,Integer,) [74]</td></tr><tr><td>importabbr : ParenL . Import String String ParenR (Integer,) [72]</td></tr></table>>];
S36 -> S35 [label="Import"];
S36 -> S69 [label="Export"];
S37 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S37</td></tr>37<tr><td><font color="red">tabletype : limits reftype . (ParenR,) [53]</font></td></tr></table>>];
S38 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S38</td></tr>38<tr><td><font color="red">limits : u64 u64 . (ParenR,Funcref,Externref,) [52]</font></td></tr></table>>];
S39 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S39</td></tr>39<tr><td>exportabbr : ParenL Export . String ParenR (ParenL,ParenR,Integer,Funcref,Externref,NumType,) [74]</td></tr></table>>];
S39 -> S67 [label="String"];
S40 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S40</td></tr>40<tr><td>globaltype : ParenL Mut . valtype ParenR (ParenR,Ref_null,Ref_func,VariableInstr,I32_const,I64_const,F32_const,F64_const,) [55]</td></tr><tr><td>valtype : . Funcref (ParenR,) [15]</td></tr><tr><td>valtype : . Externref (ParenR,) [16]</td></tr><tr><td>valtype : . NumType (ParenR,) [14]</td></tr></table>>];
S40 -> S378 [label="Funcref"];
S40 -> S379 [label="Externref"];
S40 -> S380 [label="NumType"];
S40 -> S68 [label="valtype"];
S41 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S41</td></tr>41<tr><td>exportabbr : exportabbr ParenL . Export String ParenR (ParenL,Funcref,Externref,NumType,) [74]</td></tr><tr><td>global : ParenL Global exportabbr ParenL . Import String String ParenR globaltype ParenR (EOF,ParenL,ParenR,) [85]</td></tr><tr><td>globaltype : ParenL . Mut valtype ParenR (Ref_null,Ref_func,VariableInstr,I32_const,I64_const,F32_const,F64_const,) [55]</td></tr></table>>];
S41 -> S234 [label="Import"];
S41 -> S69 [label="Export"];
S41 -> S40 [label="Mut"];
S42 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S42</td></tr>42<tr><td><font color="red">module : ParenL Module Id modulefield ParenR . (EOF,) [9]</font></td></tr></table>>];
S43 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S43</td></tr>43<tr><td>type : ParenL Type . functype ParenR (EOF,ParenL,ParenR,) [31]</td></tr><tr><td>type : ParenL Type . id functype ParenR (EOF,ParenL,ParenR,) [31]</td></tr><tr><td>functype : . ParenL Func ParenR (ParenR,) [26]</td></tr><tr><td>functype : . ParenL Func params ParenR (ParenR,) [26]</td></tr><tr><td>functype : . ParenL Func results ParenR (ParenR,) [26]</td></tr><tr><td>functype : . ParenL Func params results ParenR (ParenR,) [26]</td></tr><tr><td>id : . Id (ParenL,) [29]</td></tr></table>>];
S43 -> S126 [label="ParenL"];
S43 -> S176 [label="Id"];
S43 -> S77 [label="functype"];
S43 -> S78 [label="id"];
S44 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S44</td></tr>44<tr><td>import : ParenL Import . String String importdesc ParenR (EOF,ParenL,ParenR,) [63]</td></tr></table>>];
S44 -> S79 [label="String"];
S45 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S45</td></tr>45<tr><td>export : ParenL Export . String ParenL Func funcidx ParenR ParenR (EOF,ParenL,ParenR,) [68]</td></tr><tr><td>export : ParenL Export . String ParenL Table tableidx ParenR ParenR (EOF,ParenL,ParenR,) [69]</td></tr><tr><td>export : ParenL Export . String ParenL Memory memidx ParenR ParenR (EOF,ParenL,ParenR,) [70]</td></tr><tr><td>export : ParenL Export . String ParenL Global globalidx ParenR ParenR (EOF,ParenL,ParenR,) [71]</td></tr></table>>];
S45 -> S80 [label="String"];
S46 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S46</td></tr>46<tr><td>func : ParenL Func . ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func . exportabbr ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func . id ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func . instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func . locals ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func . typeuse ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func . exportabbr instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func . exportabbr locals ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func . exportabbr typeuse ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func . id exportabbr ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func . id instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func . id locals ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func . id typeuse ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func . locals instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func . typeuse instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func . typeuse locals ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func . exportabbr locals instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func . exportabbr typeuse instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func . exportabbr typeuse locals ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func . id exportabbr instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func . id exportabbr locals ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func . id exportabbr typeuse ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func . id locals instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func . id typeuse instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func . id typeuse locals ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func . typeuse locals instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func . exportabbr typeuse locals instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func . id exportabbr locals instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func . id exportabbr typeuse instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func . id exportabbr typeuse locals ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func . id typeuse locals instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func . ParenL Import String String ParenR ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL Func . id exportabbr typeuse locals instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func . ParenL Import String String ParenR typeuse ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL Func . exportabbr ParenL Import String String ParenR ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL Func . id ParenL Import String String ParenR ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL Func . exportabbr ParenL Import String String ParenR typeuse ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL Func . id ParenL Import String String ParenR typeuse ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL Func . id exportabbr ParenL Import String String ParenR ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL Func . id exportabbr ParenL Import String String ParenR typeuse ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>exportabbr : . ParenL Export String ParenR (ParenL,ParenR,) [74]</td></tr><tr><td>exportabbr : . exportabbr ParenL Export String ParenR (ParenL,ParenR,) [74]</td></tr><tr><td>id : . Id (ParenL,ParenR,) [29]</td></tr><tr><td>locals : . ParenL Local ParenR (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local ParenR locals (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local valtypes ParenR (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local Id valtype ParenR (ParenR,) [76]</td></tr><tr><td>locals : . ParenL Local valtypes ParenR locals (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local Id valtype ParenR locals (ParenR,) [76]</td></tr><tr><td>typeuse : . params (ParenL,ParenR,) [49]</td></tr><tr><td>typeuse : . results (ParenL,ParenR,) [49]</td></tr><tr><td>typeuse : . params results (ParenL,ParenR,) [49]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR (ParenL,ParenR,) [48]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR params (ParenL,ParenR,) [48]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR results (ParenL,ParenR,) [48]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR params results (ParenL,ParenR,) [48]</td></tr><tr><td>params : . ParenL Param ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . ParenL Param valtypes ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . params ParenL Param ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . ParenL Param Id valtype ParenR (ParenL,ParenR,) [21]</td></tr><tr><td>params : . params ParenL Param valtypes ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . params ParenL Param Id valtype ParenR (ParenL,ParenR,) [21]</td></tr><tr><td>results : . ParenL Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . ParenL Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . results ParenL Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . results ParenL Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr></table>>];
S46 -> S81 [label="ParenL"];
S46 -> S82 [label="ParenR"];
S46 -> S176 [label="Id"];
S46 -> S83 [label="exportabbr"];
S46 -> S84 [label="id"];
S46 -> S85 [label="instrs"];
S46 -> S86 [label="locals"];
S46 -> S373 [label="params"];
S46 -> S374 [label="results"];
S46 -> S87 [label="typeuse"];
S47 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S47</td></tr>47<tr><td>table : ParenL Table . tabletype ParenR (EOF,ParenL,ParenR,) [82]</td></tr><tr><td>table : ParenL Table . exportabbr tabletype ParenR (EOF,ParenL,ParenR,) [82]</td></tr><tr><td>table : ParenL Table . id tabletype ParenR (EOF,ParenL,ParenR,) [82]</td></tr><tr><td>table : ParenL Table . importabbr tabletype ParenR (EOF,ParenL,ParenR,) [82]</td></tr><tr><td>table : ParenL Table . exportabbr importabbr tabletype ParenR (EOF,ParenL,ParenR,) [82]</td></tr><tr><td>table : ParenL Table . id exportabbr tabletype ParenR (EOF,ParenL,ParenR,) [82]</td></tr><tr><td>table : ParenL Table . id importabbr tabletype ParenR (EOF,ParenL,ParenR,) [82]</td></tr><tr><td>table : ParenL Table . id exportabbr importabbr tabletype ParenR (EOF,ParenL,ParenR,) [82]</td></tr><tr><td>tabletype : . limits reftype (ParenR,) [53]</td></tr><tr><td>exportabbr : . ParenL Export String ParenR (ParenL,Integer,) [74]</td></tr><tr><td>exportabbr : . exportabbr ParenL Export String ParenR (ParenL,Integer,) [74]</td></tr><tr><td>id : . Id (ParenL,Integer,) [29]</td></tr><tr><td>importabbr : . ParenL Import String String ParenR (Integer,) [72]</td></tr><tr><td>limits : . u64 (Funcref,Externref,) [51]</td></tr><tr><td>limits : . u64 u64 (Funcref,Externref,) [52]</td></tr><tr><td>u64 : . Integer (Integer,Funcref,Externref,) [33]</td></tr></table>>];
S47 -> S149 [label="ParenL"];
S47 -> S176 [label="Id"];
S47 -> S327 [label="Integer"];
S47 -> S88 [label="exportabbr"];
S47 -> S89 [label="id"];
S47 -> S90 [label="importabbr"];
S47 -> S282 [label="limits"];
S47 -> S91 [label="tabletype"];
S47 -> S288 [label="u64"];
S48 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S48</td></tr>48<tr><td>memory : ParenL Memory . limits ParenR (EOF,ParenL,ParenR,) [83]</td></tr><tr><td>memory : ParenL Memory . exportabbr limits ParenR (EOF,ParenL,ParenR,) [83]</td></tr><tr><td>memory : ParenL Memory . id limits ParenR (EOF,ParenL,ParenR,) [83]</td></tr><tr><td>memory : ParenL Memory . importabbr limits ParenR (EOF,ParenL,ParenR,) [83]</td></tr><tr><td>memory : ParenL Memory . exportabbr importabbr limits ParenR (EOF,ParenL,ParenR,) [83]</td></tr><tr><td>memory : ParenL Memory . id exportabbr limits ParenR (EOF,ParenL,ParenR,) [83]</td></tr><tr><td>memory : ParenL Memory . id importabbr limits ParenR (EOF,ParenL,ParenR,) [83]</td></tr><tr><td>memory : ParenL Memory . id exportabbr importabbr limits ParenR (EOF,ParenL,ParenR,) [83]</td></tr><tr><td>limits : . u64 (ParenR,) [51]</td></tr><tr><td>limits : . u64 u64 (ParenR,) [52]</td></tr><tr><td>exportabbr : . ParenL Export String ParenR (ParenL,Integer,) [74]</td></tr><tr><td>exportabbr : . exportabbr ParenL Export String ParenR (ParenL,Integer,) [74]</td></tr><tr><td>id : . Id (ParenL,Integer,) [29]</td></tr><tr><td>importabbr : . ParenL Import String String ParenR (Integer,) [72]</td></tr><tr><td>u64 : . Integer (ParenR,Integer,) [33]</td></tr></table>>];
S48 -> S149 [label="ParenL"];
S48 -> S176 [label="Id"];
S48 -> S327 [label="Integer"];
S48 -> S92 [label="exportabbr"];
S48 -> S93 [label="id"];
S48 -> S94 [label="importabbr"];
S48 -> S95 [label="limits"];
S48 -> S288 [label="u64"];
S49 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S49</td></tr>49<tr><td>global : ParenL Global . globaltype constexpr ParenR (EOF,ParenL,ParenR,) [84]</td></tr><tr><td>global : ParenL Global . exportabbr globaltype constexpr ParenR (EOF,ParenL,ParenR,) [84]</td></tr><tr><td>global : ParenL Global . id globaltype constexpr ParenR (EOF,ParenL,ParenR,) [84]</td></tr><tr><td>global : ParenL Global . id exportabbr globaltype constexpr ParenR (EOF,ParenL,ParenR,) [84]</td></tr><tr><td>global : ParenL Global . ParenL Import String String ParenR globaltype ParenR (EOF,ParenL,ParenR,) [85]</td></tr><tr><td>global : ParenL Global . exportabbr ParenL Import String String ParenR globaltype ParenR (EOF,ParenL,ParenR,) [85]</td></tr><tr><td>global : ParenL Global . id ParenL Import String String ParenR globaltype ParenR (EOF,ParenL,ParenR,) [85]</td></tr><tr><td>global : ParenL Global . id exportabbr ParenL Import String String ParenR globaltype ParenR (EOF,ParenL,ParenR,) [85]</td></tr><tr><td>globaltype : . valtype (Ref_null,Ref_func,VariableInstr,I32_const,I64_const,F32_const,F64_const,) [54]</td></tr><tr><td>globaltype : . ParenL Mut valtype ParenR (Ref_null,Ref_func,VariableInstr,I32_const,I64_const,F32_const,F64_const,) [55]</td></tr><tr><td>exportabbr : . ParenL Export String ParenR (ParenL,Funcref,Externref,NumType,) [74]</td></tr><tr><td>exportabbr : . exportabbr ParenL Export String ParenR (ParenL,Funcref,Externref,NumType,) [74]</td></tr><tr><td>id : . Id (ParenL,Funcref,Externref,NumType,) [29]</td></tr><tr><td>valtype : . Funcref (Ref_null,Ref_func,VariableInstr,I32_const,I64_const,F32_const,F64_const,) [15]</td></tr><tr><td>valtype : . Externref (Ref_null,Ref_func,VariableInstr,I32_const,I64_const,F32_const,F64_const,) [16]</td></tr><tr><td>valtype : . NumType (Ref_null,Ref_func,VariableInstr,I32_const,I64_const,F32_const,F64_const,) [14]</td></tr></table>>];
S49 -> S96 [label="ParenL"];
S49 -> S176 [label="Id"];
S49 -> S378 [label="Funcref"];
S49 -> S379 [label="Externref"];
S49 -> S380 [label="NumType"];
S49 -> S97 [label="exportabbr"];
S49 -> S98 [label="globaltype"];
S49 -> S99 [label="id"];
S49 -> S382 [label="valtype"];
S50 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S50</td></tr>50<tr><td><font color="red">functype : ParenL Func ParenR . (ParenR,) [26]</font></td></tr></table>>];
S51 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S51</td></tr>51<tr><td>functype : ParenL Func params . ParenR (ParenR,) [26]</td></tr><tr><td>functype : ParenL Func params . results ParenR (ParenR,) [26]</td></tr><tr><td>params : params . ParenL Param ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : params . ParenL Param valtypes ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : params . ParenL Param Id valtype ParenR (ParenL,ParenR,) [21]</td></tr><tr><td>results : . ParenL Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . ParenL Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . results ParenL Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . results ParenL Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr></table>>];
S51 -> S33 [label="ParenL"];
S51 -> S100 [label="ParenR"];
S51 -> S101 [label="results"];
S52 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S52</td></tr>52<tr><td>functype : ParenL Func results . ParenR (ParenR,) [26]</td></tr><tr><td>results : results . ParenL Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : results . ParenL Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr></table>>];
S52 -> S34 [label="ParenL"];
S52 -> S102 [label="ParenR"];
S53 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S53</td></tr>53<tr><td><font color="red">typeidx : Id . (ParenR,) [39]</font></td></tr></table>>];
S54 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S54</td></tr>54<tr><td>typeuse : ParenL Type typeidx . ParenR (ParenL,ParenR,) [48]</td></tr><tr><td>typeuse : ParenL Type typeidx . ParenR params (ParenL,ParenR,) [48]</td></tr><tr><td>typeuse : ParenL Type typeidx . ParenR results (ParenL,ParenR,) [48]</td></tr><tr><td>typeuse : ParenL Type typeidx . ParenR params results (ParenL,ParenR,) [48]</td></tr></table>>];
S54 -> S107 [label="ParenR"];
S55 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S55</td></tr>55<tr><td><font color="red">typeidx : u32 . (ParenR,) [38]</font></td></tr></table>>];
S56 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S56</td></tr>56<tr><td><font color="red">params : ParenL Param ParenR . (ParenL,ParenR,) [22]</font></td></tr></table>>];
S57 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S57</td></tr>57<tr><td>params : ParenL Param Id . valtype ParenR (ParenL,ParenR,) [21]</td></tr><tr><td>valtype : . Funcref (ParenR,) [15]</td></tr><tr><td>valtype : . Externref (ParenR,) [16]</td></tr><tr><td>valtype : . NumType (ParenR,) [14]</td></tr></table>>];
S57 -> S378 [label="Funcref"];
S57 -> S379 [label="Externref"];
S57 -> S380 [label="NumType"];
S57 -> S108 [label="valtype"];
S58 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S58</td></tr>58<tr><td>params : ParenL Param valtypes . ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>valtypes : valtypes . valtype (ParenR,Funcref,Externref,NumType,) [19]</td></tr><tr><td>valtype : . Funcref (ParenR,Funcref,Externref,NumType,) [15]</td></tr><tr><td>valtype : . Externref (ParenR,Funcref,Externref,NumType,) [16]</td></tr><tr><td>valtype : . NumType (ParenR,Funcref,Externref,NumType,) [14]</td></tr></table>>];
S58 -> S109 [label="ParenR"];
S58 -> S378 [label="Funcref"];
S58 -> S379 [label="Externref"];
S58 -> S380 [label="NumType"];
S58 -> S110 [label="valtype"];
S59 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S59</td></tr>59<tr><td><font color="red">results : ParenL Result ParenR . (ParenL,ParenR,) [24]</font></td></tr></table>>];
S60 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S60</td></tr>60<tr><td>results : ParenL Result valtypes . ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>valtypes : valtypes . valtype (ParenR,Funcref,Externref,NumType,) [19]</td></tr><tr><td>valtype : . Funcref (ParenR,Funcref,Externref,NumType,) [15]</td></tr><tr><td>valtype : . Externref (ParenR,Funcref,Externref,NumType,) [16]</td></tr><tr><td>valtype : . NumType (ParenR,Funcref,Externref,NumType,) [14]</td></tr></table>>];
S60 -> S111 [label="ParenR"];
S60 -> S378 [label="Funcref"];
S60 -> S379 [label="Externref"];
S60 -> S380 [label="NumType"];
S60 -> S110 [label="valtype"];
S61 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S61</td></tr>61<tr><td><font color="red">locals : ParenL Local ParenR . (ParenR,) [77]</font></td></tr><tr><td>locals : ParenL Local ParenR . locals (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local ParenR (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local ParenR locals (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local valtypes ParenR (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local Id valtype ParenR (ParenR,) [76]</td></tr><tr><td>locals : . ParenL Local valtypes ParenR locals (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local Id valtype ParenR locals (ParenR,) [76]</td></tr></table>>];
S61 -> S32 [label="ParenL"];
S61 -> S112 [label="locals"];
S62 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S62</td></tr>62<tr><td>locals : ParenL Local Id . valtype ParenR (ParenR,) [76]</td></tr><tr><td>locals : ParenL Local Id . valtype ParenR locals (ParenR,) [76]</td></tr><tr><td>valtype : . Funcref (ParenR,) [15]</td></tr><tr><td>valtype : . Externref (ParenR,) [16]</td></tr><tr><td>valtype : . NumType (ParenR,) [14]</td></tr></table>>];
S62 -> S378 [label="Funcref"];
S62 -> S379 [label="Externref"];
S62 -> S380 [label="NumType"];
S62 -> S113 [label="valtype"];
S63 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S63</td></tr>63<tr><td>locals : ParenL Local valtypes . ParenR (ParenR,) [77]</td></tr><tr><td>locals : ParenL Local valtypes . ParenR locals (ParenR,) [77]</td></tr><tr><td>valtypes : valtypes . valtype (ParenR,Funcref,Externref,NumType,) [19]</td></tr><tr><td>valtype : . Funcref (ParenR,Funcref,Externref,NumType,) [15]</td></tr><tr><td>valtype : . Externref (ParenR,Funcref,Externref,NumType,) [16]</td></tr><tr><td>valtype : . NumType (ParenR,Funcref,Externref,NumType,) [14]</td></tr></table>>];
S63 -> S114 [label="ParenR"];
S63 -> S378 [label="Funcref"];
S63 -> S379 [label="Externref"];
S63 -> S380 [label="NumType"];
S63 -> S110 [label="valtype"];
S64 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S64</td></tr>64<tr><td>params : params ParenL Param . ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : params ParenL Param . valtypes ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : params ParenL Param . Id valtype ParenR (ParenL,ParenR,) [21]</td></tr><tr><td>valtypes : . valtype (ParenR,Funcref,Externref,NumType,) [19]</td></tr><tr><td>valtypes : . valtypes valtype (ParenR,Funcref,Externref,NumType,) [19]</td></tr><tr><td>valtype : . Funcref (ParenR,) [15]</td></tr><tr><td>valtype : . Externref (ParenR,) [16]</td></tr><tr><td>valtype : . NumType (ParenR,) [14]</td></tr></table>>];
S64 -> S115 [label="ParenR"];
S64 -> S116 [label="Id"];
S64 -> S378 [label="Funcref"];
S64 -> S379 [label="Externref"];
S64 -> S380 [label="NumType"];
S64 -> S119 [label="valtype"];
S64 -> S117 [label="valtypes"];
S65 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S65</td></tr>65<tr><td>results : results ParenL Result . ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : results ParenL Result . valtypes ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>valtypes : . valtype (ParenR,Funcref,Externref,NumType,) [19]</td></tr><tr><td>valtypes : . valtypes valtype (ParenR,Funcref,Externref,NumType,) [19]</td></tr><tr><td>valtype : . Funcref (ParenR,) [15]</td></tr><tr><td>valtype : . Externref (ParenR,) [16]</td></tr><tr><td>valtype : . NumType (ParenR,) [14]</td></tr></table>>];
S65 -> S118 [label="ParenR"];
S65 -> S378 [label="Funcref"];
S65 -> S379 [label="Externref"];
S65 -> S380 [label="NumType"];
S65 -> S119 [label="valtype"];
S65 -> S120 [label="valtypes"];
S66 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S66</td></tr>66<tr><td>importabbr : ParenL Import String . String ParenR (Integer,) [72]</td></tr></table>>];
S66 -> S121 [label="String"];
S67 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S67</td></tr>67<tr><td>exportabbr : ParenL Export String . ParenR (ParenL,ParenR,Integer,Funcref,Externref,NumType,) [74]</td></tr></table>>];
S67 -> S122 [label="ParenR"];
S68 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S68</td></tr>68<tr><td>globaltype : ParenL Mut valtype . ParenR (ParenR,Ref_null,Ref_func,VariableInstr,I32_const,I64_const,F32_const,F64_const,) [55]</td></tr></table>>];
S68 -> S123 [label="ParenR"];
S69 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S69</td></tr>69<tr><td>exportabbr : exportabbr ParenL Export . String ParenR (ParenL,ParenR,Integer,Funcref,Externref,NumType,) [74]</td></tr></table>>];
S69 -> S124 [label="String"];
S70 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S70</td></tr>70<tr><td><font color="red">constexpr : Ref_null heaptype . (ParenR,) [56]</font></td></tr></table>>];
S71 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S71</td></tr>71<tr><td><font color="red">constexpr : Ref_func funcidx . (ParenR,) [57]</font></td></tr></table>>];
S72 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S72</td></tr>72<tr><td><font color="red">constexpr : VariableInstr globalidx . (ParenR,) [62]</font></td></tr></table>>];
S73 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S73</td></tr>73<tr><td><font color="red">constexpr : I32_const i32 . (ParenR,) [58]</font></td></tr></table>>];
S74 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S74</td></tr>74<tr><td><font color="red">constexpr : I64_const i64 . (ParenR,) [59]</font></td></tr></table>>];
S75 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S75</td></tr>75<tr><td><font color="red">constexpr : F32_const f32 . (ParenR,) [60]</font></td></tr></table>>];
S76 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S76</td></tr>76<tr><td><font color="red">constexpr : F64_const f64 . (ParenR,) [61]</font></td></tr></table>>];
S77 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S77</td></tr>77<tr><td>type : ParenL Type functype . ParenR (EOF,ParenL,ParenR,) [31]</td></tr></table>>];
S77 -> S125 [label="ParenR"];
S78 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S78</td></tr>78<tr><td>type : ParenL Type id . functype ParenR (EOF,ParenL,ParenR,) [31]</td></tr><tr><td>functype : . ParenL Func ParenR (ParenR,) [26]</td></tr><tr><td>functype : . ParenL Func params ParenR (ParenR,) [26]</td></tr><tr><td>functype : . ParenL Func results ParenR (ParenR,) [26]</td></tr><tr><td>functype : . ParenL Func params results ParenR (ParenR,) [26]</td></tr></table>>];
S78 -> S126 [label="ParenL"];
S78 -> S127 [label="functype"];
S79 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S79</td></tr>79<tr><td>import : ParenL Import String . String importdesc ParenR (EOF,ParenL,ParenR,) [63]</td></tr></table>>];
S79 -> S128 [label="String"];
S80 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S80</td></tr>80<tr><td>export : ParenL Export String . ParenL Func funcidx ParenR ParenR (EOF,ParenL,ParenR,) [68]</td></tr><tr><td>export : ParenL Export String . ParenL Table tableidx ParenR ParenR (EOF,ParenL,ParenR,) [69]</td></tr><tr><td>export : ParenL Export String . ParenL Memory memidx ParenR ParenR (EOF,ParenL,ParenR,) [70]</td></tr><tr><td>export : ParenL Export String . ParenL Global globalidx ParenR ParenR (EOF,ParenL,ParenR,) [71]</td></tr></table>>];
S80 -> S129 [label="ParenL"];
S81 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S81</td></tr>81<tr><td>exportabbr : ParenL . Export String ParenR (ParenL,ParenR,) [74]</td></tr><tr><td>func : ParenL Func ParenL . Import String String ParenR ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL Func ParenL . Import String String ParenR typeuse ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>locals : ParenL . Local ParenR (ParenR,) [77]</td></tr><tr><td>locals : ParenL . Local ParenR locals (ParenR,) [77]</td></tr><tr><td>locals : ParenL . Local valtypes ParenR (ParenR,) [77]</td></tr><tr><td>locals : ParenL . Local Id valtype ParenR (ParenR,) [76]</td></tr><tr><td>locals : ParenL . Local valtypes ParenR locals (ParenR,) [77]</td></tr><tr><td>locals : ParenL . Local Id valtype ParenR locals (ParenR,) [76]</td></tr><tr><td>params : ParenL . Param ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : ParenL . Param valtypes ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : ParenL . Param Id valtype ParenR (ParenL,ParenR,) [21]</td></tr><tr><td>results : ParenL . Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : ParenL . Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>typeuse : ParenL . Type typeidx ParenR (ParenL,ParenR,) [48]</td></tr><tr><td>typeuse : ParenL . Type typeidx ParenR params (ParenL,ParenR,) [48]</td></tr><tr><td>typeuse : ParenL . Type typeidx ParenR results (ParenL,ParenR,) [48]</td></tr><tr><td>typeuse : ParenL . Type typeidx ParenR params results (ParenL,ParenR,) [48]</td></tr></table>>];
S81 -> S28 [label="Type"];
S81 -> S130 [label="Import"];
S81 -> S39 [label="Export"];
S81 -> S29 [label="Param"];
S81 -> S30 [label="Result"];
S81 -> S31 [label="Local"];
S82 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S82</td></tr>82<tr><td><font color="red">func : ParenL Func ParenR . (EOF,ParenL,ParenR,) [80]</font></td></tr></table>>];
S83 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S83</td></tr>83<tr><td>exportabbr : exportabbr . ParenL Export String ParenR (ParenL,ParenR,) [74]</td></tr><tr><td>func : ParenL Func exportabbr . ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func exportabbr . instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func exportabbr . locals ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func exportabbr . typeuse ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func exportabbr . locals instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func exportabbr . typeuse instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func exportabbr . typeuse locals ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func exportabbr . typeuse locals instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func exportabbr . ParenL Import String String ParenR ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL Func exportabbr . ParenL Import String String ParenR typeuse ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>locals : . ParenL Local ParenR (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local ParenR locals (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local valtypes ParenR (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local Id valtype ParenR (ParenR,) [76]</td></tr><tr><td>locals : . ParenL Local valtypes ParenR locals (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local Id valtype ParenR locals (ParenR,) [76]</td></tr><tr><td>typeuse : . params (ParenL,ParenR,) [49]</td></tr><tr><td>typeuse : . results (ParenL,ParenR,) [49]</td></tr><tr><td>typeuse : . params results (ParenL,ParenR,) [49]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR (ParenL,ParenR,) [48]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR params (ParenL,ParenR,) [48]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR results (ParenL,ParenR,) [48]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR params results (ParenL,ParenR,) [48]</td></tr><tr><td>params : . ParenL Param ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . ParenL Param valtypes ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . params ParenL Param ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . ParenL Param Id valtype ParenR (ParenL,ParenR,) [21]</td></tr><tr><td>params : . params ParenL Param valtypes ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . params ParenL Param Id valtype ParenR (ParenL,ParenR,) [21]</td></tr><tr><td>results : . ParenL Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . ParenL Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . results ParenL Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . results ParenL Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr></table>>];
S83 -> S32 [label="ParenL"];
S83 -> S131 [label="ParenR"];
S83 -> S132 [label="instrs"];
S83 -> S133 [label="locals"];
S83 -> S373 [label="params"];
S83 -> S374 [label="results"];
S83 -> S134 [label="typeuse"];
S84 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S84</td></tr>84<tr><td>func : ParenL Func id . ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func id . exportabbr ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func id . instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func id . locals ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func id . typeuse ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func id . exportabbr instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func id . exportabbr locals ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func id . exportabbr typeuse ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func id . locals instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func id . typeuse instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func id . typeuse locals ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func id . exportabbr locals instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func id . exportabbr typeuse instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func id . exportabbr typeuse locals ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func id . typeuse locals instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func id . exportabbr typeuse locals instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func id . ParenL Import String String ParenR ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL Func id . ParenL Import String String ParenR typeuse ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL Func id . exportabbr ParenL Import String String ParenR ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL Func id . exportabbr ParenL Import String String ParenR typeuse ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>exportabbr : . ParenL Export String ParenR (ParenL,ParenR,) [74]</td></tr><tr><td>exportabbr : . exportabbr ParenL Export String ParenR (ParenL,ParenR,) [74]</td></tr><tr><td>locals : . ParenL Local ParenR (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local ParenR locals (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local valtypes ParenR (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local Id valtype ParenR (ParenR,) [76]</td></tr><tr><td>locals : . ParenL Local valtypes ParenR locals (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local Id valtype ParenR locals (ParenR,) [76]</td></tr><tr><td>typeuse : . params (ParenL,ParenR,) [49]</td></tr><tr><td>typeuse : . results (ParenL,ParenR,) [49]</td></tr><tr><td>typeuse : . params results (ParenL,ParenR,) [49]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR (ParenL,ParenR,) [48]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR params (ParenL,ParenR,) [48]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR results (ParenL,ParenR,) [48]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR params results (ParenL,ParenR,) [48]</td></tr><tr><td>params : . ParenL Param ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . ParenL Param valtypes ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . params ParenL Param ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . ParenL Param Id valtype ParenR (ParenL,ParenR,) [21]</td></tr><tr><td>params : . params ParenL Param valtypes ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . params ParenL Param Id valtype ParenR (ParenL,ParenR,) [21]</td></tr><tr><td>results : . ParenL Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . ParenL Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . results ParenL Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . results ParenL Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr></table>>];
S84 -> S135 [label="ParenL"];
S84 -> S136 [label="ParenR"];
S84 -> S137 [label="exportabbr"];
S84 -> S138 [label="instrs"];
S84 -> S139 [label="locals"];
S84 -> S373 [label="params"];
S84 -> S374 [label="results"];
S84 -> S140 [label="typeuse"];
S85 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S85</td></tr>85<tr><td>func : ParenL Func instrs . ParenR (EOF,ParenL,ParenR,) [80]</td></tr></table>>];
S85 -> S141 [label="ParenR"];
S86 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S86</td></tr>86<tr><td>func : ParenL Func locals . ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func locals . instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr></table>>];
S86 -> S142 [label="ParenR"];
S86 -> S143 [label="instrs"];
S87 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S87</td></tr>87<tr><td>func : ParenL Func typeuse . ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func typeuse . instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func typeuse . locals ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func typeuse . locals instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>locals : . ParenL Local ParenR (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local ParenR locals (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local valtypes ParenR (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local Id valtype ParenR (ParenR,) [76]</td></tr><tr><td>locals : . ParenL Local valtypes ParenR locals (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local Id valtype ParenR locals (ParenR,) [76]</td></tr></table>>];
S87 -> S32 [label="ParenL"];
S87 -> S144 [label="ParenR"];
S87 -> S145 [label="instrs"];
S87 -> S146 [label="locals"];
S88 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S88</td></tr>88<tr><td>exportabbr : exportabbr . ParenL Export String ParenR (ParenL,Integer,) [74]</td></tr><tr><td>table : ParenL Table exportabbr . tabletype ParenR (EOF,ParenL,ParenR,) [82]</td></tr><tr><td>table : ParenL Table exportabbr . importabbr tabletype ParenR (EOF,ParenL,ParenR,) [82]</td></tr><tr><td>tabletype : . limits reftype (ParenR,) [53]</td></tr><tr><td>importabbr : . ParenL Import String String ParenR (Integer,) [72]</td></tr><tr><td>limits : . u64 (Funcref,Externref,) [51]</td></tr><tr><td>limits : . u64 u64 (Funcref,Externref,) [52]</td></tr><tr><td>u64 : . Integer (Integer,Funcref,Externref,) [33]</td></tr></table>>];
S88 -> S36 [label="ParenL"];
S88 -> S327 [label="Integer"];
S88 -> S147 [label="importabbr"];
S88 -> S282 [label="limits"];
S88 -> S148 [label="tabletype"];
S88 -> S288 [label="u64"];
S89 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S89</td></tr>89<tr><td>table : ParenL Table id . tabletype ParenR (EOF,ParenL,ParenR,) [82]</td></tr><tr><td>table : ParenL Table id . exportabbr tabletype ParenR (EOF,ParenL,ParenR,) [82]</td></tr><tr><td>table : ParenL Table id . importabbr tabletype ParenR (EOF,ParenL,ParenR,) [82]</td></tr><tr><td>table : ParenL Table id . exportabbr importabbr tabletype ParenR (EOF,ParenL,ParenR,) [82]</td></tr><tr><td>tabletype : . limits reftype (ParenR,) [53]</td></tr><tr><td>exportabbr : . ParenL Export String ParenR (ParenL,Integer,) [74]</td></tr><tr><td>exportabbr : . exportabbr ParenL Export String ParenR (ParenL,Integer,) [74]</td></tr><tr><td>importabbr : . ParenL Import String String ParenR (Integer,) [72]</td></tr><tr><td>limits : . u64 (Funcref,Externref,) [51]</td></tr><tr><td>limits : . u64 u64 (Funcref,Externref,) [52]</td></tr><tr><td>u64 : . Integer (Integer,Funcref,Externref,) [33]</td></tr></table>>];
S89 -> S149 [label="ParenL"];
S89 -> S327 [label="Integer"];
S89 -> S150 [label="exportabbr"];
S89 -> S151 [label="importabbr"];
S89 -> S282 [label="limits"];
S89 -> S152 [label="tabletype"];
S89 -> S288 [label="u64"];
S90 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S90</td></tr>90<tr><td>table : ParenL Table importabbr . tabletype ParenR (EOF,ParenL,ParenR,) [82]</td></tr><tr><td>tabletype : . limits reftype (ParenR,) [53]</td></tr><tr><td>limits : . u64 (Funcref,Externref,) [51]</td></tr><tr><td>limits : . u64 u64 (Funcref,Externref,) [52]</td></tr><tr><td>u64 : . Integer (Integer,Funcref,Externref,) [33]</td></tr></table>>];
S90 -> S327 [label="Integer"];
S90 -> S282 [label="limits"];
S90 -> S153 [label="tabletype"];
S90 -> S288 [label="u64"];
S91 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S91</td></tr>91<tr><td>table : ParenL Table tabletype . ParenR (EOF,ParenL,ParenR,) [82]</td></tr></table>>];
S91 -> S154 [label="ParenR"];
S92 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S92</td></tr>92<tr><td>exportabbr : exportabbr . ParenL Export String ParenR (ParenL,Integer,) [74]</td></tr><tr><td>memory : ParenL Memory exportabbr . limits ParenR (EOF,ParenL,ParenR,) [83]</td></tr><tr><td>memory : ParenL Memory exportabbr . importabbr limits ParenR (EOF,ParenL,ParenR,) [83]</td></tr><tr><td>limits : . u64 (ParenR,) [51]</td></tr><tr><td>limits : . u64 u64 (ParenR,) [52]</td></tr><tr><td>importabbr : . ParenL Import String String ParenR (Integer,) [72]</td></tr><tr><td>u64 : . Integer (ParenR,Integer,) [33]</td></tr></table>>];
S92 -> S36 [label="ParenL"];
S92 -> S327 [label="Integer"];
S92 -> S155 [label="importabbr"];
S92 -> S156 [label="limits"];
S92 -> S288 [label="u64"];
S93 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S93</td></tr>93<tr><td>memory : ParenL Memory id . limits ParenR (EOF,ParenL,ParenR,) [83]</td></tr><tr><td>memory : ParenL Memory id . exportabbr limits ParenR (EOF,ParenL,ParenR,) [83]</td></tr><tr><td>memory : ParenL Memory id . importabbr limits ParenR (EOF,ParenL,ParenR,) [83]</td></tr><tr><td>memory : ParenL Memory id . exportabbr importabbr limits ParenR (EOF,ParenL,ParenR,) [83]</td></tr><tr><td>limits : . u64 (ParenR,) [51]</td></tr><tr><td>limits : . u64 u64 (ParenR,) [52]</td></tr><tr><td>exportabbr : . ParenL Export String ParenR (ParenL,Integer,) [74]</td></tr><tr><td>exportabbr : . exportabbr ParenL Export String ParenR (ParenL,Integer,) [74]</td></tr><tr><td>importabbr : . ParenL Import String String ParenR (Integer,) [72]</td></tr><tr><td>u64 : . Integer (ParenR,Integer,) [33]</td></tr></table>>];
S93 -> S149 [label="ParenL"];
S93 -> S327 [label="Integer"];
S93 -> S157 [label="exportabbr"];
S93 -> S158 [label="importabbr"];
S93 -> S159 [label="limits"];
S93 -> S288 [label="u64"];
S94 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S94</td></tr>94<tr><td>memory : ParenL Memory importabbr . limits ParenR (EOF,ParenL,ParenR,) [83]</td></tr><tr><td>limits : . u64 (ParenR,) [51]</td></tr><tr><td>limits : . u64 u64 (ParenR,) [52]</td></tr><tr><td>u64 : . Integer (ParenR,Integer,) [33]</td></tr></table>>];
S94 -> S327 [label="Integer"];
S94 -> S160 [label="limits"];
S94 -> S288 [label="u64"];
S95 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S95</td></tr>95<tr><td>memory : ParenL Memory limits . ParenR (EOF,ParenL,ParenR,) [83]</td></tr></table>>];
S95 -> S161 [label="ParenR"];
S96 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S96</td></tr>96<tr><td>exportabbr : ParenL . Export String ParenR (ParenL,Funcref,Externref,NumType,) [74]</td></tr><tr><td>global : ParenL Global ParenL . Import String String ParenR globaltype ParenR (EOF,ParenL,ParenR,) [85]</td></tr><tr><td>globaltype : ParenL . Mut valtype ParenR (ParenR,Ref_null,Ref_func,VariableInstr,I32_const,I64_const,F32_const,F64_const,) [55]</td></tr></table>>];
S96 -> S162 [label="Import"];
S96 -> S39 [label="Export"];
S96 -> S40 [label="Mut"];
S97 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S97</td></tr>97<tr><td>exportabbr : exportabbr . ParenL Export String ParenR (ParenL,Funcref,Externref,NumType,) [74]</td></tr><tr><td>global : ParenL Global exportabbr . globaltype constexpr ParenR (EOF,ParenL,ParenR,) [84]</td></tr><tr><td>global : ParenL Global exportabbr . ParenL Import String String ParenR globaltype ParenR (EOF,ParenL,ParenR,) [85]</td></tr><tr><td>globaltype : . valtype (Ref_null,Ref_func,VariableInstr,I32_const,I64_const,F32_const,F64_const,) [54]</td></tr><tr><td>globaltype : . ParenL Mut valtype ParenR (Ref_null,Ref_func,VariableInstr,I32_const,I64_const,F32_const,F64_const,) [55]</td></tr><tr><td>valtype : . Funcref (Ref_null,Ref_func,VariableInstr,I32_const,I64_const,F32_const,F64_const,) [15]</td></tr><tr><td>valtype : . Externref (Ref_null,Ref_func,VariableInstr,I32_const,I64_const,F32_const,F64_const,) [16]</td></tr><tr><td>valtype : . NumType (Ref_null,Ref_func,VariableInstr,I32_const,I64_const,F32_const,F64_const,) [14]</td></tr></table>>];
S97 -> S41 [label="ParenL"];
S97 -> S378 [label="Funcref"];
S97 -> S379 [label="Externref"];
S97 -> S380 [label="NumType"];
S97 -> S163 [label="globaltype"];
S97 -> S382 [label="valtype"];
S98 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S98</td></tr>98<tr><td>global : ParenL Global globaltype . constexpr ParenR (EOF,ParenL,ParenR,) [84]</td></tr><tr><td>constexpr : . Ref_null heaptype (ParenR,) [56]</td></tr><tr><td>constexpr : . Ref_func funcidx (ParenR,) [57]</td></tr><tr><td>constexpr : . VariableInstr globalidx (ParenR,) [62]</td></tr><tr><td>constexpr : . I32_const i32 (ParenR,) [58]</td></tr><tr><td>constexpr : . I64_const i64 (ParenR,) [59]</td></tr><tr><td>constexpr : . F32_const f32 (ParenR,) [60]</td></tr><tr><td>constexpr : . F64_const f64 (ParenR,) [61]</td></tr></table>>];
S98 -> S296 [label="Ref_null"];
S98 -> S297 [label="Ref_func"];
S98 -> S298 [label="VariableInstr"];
S98 -> S299 [label="I32_const"];
S98 -> S300 [label="I64_const"];
S98 -> S301 [label="F32_const"];
S98 -> S302 [label="F64_const"];
S98 -> S164 [label="constexpr"];
S99 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S99</td></tr>99<tr><td>global : ParenL Global id . globaltype constexpr ParenR (EOF,ParenL,ParenR,) [84]</td></tr><tr><td>global : ParenL Global id . exportabbr globaltype constexpr ParenR (EOF,ParenL,ParenR,) [84]</td></tr><tr><td>global : ParenL Global id . ParenL Import String String ParenR globaltype ParenR (EOF,ParenL,ParenR,) [85]</td></tr><tr><td>global : ParenL Global id . exportabbr ParenL Import String String ParenR globaltype ParenR (EOF,ParenL,ParenR,) [85]</td></tr><tr><td>globaltype : . valtype (Ref_null,Ref_func,VariableInstr,I32_const,I64_const,F32_const,F64_const,) [54]</td></tr><tr><td>globaltype : . ParenL Mut valtype ParenR (Ref_null,Ref_func,VariableInstr,I32_const,I64_const,F32_const,F64_const,) [55]</td></tr><tr><td>exportabbr : . ParenL Export String ParenR (ParenL,Funcref,Externref,NumType,) [74]</td></tr><tr><td>exportabbr : . exportabbr ParenL Export String ParenR (ParenL,Funcref,Externref,NumType,) [74]</td></tr><tr><td>valtype : . Funcref (Ref_null,Ref_func,VariableInstr,I32_const,I64_const,F32_const,F64_const,) [15]</td></tr><tr><td>valtype : . Externref (Ref_null,Ref_func,VariableInstr,I32_const,I64_const,F32_const,F64_const,) [16]</td></tr><tr><td>valtype : . NumType (Ref_null,Ref_func,VariableInstr,I32_const,I64_const,F32_const,F64_const,) [14]</td></tr></table>>];
S99 -> S165 [label="ParenL"];
S99 -> S378 [label="Funcref"];
S99 -> S379 [label="Externref"];
S99 -> S380 [label="NumType"];
S99 -> S166 [label="exportabbr"];
S99 -> S167 [label="globaltype"];
S99 -> S382 [label="valtype"];
S100 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S100</td></tr>100<tr><td><font color="red">functype : ParenL Func params ParenR . (ParenR,) [26]</font></td></tr></table>>];
S101 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S101</td></tr>101<tr><td>functype : ParenL Func params results . ParenR (ParenR,) [26]</td></tr><tr><td>results : results . ParenL Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : results . ParenL Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr></table>>];
S101 -> S34 [label="ParenL"];
S101 -> S168 [label="ParenR"];
S102 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S102</td></tr>102<tr><td><font color="red">functype : ParenL Func results ParenR . (ParenR,) [26]</font></td></tr></table>>];
S103 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S103</td></tr>103<tr><td>importdesc : ParenL Func . ParenR (ParenR,) [64]</td></tr><tr><td>importdesc : ParenL Func . id ParenR (ParenR,) [64]</td></tr><tr><td>importdesc : ParenL Func . typeuse ParenR (ParenR,) [64]</td></tr><tr><td>importdesc : ParenL Func . id typeuse ParenR (ParenR,) [64]</td></tr><tr><td>id : . Id (ParenL,ParenR,) [29]</td></tr><tr><td>typeuse : . params (ParenR,) [49]</td></tr><tr><td>typeuse : . results (ParenR,) [49]</td></tr><tr><td>typeuse : . params results (ParenR,) [49]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR (ParenR,) [48]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR params (ParenR,) [48]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR results (ParenR,) [48]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR params results (ParenR,) [48]</td></tr><tr><td>params : . ParenL Param ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . ParenL Param valtypes ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . params ParenL Param ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . ParenL Param Id valtype ParenR (ParenL,ParenR,) [21]</td></tr><tr><td>params : . params ParenL Param valtypes ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . params ParenL Param Id valtype ParenR (ParenL,ParenR,) [21]</td></tr><tr><td>results : . ParenL Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . ParenL Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . results ParenL Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . results ParenL Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr></table>>];
S103 -> S32 [label="ParenL"];
S103 -> S169 [label="ParenR"];
S103 -> S176 [label="Id"];
S103 -> S170 [label="id"];
S103 -> S373 [label="params"];
S103 -> S374 [label="results"];
S103 -> S171 [label="typeuse"];
S104 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S104</td></tr>104<tr><td>importdesc : ParenL Table . tabletype ParenR (ParenR,) [65]</td></tr><tr><td>importdesc : ParenL Table . id tabletype ParenR (ParenR,) [65]</td></tr><tr><td>tabletype : . limits reftype (ParenR,) [53]</td></tr><tr><td>id : . Id (Integer,) [29]</td></tr><tr><td>limits : . u64 (Funcref,Externref,) [51]</td></tr><tr><td>limits : . u64 u64 (Funcref,Externref,) [52]</td></tr><tr><td>u64 : . Integer (Integer,Funcref,Externref,) [33]</td></tr></table>>];
S104 -> S176 [label="Id"];
S104 -> S327 [label="Integer"];
S104 -> S172 [label="id"];
S104 -> S282 [label="limits"];
S104 -> S173 [label="tabletype"];
S104 -> S288 [label="u64"];
S105 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S105</td></tr>105<tr><td>importdesc : ParenL Memory . limits ParenR (ParenR,) [66]</td></tr><tr><td>importdesc : ParenL Memory . id limits ParenR (ParenR,) [66]</td></tr><tr><td>limits : . u64 (ParenR,) [51]</td></tr><tr><td>limits : . u64 u64 (ParenR,) [52]</td></tr><tr><td>id : . Id (Integer,) [29]</td></tr><tr><td>u64 : . Integer (ParenR,Integer,) [33]</td></tr></table>>];
S105 -> S176 [label="Id"];
S105 -> S327 [label="Integer"];
S105 -> S174 [label="id"];
S105 -> S175 [label="limits"];
S105 -> S288 [label="u64"];
S106 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S106</td></tr>106<tr><td>importdesc : ParenL Global . globaltype ParenR (ParenR,) [67]</td></tr><tr><td>importdesc : ParenL Global . id globaltype ParenR (ParenR,) [67]</td></tr><tr><td>globaltype : . valtype (ParenR,) [54]</td></tr><tr><td>globaltype : . ParenL Mut valtype ParenR (ParenR,) [55]</td></tr><tr><td>id : . Id (ParenL,Funcref,Externref,NumType,) [29]</td></tr><tr><td>valtype : . Funcref (ParenR,) [15]</td></tr><tr><td>valtype : . Externref (ParenR,) [16]</td></tr><tr><td>valtype : . NumType (ParenR,) [14]</td></tr></table>>];
S106 -> S96 [label="ParenL"];
S106 -> S176 [label="Id"];
S106 -> S378 [label="Funcref"];
S106 -> S379 [label="Externref"];
S106 -> S380 [label="NumType"];
S106 -> S177 [label="globaltype"];
S106 -> S178 [label="id"];
S106 -> S382 [label="valtype"];
S107 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S107</td></tr>107<tr><td><font color="red">typeuse : ParenL Type typeidx ParenR . (ParenL,ParenR,) [48]</font></td></tr><tr><td>typeuse : ParenL Type typeidx ParenR . params (ParenL,ParenR,) [48]</td></tr><tr><td>typeuse : ParenL Type typeidx ParenR . results (ParenL,ParenR,) [48]</td></tr><tr><td>typeuse : ParenL Type typeidx ParenR . params results (ParenL,ParenR,) [48]</td></tr><tr><td>params : . ParenL Param ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . ParenL Param valtypes ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . params ParenL Param ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . ParenL Param Id valtype ParenR (ParenL,ParenR,) [21]</td></tr><tr><td>params : . params ParenL Param valtypes ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . params ParenL Param Id valtype ParenR (ParenL,ParenR,) [21]</td></tr><tr><td>results : . ParenL Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . ParenL Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . results ParenL Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . results ParenL Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr></table>>];
S107 -> S32 [label="ParenL"];
S107 -> S179 [label="params"];
S107 -> S358 [label="results"];
S108 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S108</td></tr>108<tr><td>params : ParenL Param Id valtype . ParenR (ParenL,ParenR,) [21]</td></tr></table>>];
S108 -> S180 [label="ParenR"];
S109 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S109</td></tr>109<tr><td><font color="red">params : ParenL Param valtypes ParenR . (ParenL,ParenR,) [22]</font></td></tr></table>>];
S110 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S110</td></tr>110<tr><td><font color="red">valtypes : valtypes valtype . (ParenR,Funcref,Externref,NumType,) [19]</font></td></tr></table>>];
S111 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S111</td></tr>111<tr><td><font color="red">results : ParenL Result valtypes ParenR . (ParenL,ParenR,) [24]</font></td></tr></table>>];
S112 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S112</td></tr>112<tr><td><font color="red">locals : ParenL Local ParenR locals . (ParenR,) [77]</font></td></tr></table>>];
S113 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S113</td></tr>113<tr><td>locals : ParenL Local Id valtype . ParenR (ParenR,) [76]</td></tr><tr><td>locals : ParenL Local Id valtype . ParenR locals (ParenR,) [76]</td></tr></table>>];
S113 -> S181 [label="ParenR"];
S114 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S114</td></tr>114<tr><td><font color="red">locals : ParenL Local valtypes ParenR . (ParenR,) [77]</font></td></tr><tr><td>locals : ParenL Local valtypes ParenR . locals (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local ParenR (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local ParenR locals (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local valtypes ParenR (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local Id valtype ParenR (ParenR,) [76]</td></tr><tr><td>locals : . ParenL Local valtypes ParenR locals (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local Id valtype ParenR locals (ParenR,) [76]</td></tr></table>>];
S114 -> S32 [label="ParenL"];
S114 -> S182 [label="locals"];
S115 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S115</td></tr>115<tr><td><font color="red">params : params ParenL Param ParenR . (ParenL,ParenR,) [22]</font></td></tr></table>>];
S116 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S116</td></tr>116<tr><td>params : params ParenL Param Id . valtype ParenR (ParenL,ParenR,) [21]</td></tr><tr><td>valtype : . Funcref (ParenR,) [15]</td></tr><tr><td>valtype : . Externref (ParenR,) [16]</td></tr><tr><td>valtype : . NumType (ParenR,) [14]</td></tr></table>>];
S116 -> S378 [label="Funcref"];
S116 -> S379 [label="Externref"];
S116 -> S380 [label="NumType"];
S116 -> S183 [label="valtype"];
S117 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S117</td></tr>117<tr><td>params : params ParenL Param valtypes . ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>valtypes : valtypes . valtype (ParenR,Funcref,Externref,NumType,) [19]</td></tr><tr><td>valtype : . Funcref (ParenR,Funcref,Externref,NumType,) [15]</td></tr><tr><td>valtype : . Externref (ParenR,Funcref,Externref,NumType,) [16]</td></tr><tr><td>valtype : . NumType (ParenR,Funcref,Externref,NumType,) [14]</td></tr></table>>];
S117 -> S184 [label="ParenR"];
S117 -> S378 [label="Funcref"];
S117 -> S379 [label="Externref"];
S117 -> S380 [label="NumType"];
S117 -> S110 [label="valtype"];
S118 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S118</td></tr>118<tr><td><font color="red">results : results ParenL Result ParenR . (ParenL,ParenR,) [24]</font></td></tr></table>>];
S119 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S119</td></tr>119<tr><td><font color="red">valtypes : valtype . (ParenR,Funcref,Externref,NumType,) [19]</font></td></tr></table>>];
S120 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S120</td></tr>120<tr><td>results : results ParenL Result valtypes . ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>valtypes : valtypes . valtype (ParenR,Funcref,Externref,NumType,) [19]</td></tr><tr><td>valtype : . Funcref (ParenR,Funcref,Externref,NumType,) [15]</td></tr><tr><td>valtype : . Externref (ParenR,Funcref,Externref,NumType,) [16]</td></tr><tr><td>valtype : . NumType (ParenR,Funcref,Externref,NumType,) [14]</td></tr></table>>];
S120 -> S185 [label="ParenR"];
S120 -> S378 [label="Funcref"];
S120 -> S379 [label="Externref"];
S120 -> S380 [label="NumType"];
S120 -> S110 [label="valtype"];
S121 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S121</td></tr>121<tr><td>importabbr : ParenL Import String String . ParenR (Integer,) [72]</td></tr></table>>];
S121 -> S186 [label="ParenR"];
S122 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S122</td></tr>122<tr><td><font color="red">exportabbr : ParenL Export String ParenR . (ParenL,ParenR,Integer,Funcref,Externref,NumType,) [74]</font></td></tr></table>>];
S123 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S123</td></tr>123<tr><td><font color="red">globaltype : ParenL Mut valtype ParenR . (ParenR,Ref_null,Ref_func,VariableInstr,I32_const,I64_const,F32_const,F64_const,) [55]</font></td></tr></table>>];
S124 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S124</td></tr>124<tr><td>exportabbr : exportabbr ParenL Export String . ParenR (ParenL,ParenR,Integer,Funcref,Externref,NumType,) [74]</td></tr></table>>];
S124 -> S187 [label="ParenR"];
S125 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S125</td></tr>125<tr><td><font color="red">type : ParenL Type functype ParenR . (EOF,ParenL,ParenR,) [31]</font></td></tr></table>>];
S126 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S126</td></tr>126<tr><td>functype : ParenL . Func ParenR (ParenR,) [26]</td></tr><tr><td>functype : ParenL . Func params ParenR (ParenR,) [26]</td></tr><tr><td>functype : ParenL . Func results ParenR (ParenR,) [26]</td></tr><tr><td>functype : ParenL . Func params results ParenR (ParenR,) [26]</td></tr></table>>];
S126 -> S27 [label="Func"];
S127 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S127</td></tr>127<tr><td>type : ParenL Type id functype . ParenR (EOF,ParenL,ParenR,) [31]</td></tr></table>>];
S127 -> S188 [label="ParenR"];
S128 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S128</td></tr>128<tr><td>import : ParenL Import String String . importdesc ParenR (EOF,ParenL,ParenR,) [63]</td></tr><tr><td>importdesc : . ParenL Func ParenR (ParenR,) [64]</td></tr><tr><td>importdesc : . ParenL Func id ParenR (ParenR,) [64]</td></tr><tr><td>importdesc : . ParenL Func typeuse ParenR (ParenR,) [64]</td></tr><tr><td>importdesc : . ParenL Table tabletype ParenR (ParenR,) [65]</td></tr><tr><td>importdesc : . ParenL Memory limits ParenR (ParenR,) [66]</td></tr><tr><td>importdesc : . ParenL Global globaltype ParenR (ParenR,) [67]</td></tr><tr><td>importdesc : . ParenL Func id typeuse ParenR (ParenR,) [64]</td></tr><tr><td>importdesc : . ParenL Table id tabletype ParenR (ParenR,) [65]</td></tr><tr><td>importdesc : . ParenL Memory id limits ParenR (ParenR,) [66]</td></tr><tr><td>importdesc : . ParenL Global id globaltype ParenR (ParenR,) [67]</td></tr></table>>];
S128 -> S189 [label="ParenL"];
S128 -> S190 [label="importdesc"];
S129 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S129</td></tr>129<tr><td>export : ParenL Export String ParenL . Func funcidx ParenR ParenR (EOF,ParenL,ParenR,) [68]</td></tr><tr><td>export : ParenL Export String ParenL . Table tableidx ParenR ParenR (EOF,ParenL,ParenR,) [69]</td></tr><tr><td>export : ParenL Export String ParenL . Memory memidx ParenR ParenR (EOF,ParenL,ParenR,) [70]</td></tr><tr><td>export : ParenL Export String ParenL . Global globalidx ParenR ParenR (EOF,ParenL,ParenR,) [71]</td></tr></table>>];
S129 -> S191 [label="Func"];
S129 -> S192 [label="Table"];
S129 -> S193 [label="Memory"];
S129 -> S194 [label="Global"];
S130 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S130</td></tr>130<tr><td>func : ParenL Func ParenL Import . String String ParenR ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL Func ParenL Import . String String ParenR typeuse ParenR (EOF,ParenL,ParenR,) [81]</td></tr></table>>];
S130 -> S195 [label="String"];
S131 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S131</td></tr>131<tr><td><font color="red">func : ParenL Func exportabbr ParenR . (EOF,ParenL,ParenR,) [80]</font></td></tr></table>>];
S132 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S132</td></tr>132<tr><td>func : ParenL Func exportabbr instrs . ParenR (EOF,ParenL,ParenR,) [80]</td></tr></table>>];
S132 -> S197 [label="ParenR"];
S133 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S133</td></tr>133<tr><td>func : ParenL Func exportabbr locals . ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func exportabbr locals . instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr></table>>];
S133 -> S198 [label="ParenR"];
S133 -> S199 [label="instrs"];
S134 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S134</td></tr>134<tr><td>func : ParenL Func exportabbr typeuse . ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func exportabbr typeuse . instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func exportabbr typeuse . locals ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func exportabbr typeuse . locals instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>locals : . ParenL Local ParenR (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local ParenR locals (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local valtypes ParenR (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local Id valtype ParenR (ParenR,) [76]</td></tr><tr><td>locals : . ParenL Local valtypes ParenR locals (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local Id valtype ParenR locals (ParenR,) [76]</td></tr></table>>];
S134 -> S32 [label="ParenL"];
S134 -> S200 [label="ParenR"];
S134 -> S201 [label="instrs"];
S134 -> S202 [label="locals"];
S135 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S135</td></tr>135<tr><td>exportabbr : ParenL . Export String ParenR (ParenL,ParenR,) [74]</td></tr><tr><td>func : ParenL Func id ParenL . Import String String ParenR ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL Func id ParenL . Import String String ParenR typeuse ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>locals : ParenL . Local ParenR (ParenR,) [77]</td></tr><tr><td>locals : ParenL . Local ParenR locals (ParenR,) [77]</td></tr><tr><td>locals : ParenL . Local valtypes ParenR (ParenR,) [77]</td></tr><tr><td>locals : ParenL . Local Id valtype ParenR (ParenR,) [76]</td></tr><tr><td>locals : ParenL . Local valtypes ParenR locals (ParenR,) [77]</td></tr><tr><td>locals : ParenL . Local Id valtype ParenR locals (ParenR,) [76]</td></tr><tr><td>params : ParenL . Param ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : ParenL . Param valtypes ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : ParenL . Param Id valtype ParenR (ParenL,ParenR,) [21]</td></tr><tr><td>results : ParenL . Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : ParenL . Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>typeuse : ParenL . Type typeidx ParenR (ParenL,ParenR,) [48]</td></tr><tr><td>typeuse : ParenL . Type typeidx ParenR params (ParenL,ParenR,) [48]</td></tr><tr><td>typeuse : ParenL . Type typeidx ParenR results (ParenL,ParenR,) [48]</td></tr><tr><td>typeuse : ParenL . Type typeidx ParenR params results (ParenL,ParenR,) [48]</td></tr></table>>];
S135 -> S28 [label="Type"];
S135 -> S203 [label="Import"];
S135 -> S39 [label="Export"];
S135 -> S29 [label="Param"];
S135 -> S30 [label="Result"];
S135 -> S31 [label="Local"];
S136 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S136</td></tr>136<tr><td><font color="red">func : ParenL Func id ParenR . (EOF,ParenL,ParenR,) [80]</font></td></tr></table>>];
S137 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S137</td></tr>137<tr><td>exportabbr : exportabbr . ParenL Export String ParenR (ParenL,ParenR,) [74]</td></tr><tr><td>func : ParenL Func id exportabbr . ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func id exportabbr . instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func id exportabbr . locals ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func id exportabbr . typeuse ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func id exportabbr . locals instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func id exportabbr . typeuse instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func id exportabbr . typeuse locals ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func id exportabbr . typeuse locals instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func id exportabbr . ParenL Import String String ParenR ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL Func id exportabbr . ParenL Import String String ParenR typeuse ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>locals : . ParenL Local ParenR (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local ParenR locals (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local valtypes ParenR (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local Id valtype ParenR (ParenR,) [76]</td></tr><tr><td>locals : . ParenL Local valtypes ParenR locals (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local Id valtype ParenR locals (ParenR,) [76]</td></tr><tr><td>typeuse : . params (ParenL,ParenR,) [49]</td></tr><tr><td>typeuse : . results (ParenL,ParenR,) [49]</td></tr><tr><td>typeuse : . params results (ParenL,ParenR,) [49]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR (ParenL,ParenR,) [48]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR params (ParenL,ParenR,) [48]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR results (ParenL,ParenR,) [48]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR params results (ParenL,ParenR,) [48]</td></tr><tr><td>params : . ParenL Param ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . ParenL Param valtypes ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . params ParenL Param ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . ParenL Param Id valtype ParenR (ParenL,ParenR,) [21]</td></tr><tr><td>params : . params ParenL Param valtypes ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . params ParenL Param Id valtype ParenR (ParenL,ParenR,) [21]</td></tr><tr><td>results : . ParenL Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . ParenL Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . results ParenL Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . results ParenL Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr></table>>];
S137 -> S32 [label="ParenL"];
S137 -> S205 [label="ParenR"];
S137 -> S206 [label="instrs"];
S137 -> S207 [label="locals"];
S137 -> S373 [label="params"];
S137 -> S374 [label="results"];
S137 -> S208 [label="typeuse"];
S138 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S138</td></tr>138<tr><td>func : ParenL Func id instrs . ParenR (EOF,ParenL,ParenR,) [80]</td></tr></table>>];
S138 -> S209 [label="ParenR"];
S139 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S139</td></tr>139<tr><td>func : ParenL Func id locals . ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func id locals . instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr></table>>];
S139 -> S210 [label="ParenR"];
S139 -> S211 [label="instrs"];
S140 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S140</td></tr>140<tr><td>func : ParenL Func id typeuse . ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func id typeuse . instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func id typeuse . locals ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func id typeuse . locals instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>locals : . ParenL Local ParenR (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local ParenR locals (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local valtypes ParenR (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local Id valtype ParenR (ParenR,) [76]</td></tr><tr><td>locals : . ParenL Local valtypes ParenR locals (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local Id valtype ParenR locals (ParenR,) [76]</td></tr></table>>];
S140 -> S32 [label="ParenL"];
S140 -> S212 [label="ParenR"];
S140 -> S213 [label="instrs"];
S140 -> S214 [label="locals"];
S141 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S141</td></tr>141<tr><td><font color="red">func : ParenL Func instrs ParenR . (EOF,ParenL,ParenR,) [80]</font></td></tr></table>>];
S142 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S142</td></tr>142<tr><td><font color="red">func : ParenL Func locals ParenR . (EOF,ParenL,ParenR,) [80]</font></td></tr></table>>];
S143 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S143</td></tr>143<tr><td>func : ParenL Func locals instrs . ParenR (EOF,ParenL,ParenR,) [80]</td></tr></table>>];
S143 -> S215 [label="ParenR"];
S144 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S144</td></tr>144<tr><td><font color="red">func : ParenL Func typeuse ParenR . (EOF,ParenL,ParenR,) [80]</font></td></tr></table>>];
S145 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S145</td></tr>145<tr><td>func : ParenL Func typeuse instrs . ParenR (EOF,ParenL,ParenR,) [80]</td></tr></table>>];
S145 -> S216 [label="ParenR"];
S146 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S146</td></tr>146<tr><td>func : ParenL Func typeuse locals . ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func typeuse locals . instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr></table>>];
S146 -> S217 [label="ParenR"];
S146 -> S218 [label="instrs"];
S147 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S147</td></tr>147<tr><td>table : ParenL Table exportabbr importabbr . tabletype ParenR (EOF,ParenL,ParenR,) [82]</td></tr><tr><td>tabletype : . limits reftype (ParenR,) [53]</td></tr><tr><td>limits : . u64 (Funcref,Externref,) [51]</td></tr><tr><td>limits : . u64 u64 (Funcref,Externref,) [52]</td></tr><tr><td>u64 : . Integer (Integer,Funcref,Externref,) [33]</td></tr></table>>];
S147 -> S327 [label="Integer"];
S147 -> S282 [label="limits"];
S147 -> S219 [label="tabletype"];
S147 -> S288 [label="u64"];
S148 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S148</td></tr>148<tr><td>table : ParenL Table exportabbr tabletype . ParenR (EOF,ParenL,ParenR,) [82]</td></tr></table>>];
S148 -> S220 [label="ParenR"];
S149 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S149</td></tr>149<tr><td>exportabbr : ParenL . Export String ParenR (ParenL,Integer,) [74]</td></tr><tr><td>importabbr : ParenL . Import String String ParenR (Integer,) [72]</td></tr></table>>];
S149 -> S35 [label="Import"];
S149 -> S39 [label="Export"];
S150 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S150</td></tr>150<tr><td>exportabbr : exportabbr . ParenL Export String ParenR (ParenL,Integer,) [74]</td></tr><tr><td>table : ParenL Table id exportabbr . tabletype ParenR (EOF,ParenL,ParenR,) [82]</td></tr><tr><td>table : ParenL Table id exportabbr . importabbr tabletype ParenR (EOF,ParenL,ParenR,) [82]</td></tr><tr><td>tabletype : . limits reftype (ParenR,) [53]</td></tr><tr><td>importabbr : . ParenL Import String String ParenR (Integer,) [72]</td></tr><tr><td>limits : . u64 (Funcref,Externref,) [51]</td></tr><tr><td>limits : . u64 u64 (Funcref,Externref,) [52]</td></tr><tr><td>u64 : . Integer (Integer,Funcref,Externref,) [33]</td></tr></table>>];
S150 -> S36 [label="ParenL"];
S150 -> S327 [label="Integer"];
S150 -> S221 [label="importabbr"];
S150 -> S282 [label="limits"];
S150 -> S222 [label="tabletype"];
S150 -> S288 [label="u64"];
S151 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S151</td></tr>151<tr><td>table : ParenL Table id importabbr . tabletype ParenR (EOF,ParenL,ParenR,) [82]</td></tr><tr><td>tabletype : . limits reftype (ParenR,) [53]</td></tr><tr><td>limits : . u64 (Funcref,Externref,) [51]</td></tr><tr><td>limits : . u64 u64 (Funcref,Externref,) [52]</td></tr><tr><td>u64 : . Integer (Integer,Funcref,Externref,) [33]</td></tr></table>>];
S151 -> S327 [label="Integer"];
S151 -> S282 [label="limits"];
S151 -> S223 [label="tabletype"];
S151 -> S288 [label="u64"];
S152 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S152</td></tr>152<tr><td>table : ParenL Table id tabletype . ParenR (EOF,ParenL,ParenR,) [82]</td></tr></table>>];
S152 -> S224 [label="ParenR"];
S153 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S153</td></tr>153<tr><td>table : ParenL Table importabbr tabletype . ParenR (EOF,ParenL,ParenR,) [82]</td></tr></table>>];
S153 -> S225 [label="ParenR"];
S154 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S154</td></tr>154<tr><td><font color="red">table : ParenL Table tabletype ParenR . (EOF,ParenL,ParenR,) [82]</font></td></tr></table>>];
S155 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S155</td></tr>155<tr><td>memory : ParenL Memory exportabbr importabbr . limits ParenR (EOF,ParenL,ParenR,) [83]</td></tr><tr><td>limits : . u64 (ParenR,) [51]</td></tr><tr><td>limits : . u64 u64 (ParenR,) [52]</td></tr><tr><td>u64 : . Integer (ParenR,Integer,) [33]</td></tr></table>>];
S155 -> S327 [label="Integer"];
S155 -> S226 [label="limits"];
S155 -> S288 [label="u64"];
S156 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S156</td></tr>156<tr><td>memory : ParenL Memory exportabbr limits . ParenR (EOF,ParenL,ParenR,) [83]</td></tr></table>>];
S156 -> S227 [label="ParenR"];
S157 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S157</td></tr>157<tr><td>exportabbr : exportabbr . ParenL Export String ParenR (ParenL,Integer,) [74]</td></tr><tr><td>memory : ParenL Memory id exportabbr . limits ParenR (EOF,ParenL,ParenR,) [83]</td></tr><tr><td>memory : ParenL Memory id exportabbr . importabbr limits ParenR (EOF,ParenL,ParenR,) [83]</td></tr><tr><td>limits : . u64 (ParenR,) [51]</td></tr><tr><td>limits : . u64 u64 (ParenR,) [52]</td></tr><tr><td>importabbr : . ParenL Import String String ParenR (Integer,) [72]</td></tr><tr><td>u64 : . Integer (ParenR,Integer,) [33]</td></tr></table>>];
S157 -> S36 [label="ParenL"];
S157 -> S327 [label="Integer"];
S157 -> S228 [label="importabbr"];
S157 -> S229 [label="limits"];
S157 -> S288 [label="u64"];
S158 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S158</td></tr>158<tr><td>memory : ParenL Memory id importabbr . limits ParenR (EOF,ParenL,ParenR,) [83]</td></tr><tr><td>limits : . u64 (ParenR,) [51]</td></tr><tr><td>limits : . u64 u64 (ParenR,) [52]</td></tr><tr><td>u64 : . Integer (ParenR,Integer,) [33]</td></tr></table>>];
S158 -> S327 [label="Integer"];
S158 -> S230 [label="limits"];
S158 -> S288 [label="u64"];
S159 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S159</td></tr>159<tr><td>memory : ParenL Memory id limits . ParenR (EOF,ParenL,ParenR,) [83]</td></tr></table>>];
S159 -> S231 [label="ParenR"];
S160 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S160</td></tr>160<tr><td>memory : ParenL Memory importabbr limits . ParenR (EOF,ParenL,ParenR,) [83]</td></tr></table>>];
S160 -> S232 [label="ParenR"];
S161 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S161</td></tr>161<tr><td><font color="red">memory : ParenL Memory limits ParenR . (EOF,ParenL,ParenR,) [83]</font></td></tr></table>>];
S162 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S162</td></tr>162<tr><td>global : ParenL Global ParenL Import . String String ParenR globaltype ParenR (EOF,ParenL,ParenR,) [85]</td></tr></table>>];
S162 -> S233 [label="String"];
S163 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S163</td></tr>163<tr><td>global : ParenL Global exportabbr globaltype . constexpr ParenR (EOF,ParenL,ParenR,) [84]</td></tr><tr><td>constexpr : . Ref_null heaptype (ParenR,) [56]</td></tr><tr><td>constexpr : . Ref_func funcidx (ParenR,) [57]</td></tr><tr><td>constexpr : . VariableInstr globalidx (ParenR,) [62]</td></tr><tr><td>constexpr : . I32_const i32 (ParenR,) [58]</td></tr><tr><td>constexpr : . I64_const i64 (ParenR,) [59]</td></tr><tr><td>constexpr : . F32_const f32 (ParenR,) [60]</td></tr><tr><td>constexpr : . F64_const f64 (ParenR,) [61]</td></tr></table>>];
S163 -> S296 [label="Ref_null"];
S163 -> S297 [label="Ref_func"];
S163 -> S298 [label="VariableInstr"];
S163 -> S299 [label="I32_const"];
S163 -> S300 [label="I64_const"];
S163 -> S301 [label="F32_const"];
S163 -> S302 [label="F64_const"];
S163 -> S235 [label="constexpr"];
S164 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S164</td></tr>164<tr><td>global : ParenL Global globaltype constexpr . ParenR (EOF,ParenL,ParenR,) [84]</td></tr></table>>];
S164 -> S236 [label="ParenR"];
S165 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S165</td></tr>165<tr><td>exportabbr : ParenL . Export String ParenR (ParenL,Funcref,Externref,NumType,) [74]</td></tr><tr><td>global : ParenL Global id ParenL . Import String String ParenR globaltype ParenR (EOF,ParenL,ParenR,) [85]</td></tr><tr><td>globaltype : ParenL . Mut valtype ParenR (Ref_null,Ref_func,VariableInstr,I32_const,I64_const,F32_const,F64_const,) [55]</td></tr></table>>];
S165 -> S237 [label="Import"];
S165 -> S39 [label="Export"];
S165 -> S40 [label="Mut"];
S166 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S166</td></tr>166<tr><td>exportabbr : exportabbr . ParenL Export String ParenR (ParenL,Funcref,Externref,NumType,) [74]</td></tr><tr><td>global : ParenL Global id exportabbr . globaltype constexpr ParenR (EOF,ParenL,ParenR,) [84]</td></tr><tr><td>global : ParenL Global id exportabbr . ParenL Import String String ParenR globaltype ParenR (EOF,ParenL,ParenR,) [85]</td></tr><tr><td>globaltype : . valtype (Ref_null,Ref_func,VariableInstr,I32_const,I64_const,F32_const,F64_const,) [54]</td></tr><tr><td>globaltype : . ParenL Mut valtype ParenR (Ref_null,Ref_func,VariableInstr,I32_const,I64_const,F32_const,F64_const,) [55]</td></tr><tr><td>valtype : . Funcref (Ref_null,Ref_func,VariableInstr,I32_const,I64_const,F32_const,F64_const,) [15]</td></tr><tr><td>valtype : . Externref (Ref_null,Ref_func,VariableInstr,I32_const,I64_const,F32_const,F64_const,) [16]</td></tr><tr><td>valtype : . NumType (Ref_null,Ref_func,VariableInstr,I32_const,I64_const,F32_const,F64_const,) [14]</td></tr></table>>];
S166 -> S41 [label="ParenL"];
S166 -> S378 [label="Funcref"];
S166 -> S379 [label="Externref"];
S166 -> S380 [label="NumType"];
S166 -> S239 [label="globaltype"];
S166 -> S382 [label="valtype"];
S167 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S167</td></tr>167<tr><td>global : ParenL Global id globaltype . constexpr ParenR (EOF,ParenL,ParenR,) [84]</td></tr><tr><td>constexpr : . Ref_null heaptype (ParenR,) [56]</td></tr><tr><td>constexpr : . Ref_func funcidx (ParenR,) [57]</td></tr><tr><td>constexpr : . VariableInstr globalidx (ParenR,) [62]</td></tr><tr><td>constexpr : . I32_const i32 (ParenR,) [58]</td></tr><tr><td>constexpr : . I64_const i64 (ParenR,) [59]</td></tr><tr><td>constexpr : . F32_const f32 (ParenR,) [60]</td></tr><tr><td>constexpr : . F64_const f64 (ParenR,) [61]</td></tr></table>>];
S167 -> S296 [label="Ref_null"];
S167 -> S297 [label="Ref_func"];
S167 -> S298 [label="VariableInstr"];
S167 -> S299 [label="I32_const"];
S167 -> S300 [label="I64_const"];
S167 -> S301 [label="F32_const"];
S167 -> S302 [label="F64_const"];
S167 -> S240 [label="constexpr"];
S168 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S168</td></tr>168<tr><td><font color="red">functype : ParenL Func params results ParenR . (ParenR,) [26]</font></td></tr></table>>];
S169 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S169</td></tr>169<tr><td><font color="red">importdesc : ParenL Func ParenR . (ParenR,) [64]</font></td></tr></table>>];
S170 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S170</td></tr>170<tr><td>importdesc : ParenL Func id . ParenR (ParenR,) [64]</td></tr><tr><td>importdesc : ParenL Func id . typeuse ParenR (ParenR,) [64]</td></tr><tr><td>typeuse : . params (ParenR,) [49]</td></tr><tr><td>typeuse : . results (ParenR,) [49]</td></tr><tr><td>typeuse : . params results (ParenR,) [49]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR (ParenR,) [48]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR params (ParenR,) [48]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR results (ParenR,) [48]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR params results (ParenR,) [48]</td></tr><tr><td>params : . ParenL Param ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . ParenL Param valtypes ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . params ParenL Param ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . ParenL Param Id valtype ParenR (ParenL,ParenR,) [21]</td></tr><tr><td>params : . params ParenL Param valtypes ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . params ParenL Param Id valtype ParenR (ParenL,ParenR,) [21]</td></tr><tr><td>results : . ParenL Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . ParenL Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . results ParenL Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . results ParenL Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr></table>>];
S170 -> S32 [label="ParenL"];
S170 -> S241 [label="ParenR"];
S170 -> S373 [label="params"];
S170 -> S374 [label="results"];
S170 -> S242 [label="typeuse"];
S171 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S171</td></tr>171<tr><td>importdesc : ParenL Func typeuse . ParenR (ParenR,) [64]</td></tr></table>>];
S171 -> S244 [label="ParenR"];
S172 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S172</td></tr>172<tr><td>importdesc : ParenL Table id . tabletype ParenR (ParenR,) [65]</td></tr><tr><td>tabletype : . limits reftype (ParenR,) [53]</td></tr><tr><td>limits : . u64 (Funcref,Externref,) [51]</td></tr><tr><td>limits : . u64 u64 (Funcref,Externref,) [52]</td></tr><tr><td>u64 : . Integer (Integer,Funcref,Externref,) [33]</td></tr></table>>];
S172 -> S327 [label="Integer"];
S172 -> S282 [label="limits"];
S172 -> S245 [label="tabletype"];
S172 -> S288 [label="u64"];
S173 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S173</td></tr>173<tr><td>importdesc : ParenL Table tabletype . ParenR (ParenR,) [65]</td></tr></table>>];
S173 -> S246 [label="ParenR"];
S174 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S174</td></tr>174<tr><td>importdesc : ParenL Memory id . limits ParenR (ParenR,) [66]</td></tr><tr><td>limits : . u64 (ParenR,) [51]</td></tr><tr><td>limits : . u64 u64 (ParenR,) [52]</td></tr><tr><td>u64 : . Integer (ParenR,Integer,) [33]</td></tr></table>>];
S174 -> S327 [label="Integer"];
S174 -> S247 [label="limits"];
S174 -> S288 [label="u64"];
S175 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S175</td></tr>175<tr><td>importdesc : ParenL Memory limits . ParenR (ParenR,) [66]</td></tr></table>>];
S175 -> S248 [label="ParenR"];
S176 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S176</td></tr>176<tr><td><font color="red">id : Id . (ParenL,ParenR,Integer,Funcref,Externref,NumType,) [29]</font></td></tr></table>>];
S177 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S177</td></tr>177<tr><td>importdesc : ParenL Global globaltype . ParenR (ParenR,) [67]</td></tr></table>>];
S177 -> S249 [label="ParenR"];
S178 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S178</td></tr>178<tr><td>importdesc : ParenL Global id . globaltype ParenR (ParenR,) [67]</td></tr><tr><td>globaltype : . valtype (ParenR,) [54]</td></tr><tr><td>globaltype : . ParenL Mut valtype ParenR (ParenR,) [55]</td></tr><tr><td>valtype : . Funcref (ParenR,) [15]</td></tr><tr><td>valtype : . Externref (ParenR,) [16]</td></tr><tr><td>valtype : . NumType (ParenR,) [14]</td></tr></table>>];
S178 -> S96 [label="ParenL"];
S178 -> S378 [label="Funcref"];
S178 -> S379 [label="Externref"];
S178 -> S380 [label="NumType"];
S178 -> S250 [label="globaltype"];
S178 -> S382 [label="valtype"];
S179 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S179</td></tr>179<tr><td>params : params . ParenL Param ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : params . ParenL Param valtypes ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : params . ParenL Param Id valtype ParenR (ParenL,ParenR,) [21]</td></tr><tr><td><font color="red">typeuse : ParenL Type typeidx ParenR params . (ParenL,ParenR,) [48]</font></td></tr><tr><td>typeuse : ParenL Type typeidx ParenR params . results (ParenL,ParenR,) [48]</td></tr><tr><td>results : . ParenL Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . ParenL Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . results ParenL Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . results ParenL Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr></table>>];
S179 -> S33 [label="ParenL"];
S179 -> S369 [label="results"];
S180 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S180</td></tr>180<tr><td><font color="red">params : ParenL Param Id valtype ParenR . (ParenL,ParenR,) [21]</font></td></tr></table>>];
S181 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S181</td></tr>181<tr><td><font color="red">locals : ParenL Local Id valtype ParenR . (ParenR,) [76]</font></td></tr><tr><td>locals : ParenL Local Id valtype ParenR . locals (ParenR,) [76]</td></tr><tr><td>locals : . ParenL Local ParenR (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local ParenR locals (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local valtypes ParenR (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local Id valtype ParenR (ParenR,) [76]</td></tr><tr><td>locals : . ParenL Local valtypes ParenR locals (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local Id valtype ParenR locals (ParenR,) [76]</td></tr></table>>];
S181 -> S32 [label="ParenL"];
S181 -> S251 [label="locals"];
S182 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S182</td></tr>182<tr><td><font color="red">locals : ParenL Local valtypes ParenR locals . (ParenR,) [77]</font></td></tr></table>>];
S183 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S183</td></tr>183<tr><td>params : params ParenL Param Id valtype . ParenR (ParenL,ParenR,) [21]</td></tr></table>>];
S183 -> S252 [label="ParenR"];
S184 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S184</td></tr>184<tr><td><font color="red">params : params ParenL Param valtypes ParenR . (ParenL,ParenR,) [22]</font></td></tr></table>>];
S185 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S185</td></tr>185<tr><td><font color="red">results : results ParenL Result valtypes ParenR . (ParenL,ParenR,) [24]</font></td></tr></table>>];
S186 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S186</td></tr>186<tr><td><font color="red">importabbr : ParenL Import String String ParenR . (Integer,) [72]</font></td></tr></table>>];
S187 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S187</td></tr>187<tr><td><font color="red">exportabbr : exportabbr ParenL Export String ParenR . (ParenL,ParenR,Integer,Funcref,Externref,NumType,) [74]</font></td></tr></table>>];
S188 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S188</td></tr>188<tr><td><font color="red">type : ParenL Type id functype ParenR . (EOF,ParenL,ParenR,) [31]</font></td></tr></table>>];
S189 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S189</td></tr>189<tr><td>importdesc : ParenL . Func ParenR (ParenR,) [64]</td></tr><tr><td>importdesc : ParenL . Func id ParenR (ParenR,) [64]</td></tr><tr><td>importdesc : ParenL . Func typeuse ParenR (ParenR,) [64]</td></tr><tr><td>importdesc : ParenL . Table tabletype ParenR (ParenR,) [65]</td></tr><tr><td>importdesc : ParenL . Memory limits ParenR (ParenR,) [66]</td></tr><tr><td>importdesc : ParenL . Global globaltype ParenR (ParenR,) [67]</td></tr><tr><td>importdesc : ParenL . Func id typeuse ParenR (ParenR,) [64]</td></tr><tr><td>importdesc : ParenL . Table id tabletype ParenR (ParenR,) [65]</td></tr><tr><td>importdesc : ParenL . Memory id limits ParenR (ParenR,) [66]</td></tr><tr><td>importdesc : ParenL . Global id globaltype ParenR (ParenR,) [67]</td></tr></table>>];
S189 -> S103 [label="Func"];
S189 -> S104 [label="Table"];
S189 -> S105 [label="Memory"];
S189 -> S106 [label="Global"];
S190 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S190</td></tr>190<tr><td>import : ParenL Import String String importdesc . ParenR (EOF,ParenL,ParenR,) [63]</td></tr></table>>];
S190 -> S253 [label="ParenR"];
S191 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S191</td></tr>191<tr><td>export : ParenL Export String ParenL Func . funcidx ParenR ParenR (EOF,ParenL,ParenR,) [68]</td></tr><tr><td>funcidx : . Id (ParenR,) [41]</td></tr><tr><td>funcidx : . u32 (ParenR,) [40]</td></tr><tr><td>u32 : . Integer (ParenR,) [32]</td></tr></table>>];
S191 -> S334 [label="Id"];
S191 -> S337 [label="Integer"];
S191 -> S254 [label="funcidx"];
S191 -> S335 [label="u32"];
S192 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S192</td></tr>192<tr><td>export : ParenL Export String ParenL Table . tableidx ParenR ParenR (EOF,ParenL,ParenR,) [69]</td></tr><tr><td>tableidx : . Id (ParenR,) [43]</td></tr><tr><td>tableidx : . u32 (ParenR,) [42]</td></tr><tr><td>u32 : . Integer (ParenR,) [32]</td></tr></table>>];
S192 -> S255 [label="Id"];
S192 -> S337 [label="Integer"];
S192 -> S256 [label="tableidx"];
S192 -> S257 [label="u32"];
S193 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S193</td></tr>193<tr><td>export : ParenL Export String ParenL Memory . memidx ParenR ParenR (EOF,ParenL,ParenR,) [70]</td></tr><tr><td>memidx : . Id (ParenR,) [45]</td></tr><tr><td>memidx : . u32 (ParenR,) [44]</td></tr><tr><td>u32 : . Integer (ParenR,) [32]</td></tr></table>>];
S193 -> S258 [label="Id"];
S193 -> S337 [label="Integer"];
S193 -> S259 [label="memidx"];
S193 -> S260 [label="u32"];
S194 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S194</td></tr>194<tr><td>export : ParenL Export String ParenL Global . globalidx ParenR ParenR (EOF,ParenL,ParenR,) [71]</td></tr><tr><td>globalidx : . Id (ParenR,) [47]</td></tr><tr><td>globalidx : . u32 (ParenR,) [46]</td></tr><tr><td>u32 : . Integer (ParenR,) [32]</td></tr></table>>];
S194 -> S336 [label="Id"];
S194 -> S337 [label="Integer"];
S194 -> S261 [label="globalidx"];
S194 -> S338 [label="u32"];
S195 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S195</td></tr>195<tr><td>func : ParenL Func ParenL Import String . String ParenR ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL Func ParenL Import String . String ParenR typeuse ParenR (EOF,ParenL,ParenR,) [81]</td></tr></table>>];
S195 -> S262 [label="String"];
S196 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S196</td></tr>196<tr><td>func : ParenL Func exportabbr ParenL Import . String String ParenR ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL Func exportabbr ParenL Import . String String ParenR typeuse ParenR (EOF,ParenL,ParenR,) [81]</td></tr></table>>];
S196 -> S263 [label="String"];
S197 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S197</td></tr>197<tr><td><font color="red">func : ParenL Func exportabbr instrs ParenR . (EOF,ParenL,ParenR,) [80]</font></td></tr></table>>];
S198 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S198</td></tr>198<tr><td><font color="red">func : ParenL Func exportabbr locals ParenR . (EOF,ParenL,ParenR,) [80]</font></td></tr></table>>];
S199 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S199</td></tr>199<tr><td>func : ParenL Func exportabbr locals instrs . ParenR (EOF,ParenL,ParenR,) [80]</td></tr></table>>];
S199 -> S264 [label="ParenR"];
S200 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S200</td></tr>200<tr><td><font color="red">func : ParenL Func exportabbr typeuse ParenR . (EOF,ParenL,ParenR,) [80]</font></td></tr></table>>];
S201 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S201</td></tr>201<tr><td>func : ParenL Func exportabbr typeuse instrs . ParenR (EOF,ParenL,ParenR,) [80]</td></tr></table>>];
S201 -> S265 [label="ParenR"];
S202 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S202</td></tr>202<tr><td>func : ParenL Func exportabbr typeuse locals . ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func exportabbr typeuse locals . instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr></table>>];
S202 -> S266 [label="ParenR"];
S202 -> S267 [label="instrs"];
S203 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S203</td></tr>203<tr><td>func : ParenL Func id ParenL Import . String String ParenR ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL Func id ParenL Import . String String ParenR typeuse ParenR (EOF,ParenL,ParenR,) [81]</td></tr></table>>];
S203 -> S268 [label="String"];
S204 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S204</td></tr>204<tr><td>func : ParenL Func id exportabbr ParenL . Import String String ParenR ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL Func id exportabbr ParenL . Import String String ParenR typeuse ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>locals : ParenL . Local ParenR (ParenR,) [77]</td></tr><tr><td>locals : ParenL . Local ParenR locals (ParenR,) [77]</td></tr><tr><td>locals : ParenL . Local valtypes ParenR (ParenR,) [77]</td></tr><tr><td>locals : ParenL . Local Id valtype ParenR (ParenR,) [76]</td></tr><tr><td>locals : ParenL . Local valtypes ParenR locals (ParenR,) [77]</td></tr><tr><td>locals : ParenL . Local Id valtype ParenR locals (ParenR,) [76]</td></tr><tr><td>params : ParenL . Param ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : ParenL . Param valtypes ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : ParenL . Param Id valtype ParenR (ParenL,ParenR,) [21]</td></tr><tr><td>results : ParenL . Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : ParenL . Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>typeuse : ParenL . Type typeidx ParenR (ParenL,ParenR,) [48]</td></tr><tr><td>typeuse : ParenL . Type typeidx ParenR params (ParenL,ParenR,) [48]</td></tr><tr><td>typeuse : ParenL . Type typeidx ParenR results (ParenL,ParenR,) [48]</td></tr><tr><td>typeuse : ParenL . Type typeidx ParenR params results (ParenL,ParenR,) [48]</td></tr></table>>];
S204 -> S28 [label="Type"];
S204 -> S269 [label="Import"];
S204 -> S29 [label="Param"];
S204 -> S30 [label="Result"];
S204 -> S31 [label="Local"];
S205 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S205</td></tr>205<tr><td><font color="red">func : ParenL Func id exportabbr ParenR . (EOF,ParenL,ParenR,) [80]</font></td></tr></table>>];
S206 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S206</td></tr>206<tr><td>func : ParenL Func id exportabbr instrs . ParenR (EOF,ParenL,ParenR,) [80]</td></tr></table>>];
S206 -> S270 [label="ParenR"];
S207 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S207</td></tr>207<tr><td>func : ParenL Func id exportabbr locals . ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func id exportabbr locals . instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr></table>>];
S207 -> S271 [label="ParenR"];
S207 -> S272 [label="instrs"];
S208 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S208</td></tr>208<tr><td>func : ParenL Func id exportabbr typeuse . ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func id exportabbr typeuse . instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func id exportabbr typeuse . locals ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func id exportabbr typeuse . locals instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>locals : . ParenL Local ParenR (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local ParenR locals (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local valtypes ParenR (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local Id valtype ParenR (ParenR,) [76]</td></tr><tr><td>locals : . ParenL Local valtypes ParenR locals (ParenR,) [77]</td></tr><tr><td>locals : . ParenL Local Id valtype ParenR locals (ParenR,) [76]</td></tr></table>>];
S208 -> S32 [label="ParenL"];
S208 -> S273 [label="ParenR"];
S208 -> S274 [label="instrs"];
S208 -> S275 [label="locals"];
S209 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S209</td></tr>209<tr><td><font color="red">func : ParenL Func id instrs ParenR . (EOF,ParenL,ParenR,) [80]</font></td></tr></table>>];
S210 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S210</td></tr>210<tr><td><font color="red">func : ParenL Func id locals ParenR . (EOF,ParenL,ParenR,) [80]</font></td></tr></table>>];
S211 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S211</td></tr>211<tr><td>func : ParenL Func id locals instrs . ParenR (EOF,ParenL,ParenR,) [80]</td></tr></table>>];
S211 -> S276 [label="ParenR"];
S212 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S212</td></tr>212<tr><td><font color="red">func : ParenL Func id typeuse ParenR . (EOF,ParenL,ParenR,) [80]</font></td></tr></table>>];
S213 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S213</td></tr>213<tr><td>func : ParenL Func id typeuse instrs . ParenR (EOF,ParenL,ParenR,) [80]</td></tr></table>>];
S213 -> S277 [label="ParenR"];
S214 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S214</td></tr>214<tr><td>func : ParenL Func id typeuse locals . ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func id typeuse locals . instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr></table>>];
S214 -> S278 [label="ParenR"];
S214 -> S279 [label="instrs"];
S215 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S215</td></tr>215<tr><td><font color="red">func : ParenL Func locals instrs ParenR . (EOF,ParenL,ParenR,) [80]</font></td></tr></table>>];
S216 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S216</td></tr>216<tr><td><font color="red">func : ParenL Func typeuse instrs ParenR . (EOF,ParenL,ParenR,) [80]</font></td></tr></table>>];
S217 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S217</td></tr>217<tr><td><font color="red">func : ParenL Func typeuse locals ParenR . (EOF,ParenL,ParenR,) [80]</font></td></tr></table>>];
S218 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S218</td></tr>218<tr><td>func : ParenL Func typeuse locals instrs . ParenR (EOF,ParenL,ParenR,) [80]</td></tr></table>>];
S218 -> S280 [label="ParenR"];
S219 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S219</td></tr>219<tr><td>table : ParenL Table exportabbr importabbr tabletype . ParenR (EOF,ParenL,ParenR,) [82]</td></tr></table>>];
S219 -> S281 [label="ParenR"];
S220 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S220</td></tr>220<tr><td><font color="red">table : ParenL Table exportabbr tabletype ParenR . (EOF,ParenL,ParenR,) [82]</font></td></tr></table>>];
S221 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S221</td></tr>221<tr><td>table : ParenL Table id exportabbr importabbr . tabletype ParenR (EOF,ParenL,ParenR,) [82]</td></tr><tr><td>tabletype : . limits reftype (ParenR,) [53]</td></tr><tr><td>limits : . u64 (Funcref,Externref,) [51]</td></tr><tr><td>limits : . u64 u64 (Funcref,Externref,) [52]</td></tr><tr><td>u64 : . Integer (Integer,Funcref,Externref,) [33]</td></tr></table>>];
S221 -> S327 [label="Integer"];
S221 -> S282 [label="limits"];
S221 -> S283 [label="tabletype"];
S221 -> S288 [label="u64"];
S222 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S222</td></tr>222<tr><td>table : ParenL Table id exportabbr tabletype . ParenR (EOF,ParenL,ParenR,) [82]</td></tr></table>>];
S222 -> S284 [label="ParenR"];
S223 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S223</td></tr>223<tr><td>table : ParenL Table id importabbr tabletype . ParenR (EOF,ParenL,ParenR,) [82]</td></tr></table>>];
S223 -> S285 [label="ParenR"];
S224 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S224</td></tr>224<tr><td><font color="red">table : ParenL Table id tabletype ParenR . (EOF,ParenL,ParenR,) [82]</font></td></tr></table>>];
S225 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S225</td></tr>225<tr><td><font color="red">table : ParenL Table importabbr tabletype ParenR . (EOF,ParenL,ParenR,) [82]</font></td></tr></table>>];
S226 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S226</td></tr>226<tr><td>memory : ParenL Memory exportabbr importabbr limits . ParenR (EOF,ParenL,ParenR,) [83]</td></tr></table>>];
S226 -> S286 [label="ParenR"];
S227 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S227</td></tr>227<tr><td><font color="red">memory : ParenL Memory exportabbr limits ParenR . (EOF,ParenL,ParenR,) [83]</font></td></tr></table>>];
S228 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S228</td></tr>228<tr><td>memory : ParenL Memory id exportabbr importabbr . limits ParenR (EOF,ParenL,ParenR,) [83]</td></tr><tr><td>limits : . u64 (ParenR,) [51]</td></tr><tr><td>limits : . u64 u64 (ParenR,) [52]</td></tr><tr><td>u64 : . Integer (ParenR,Integer,) [33]</td></tr></table>>];
S228 -> S327 [label="Integer"];
S228 -> S287 [label="limits"];
S228 -> S288 [label="u64"];
S229 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S229</td></tr>229<tr><td>memory : ParenL Memory id exportabbr limits . ParenR (EOF,ParenL,ParenR,) [83]</td></tr></table>>];
S229 -> S289 [label="ParenR"];
S230 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S230</td></tr>230<tr><td>memory : ParenL Memory id importabbr limits . ParenR (EOF,ParenL,ParenR,) [83]</td></tr></table>>];
S230 -> S290 [label="ParenR"];
S231 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S231</td></tr>231<tr><td><font color="red">memory : ParenL Memory id limits ParenR . (EOF,ParenL,ParenR,) [83]</font></td></tr></table>>];
S232 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S232</td></tr>232<tr><td><font color="red">memory : ParenL Memory importabbr limits ParenR . (EOF,ParenL,ParenR,) [83]</font></td></tr></table>>];
S233 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S233</td></tr>233<tr><td>global : ParenL Global ParenL Import String . String ParenR globaltype ParenR (EOF,ParenL,ParenR,) [85]</td></tr></table>>];
S233 -> S291 [label="String"];
S234 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S234</td></tr>234<tr><td>global : ParenL Global exportabbr ParenL Import . String String ParenR globaltype ParenR (EOF,ParenL,ParenR,) [85]</td></tr></table>>];
S234 -> S292 [label="String"];
S235 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S235</td></tr>235<tr><td>global : ParenL Global exportabbr globaltype constexpr . ParenR (EOF,ParenL,ParenR,) [84]</td></tr></table>>];
S235 -> S293 [label="ParenR"];
S236 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S236</td></tr>236<tr><td><font color="red">global : ParenL Global globaltype constexpr ParenR . (EOF,ParenL,ParenR,) [84]</font></td></tr></table>>];
S237 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S237</td></tr>237<tr><td>global : ParenL Global id ParenL Import . String String ParenR globaltype ParenR (EOF,ParenL,ParenR,) [85]</td></tr></table>>];
S237 -> S294 [label="String"];
S238 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S238</td></tr>238<tr><td>global : ParenL Global id exportabbr ParenL . Import String String ParenR globaltype ParenR (EOF,ParenL,ParenR,) [85]</td></tr><tr><td>globaltype : ParenL . Mut valtype ParenR (Ref_null,Ref_func,VariableInstr,I32_const,I64_const,F32_const,F64_const,) [55]</td></tr></table>>];
S238 -> S295 [label="Import"];
S238 -> S40 [label="Mut"];
S239 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S239</td></tr>239<tr><td>global : ParenL Global id exportabbr globaltype . constexpr ParenR (EOF,ParenL,ParenR,) [84]</td></tr><tr><td>constexpr : . Ref_null heaptype (ParenR,) [56]</td></tr><tr><td>constexpr : . Ref_func funcidx (ParenR,) [57]</td></tr><tr><td>constexpr : . VariableInstr globalidx (ParenR,) [62]</td></tr><tr><td>constexpr : . I32_const i32 (ParenR,) [58]</td></tr><tr><td>constexpr : . I64_const i64 (ParenR,) [59]</td></tr><tr><td>constexpr : . F32_const f32 (ParenR,) [60]</td></tr><tr><td>constexpr : . F64_const f64 (ParenR,) [61]</td></tr></table>>];
S239 -> S296 [label="Ref_null"];
S239 -> S297 [label="Ref_func"];
S239 -> S298 [label="VariableInstr"];
S239 -> S299 [label="I32_const"];
S239 -> S300 [label="I64_const"];
S239 -> S301 [label="F32_const"];
S239 -> S302 [label="F64_const"];
S239 -> S303 [label="constexpr"];
S240 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S240</td></tr>240<tr><td>global : ParenL Global id globaltype constexpr . ParenR (EOF,ParenL,ParenR,) [84]</td></tr></table>>];
S240 -> S304 [label="ParenR"];
S241 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S241</td></tr>241<tr><td><font color="red">importdesc : ParenL Func id ParenR . (ParenR,) [64]</font></td></tr></table>>];
S242 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S242</td></tr>242<tr><td>importdesc : ParenL Func id typeuse . ParenR (ParenR,) [64]</td></tr></table>>];
S242 -> S305 [label="ParenR"];
S243 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S243</td></tr>243<tr><td>results : results . ParenL Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : results . ParenL Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr><tr><td><font color="red">typeuse : params results . (ParenL,ParenR,) [49]</font></td></tr></table>>];
S243 -> S34 [label="ParenL"];
S244 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S244</td></tr>244<tr><td><font color="red">importdesc : ParenL Func typeuse ParenR . (ParenR,) [64]</font></td></tr></table>>];
S245 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S245</td></tr>245<tr><td>importdesc : ParenL Table id tabletype . ParenR (ParenR,) [65]</td></tr></table>>];
S245 -> S306 [label="ParenR"];
S246 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S246</td></tr>246<tr><td><font color="red">importdesc : ParenL Table tabletype ParenR . (ParenR,) [65]</font></td></tr></table>>];
S247 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S247</td></tr>247<tr><td>importdesc : ParenL Memory id limits . ParenR (ParenR,) [66]</td></tr></table>>];
S247 -> S307 [label="ParenR"];
S248 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S248</td></tr>248<tr><td><font color="red">importdesc : ParenL Memory limits ParenR . (ParenR,) [66]</font></td></tr></table>>];
S249 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S249</td></tr>249<tr><td><font color="red">importdesc : ParenL Global globaltype ParenR . (ParenR,) [67]</font></td></tr></table>>];
S250 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S250</td></tr>250<tr><td>importdesc : ParenL Global id globaltype . ParenR (ParenR,) [67]</td></tr></table>>];
S250 -> S308 [label="ParenR"];
S251 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S251</td></tr>251<tr><td><font color="red">locals : ParenL Local Id valtype ParenR locals . (ParenR,) [76]</font></td></tr></table>>];
S252 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S252</td></tr>252<tr><td><font color="red">params : params ParenL Param Id valtype ParenR . (ParenL,ParenR,) [21]</font></td></tr></table>>];
S253 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S253</td></tr>253<tr><td><font color="red">import : ParenL Import String String importdesc ParenR . (EOF,ParenL,ParenR,) [63]</font></td></tr></table>>];
S254 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S254</td></tr>254<tr><td>export : ParenL Export String ParenL Func funcidx . ParenR ParenR (EOF,ParenL,ParenR,) [68]</td></tr></table>>];
S254 -> S309 [label="ParenR"];
S255 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S255</td></tr>255<tr><td><font color="red">tableidx : Id . (ParenR,) [43]</font></td></tr></table>>];
S256 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S256</td></tr>256<tr><td>export : ParenL Export String ParenL Table tableidx . ParenR ParenR (EOF,ParenL,ParenR,) [69]</td></tr></table>>];
S256 -> S310 [label="ParenR"];
S257 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S257</td></tr>257<tr><td><font color="red">tableidx : u32 . (ParenR,) [42]</font></td></tr></table>>];
S258 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S258</td></tr>258<tr><td><font color="red">memidx : Id . (ParenR,) [45]</font></td></tr></table>>];
S259 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S259</td></tr>259<tr><td>export : ParenL Export String ParenL Memory memidx . ParenR ParenR (EOF,ParenL,ParenR,) [70]</td></tr></table>>];
S259 -> S311 [label="ParenR"];
S260 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S260</td></tr>260<tr><td><font color="red">memidx : u32 . (ParenR,) [44]</font></td></tr></table>>];
S261 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S261</td></tr>261<tr><td>export : ParenL Export String ParenL Global globalidx . ParenR ParenR (EOF,ParenL,ParenR,) [71]</td></tr></table>>];
S261 -> S312 [label="ParenR"];
S262 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S262</td></tr>262<tr><td>func : ParenL Func ParenL Import String String . ParenR ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL Func ParenL Import String String . ParenR typeuse ParenR (EOF,ParenL,ParenR,) [81]</td></tr></table>>];
S262 -> S313 [label="ParenR"];
S263 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S263</td></tr>263<tr><td>func : ParenL Func exportabbr ParenL Import String . String ParenR ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL Func exportabbr ParenL Import String . String ParenR typeuse ParenR (EOF,ParenL,ParenR,) [81]</td></tr></table>>];
S263 -> S314 [label="String"];
S264 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S264</td></tr>264<tr><td><font color="red">func : ParenL Func exportabbr locals instrs ParenR . (EOF,ParenL,ParenR,) [80]</font></td></tr></table>>];
S265 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S265</td></tr>265<tr><td><font color="red">func : ParenL Func exportabbr typeuse instrs ParenR . (EOF,ParenL,ParenR,) [80]</font></td></tr></table>>];
S266 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S266</td></tr>266<tr><td><font color="red">func : ParenL Func exportabbr typeuse locals ParenR . (EOF,ParenL,ParenR,) [80]</font></td></tr></table>>];
S267 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S267</td></tr>267<tr><td>func : ParenL Func exportabbr typeuse locals instrs . ParenR (EOF,ParenL,ParenR,) [80]</td></tr></table>>];
S267 -> S315 [label="ParenR"];
S268 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S268</td></tr>268<tr><td>func : ParenL Func id ParenL Import String . String ParenR ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL Func id ParenL Import String . String ParenR typeuse ParenR (EOF,ParenL,ParenR,) [81]</td></tr></table>>];
S268 -> S316 [label="String"];
S269 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S269</td></tr>269<tr><td>func : ParenL Func id exportabbr ParenL Import . String String ParenR ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL Func id exportabbr ParenL Import . String String ParenR typeuse ParenR (EOF,ParenL,ParenR,) [81]</td></tr></table>>];
S269 -> S317 [label="String"];
S270 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S270</td></tr>270<tr><td><font color="red">func : ParenL Func id exportabbr instrs ParenR . (EOF,ParenL,ParenR,) [80]</font></td></tr></table>>];
S271 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S271</td></tr>271<tr><td><font color="red">func : ParenL Func id exportabbr locals ParenR . (EOF,ParenL,ParenR,) [80]</font></td></tr></table>>];
S272 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S272</td></tr>272<tr><td>func : ParenL Func id exportabbr locals instrs . ParenR (EOF,ParenL,ParenR,) [80]</td></tr></table>>];
S272 -> S318 [label="ParenR"];
S273 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S273</td></tr>273<tr><td><font color="red">func : ParenL Func id exportabbr typeuse ParenR . (EOF,ParenL,ParenR,) [80]</font></td></tr></table>>];
S274 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S274</td></tr>274<tr><td>func : ParenL Func id exportabbr typeuse instrs . ParenR (EOF,ParenL,ParenR,) [80]</td></tr></table>>];
S274 -> S319 [label="ParenR"];
S275 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S275</td></tr>275<tr><td>func : ParenL Func id exportabbr typeuse locals . ParenR (EOF,ParenL,ParenR,) [80]</td></tr><tr><td>func : ParenL Func id exportabbr typeuse locals . instrs ParenR (EOF,ParenL,ParenR,) [80]</td></tr></table>>];
S275 -> S320 [label="ParenR"];
S275 -> S321 [label="instrs"];
S276 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S276</td></tr>276<tr><td><font color="red">func : ParenL Func id locals instrs ParenR . (EOF,ParenL,ParenR,) [80]</font></td></tr></table>>];
S277 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S277</td></tr>277<tr><td><font color="red">func : ParenL Func id typeuse instrs ParenR . (EOF,ParenL,ParenR,) [80]</font></td></tr></table>>];
S278 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S278</td></tr>278<tr><td><font color="red">func : ParenL Func id typeuse locals ParenR . (EOF,ParenL,ParenR,) [80]</font></td></tr></table>>];
S279 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S279</td></tr>279<tr><td>func : ParenL Func id typeuse locals instrs . ParenR (EOF,ParenL,ParenR,) [80]</td></tr></table>>];
S279 -> S322 [label="ParenR"];
S280 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S280</td></tr>280<tr><td><font color="red">func : ParenL Func typeuse locals instrs ParenR . (EOF,ParenL,ParenR,) [80]</font></td></tr></table>>];
S281 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S281</td></tr>281<tr><td><font color="red">table : ParenL Table exportabbr importabbr tabletype ParenR . (EOF,ParenL,ParenR,) [82]</font></td></tr></table>>];
S282 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S282</td></tr>282<tr><td>tabletype : limits . reftype (ParenR,) [53]</td></tr><tr><td>reftype : . Funcref (ParenR,) [17]</td></tr><tr><td>reftype : . Externref (ParenR,) [18]</td></tr></table>>];
S282 -> S323 [label="Funcref"];
S282 -> S324 [label="Externref"];
S282 -> S37 [label="reftype"];
S283 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S283</td></tr>283<tr><td>table : ParenL Table id exportabbr importabbr tabletype . ParenR (EOF,ParenL,ParenR,) [82]</td></tr></table>>];
S283 -> S325 [label="ParenR"];
S284 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S284</td></tr>284<tr><td><font color="red">table : ParenL Table id exportabbr tabletype ParenR . (EOF,ParenL,ParenR,) [82]</font></td></tr></table>>];
S285 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S285</td></tr>285<tr><td><font color="red">table : ParenL Table id importabbr tabletype ParenR . (EOF,ParenL,ParenR,) [82]</font></td></tr></table>>];
S286 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S286</td></tr>286<tr><td><font color="red">memory : ParenL Memory exportabbr importabbr limits ParenR . (EOF,ParenL,ParenR,) [83]</font></td></tr></table>>];
S287 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S287</td></tr>287<tr><td>memory : ParenL Memory id exportabbr importabbr limits . ParenR (EOF,ParenL,ParenR,) [83]</td></tr></table>>];
S287 -> S326 [label="ParenR"];
S288 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S288</td></tr>288<tr><td><font color="red">limits : u64 . (ParenR,Funcref,Externref,) [51]</font></td></tr><tr><td>limits : u64 . u64 (ParenR,Funcref,Externref,) [52]</td></tr><tr><td>u64 : . Integer (ParenR,Funcref,Externref,) [33]</td></tr></table>>];
S288 -> S327 [label="Integer"];
S288 -> S38 [label="u64"];
S289 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S289</td></tr>289<tr><td><font color="red">memory : ParenL Memory id exportabbr limits ParenR . (EOF,ParenL,ParenR,) [83]</font></td></tr></table>>];
S290 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S290</td></tr>290<tr><td><font color="red">memory : ParenL Memory id importabbr limits ParenR . (EOF,ParenL,ParenR,) [83]</font></td></tr></table>>];
S291 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S291</td></tr>291<tr><td>global : ParenL Global ParenL Import String String . ParenR globaltype ParenR (EOF,ParenL,ParenR,) [85]</td></tr></table>>];
S291 -> S328 [label="ParenR"];
S292 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S292</td></tr>292<tr><td>global : ParenL Global exportabbr ParenL Import String . String ParenR globaltype ParenR (EOF,ParenL,ParenR,) [85]</td></tr></table>>];
S292 -> S329 [label="String"];
S293 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S293</td></tr>293<tr><td><font color="red">global : ParenL Global exportabbr globaltype constexpr ParenR . (EOF,ParenL,ParenR,) [84]</font></td></tr></table>>];
S294 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S294</td></tr>294<tr><td>global : ParenL Global id ParenL Import String . String ParenR globaltype ParenR (EOF,ParenL,ParenR,) [85]</td></tr></table>>];
S294 -> S330 [label="String"];
S295 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S295</td></tr>295<tr><td>global : ParenL Global id exportabbr ParenL Import . String String ParenR globaltype ParenR (EOF,ParenL,ParenR,) [85]</td></tr></table>>];
S295 -> S331 [label="String"];
S296 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S296</td></tr>296<tr><td>constexpr : Ref_null . heaptype (ParenR,) [56]</td></tr><tr><td>heaptype : . Extern (ParenR,) [28]</td></tr><tr><td>heaptype : . Func (ParenR,) [27]</td></tr></table>>];
S296 -> S332 [label="Extern"];
S296 -> S333 [label="Func"];
S296 -> S70 [label="heaptype"];
S297 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S297</td></tr>297<tr><td>constexpr : Ref_func . funcidx (ParenR,) [57]</td></tr><tr><td>funcidx : . Id (ParenR,) [41]</td></tr><tr><td>funcidx : . u32 (ParenR,) [40]</td></tr><tr><td>u32 : . Integer (ParenR,) [32]</td></tr></table>>];
S297 -> S334 [label="Id"];
S297 -> S337 [label="Integer"];
S297 -> S71 [label="funcidx"];
S297 -> S335 [label="u32"];
S298 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S298</td></tr>298<tr><td>constexpr : VariableInstr . globalidx (ParenR,) [62]</td></tr><tr><td>globalidx : . Id (ParenR,) [47]</td></tr><tr><td>globalidx : . u32 (ParenR,) [46]</td></tr><tr><td>u32 : . Integer (ParenR,) [32]</td></tr></table>>];
S298 -> S336 [label="Id"];
S298 -> S337 [label="Integer"];
S298 -> S72 [label="globalidx"];
S298 -> S338 [label="u32"];
S299 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S299</td></tr>299<tr><td>constexpr : I32_const . i32 (ParenR,) [58]</td></tr><tr><td>i32 : . Integer (ParenR,) [34]</td></tr></table>>];
S299 -> S339 [label="Integer"];
S299 -> S73 [label="i32"];
S300 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S300</td></tr>300<tr><td>constexpr : I64_const . i64 (ParenR,) [59]</td></tr><tr><td>i64 : . Integer (ParenR,) [35]</td></tr></table>>];
S300 -> S340 [label="Integer"];
S300 -> S74 [label="i64"];
S301 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S301</td></tr>301<tr><td>constexpr : F32_const . f32 (ParenR,) [60]</td></tr><tr><td>f32 : . Float (ParenR,) [36]</td></tr></table>>];
S301 -> S341 [label="Float"];
S301 -> S75 [label="f32"];
S302 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S302</td></tr>302<tr><td>constexpr : F64_const . f64 (ParenR,) [61]</td></tr><tr><td>f64 : . Float (ParenR,) [37]</td></tr></table>>];
S302 -> S342 [label="Float"];
S302 -> S76 [label="f64"];
S303 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S303</td></tr>303<tr><td>global : ParenL Global id exportabbr globaltype constexpr . ParenR (EOF,ParenL,ParenR,) [84]</td></tr></table>>];
S303 -> S343 [label="ParenR"];
S304 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S304</td></tr>304<tr><td><font color="red">global : ParenL Global id globaltype constexpr ParenR . (EOF,ParenL,ParenR,) [84]</font></td></tr></table>>];
S305 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S305</td></tr>305<tr><td><font color="red">importdesc : ParenL Func id typeuse ParenR . (ParenR,) [64]</font></td></tr></table>>];
S306 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S306</td></tr>306<tr><td><font color="red">importdesc : ParenL Table id tabletype ParenR . (ParenR,) [65]</font></td></tr></table>>];
S307 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S307</td></tr>307<tr><td><font color="red">importdesc : ParenL Memory id limits ParenR . (ParenR,) [66]</font></td></tr></table>>];
S308 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S308</td></tr>308<tr><td><font color="red">importdesc : ParenL Global id globaltype ParenR . (ParenR,) [67]</font></td></tr></table>>];
S309 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S309</td></tr>309<tr><td>export : ParenL Export String ParenL Func funcidx ParenR . ParenR (EOF,ParenL,ParenR,) [68]</td></tr></table>>];
S309 -> S344 [label="ParenR"];
S310 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S310</td></tr>310<tr><td>export : ParenL Export String ParenL Table tableidx ParenR . ParenR (EOF,ParenL,ParenR,) [69]</td></tr></table>>];
S310 -> S345 [label="ParenR"];
S311 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S311</td></tr>311<tr><td>export : ParenL Export String ParenL Memory memidx ParenR . ParenR (EOF,ParenL,ParenR,) [70]</td></tr></table>>];
S311 -> S346 [label="ParenR"];
S312 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S312</td></tr>312<tr><td>export : ParenL Export String ParenL Global globalidx ParenR . ParenR (EOF,ParenL,ParenR,) [71]</td></tr></table>>];
S312 -> S347 [label="ParenR"];
S313 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S313</td></tr>313<tr><td>func : ParenL Func ParenL Import String String ParenR . ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL Func ParenL Import String String ParenR . typeuse ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>typeuse : . params (ParenR,) [49]</td></tr><tr><td>typeuse : . results (ParenR,) [49]</td></tr><tr><td>typeuse : . params results (ParenR,) [49]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR (ParenR,) [48]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR params (ParenR,) [48]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR results (ParenR,) [48]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR params results (ParenR,) [48]</td></tr><tr><td>params : . ParenL Param ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . ParenL Param valtypes ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . params ParenL Param ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . ParenL Param Id valtype ParenR (ParenL,ParenR,) [21]</td></tr><tr><td>params : . params ParenL Param valtypes ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . params ParenL Param Id valtype ParenR (ParenL,ParenR,) [21]</td></tr><tr><td>results : . ParenL Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . ParenL Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . results ParenL Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . results ParenL Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr></table>>];
S313 -> S32 [label="ParenL"];
S313 -> S348 [label="ParenR"];
S313 -> S373 [label="params"];
S313 -> S374 [label="results"];
S313 -> S349 [label="typeuse"];
S314 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S314</td></tr>314<tr><td>func : ParenL Func exportabbr ParenL Import String String . ParenR ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL Func exportabbr ParenL Import String String . ParenR typeuse ParenR (EOF,ParenL,ParenR,) [81]</td></tr></table>>];
S314 -> S350 [label="ParenR"];
S315 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S315</td></tr>315<tr><td><font color="red">func : ParenL Func exportabbr typeuse locals instrs ParenR . (EOF,ParenL,ParenR,) [80]</font></td></tr></table>>];
S316 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S316</td></tr>316<tr><td>func : ParenL Func id ParenL Import String String . ParenR ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL Func id ParenL Import String String . ParenR typeuse ParenR (EOF,ParenL,ParenR,) [81]</td></tr></table>>];
S316 -> S351 [label="ParenR"];
S317 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S317</td></tr>317<tr><td>func : ParenL Func id exportabbr ParenL Import String . String ParenR ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL Func id exportabbr ParenL Import String . String ParenR typeuse ParenR (EOF,ParenL,ParenR,) [81]</td></tr></table>>];
S317 -> S352 [label="String"];
S318 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S318</td></tr>318<tr><td><font color="red">func : ParenL Func id exportabbr locals instrs ParenR . (EOF,ParenL,ParenR,) [80]</font></td></tr></table>>];
S319 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S319</td></tr>319<tr><td><font color="red">func : ParenL Func id exportabbr typeuse instrs ParenR . (EOF,ParenL,ParenR,) [80]</font></td></tr></table>>];
S320 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S320</td></tr>320<tr><td><font color="red">func : ParenL Func id exportabbr typeuse locals ParenR . (EOF,ParenL,ParenR,) [80]</font></td></tr></table>>];
S321 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S321</td></tr>321<tr><td>func : ParenL Func id exportabbr typeuse locals instrs . ParenR (EOF,ParenL,ParenR,) [80]</td></tr></table>>];
S321 -> S353 [label="ParenR"];
S322 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S322</td></tr>322<tr><td><font color="red">func : ParenL Func id typeuse locals instrs ParenR . (EOF,ParenL,ParenR,) [80]</font></td></tr></table>>];
S323 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S323</td></tr>323<tr><td><font color="red">reftype : Funcref . (ParenR,) [17]</font></td></tr></table>>];
S324 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S324</td></tr>324<tr><td><font color="red">reftype : Externref . (ParenR,) [18]</font></td></tr></table>>];
S325 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S325</td></tr>325<tr><td><font color="red">table : ParenL Table id exportabbr importabbr tabletype ParenR . (EOF,ParenL,ParenR,) [82]</font></td></tr></table>>];
S326 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S326</td></tr>326<tr><td><font color="red">memory : ParenL Memory id exportabbr importabbr limits ParenR . (EOF,ParenL,ParenR,) [83]</font></td></tr></table>>];
S327 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S327</td></tr>327<tr><td><font color="red">u64 : Integer . (ParenR,Integer,Funcref,Externref,) [33]</font></td></tr></table>>];
S328 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S328</td></tr>328<tr><td>global : ParenL Global ParenL Import String String ParenR . globaltype ParenR (EOF,ParenL,ParenR,) [85]</td></tr><tr><td>globaltype : . valtype (ParenR,) [54]</td></tr><tr><td>globaltype : . ParenL Mut valtype ParenR (ParenR,) [55]</td></tr><tr><td>valtype : . Funcref (ParenR,) [15]</td></tr><tr><td>valtype : . Externref (ParenR,) [16]</td></tr><tr><td>valtype : . NumType (ParenR,) [14]</td></tr></table>>];
S328 -> S96 [label="ParenL"];
S328 -> S378 [label="Funcref"];
S328 -> S379 [label="Externref"];
S328 -> S380 [label="NumType"];
S328 -> S354 [label="globaltype"];
S328 -> S382 [label="valtype"];
S329 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S329</td></tr>329<tr><td>global : ParenL Global exportabbr ParenL Import String String . ParenR globaltype ParenR (EOF,ParenL,ParenR,) [85]</td></tr></table>>];
S329 -> S355 [label="ParenR"];
S330 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S330</td></tr>330<tr><td>global : ParenL Global id ParenL Import String String . ParenR globaltype ParenR (EOF,ParenL,ParenR,) [85]</td></tr></table>>];
S330 -> S356 [label="ParenR"];
S331 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S331</td></tr>331<tr><td>global : ParenL Global id exportabbr ParenL Import String . String ParenR globaltype ParenR (EOF,ParenL,ParenR,) [85]</td></tr></table>>];
S331 -> S357 [label="String"];
S332 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S332</td></tr>332<tr><td><font color="red">heaptype : Extern . (ParenR,) [28]</font></td></tr></table>>];
S333 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S333</td></tr>333<tr><td><font color="red">heaptype : Func . (ParenR,) [27]</font></td></tr></table>>];
S334 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S334</td></tr>334<tr><td><font color="red">funcidx : Id . (ParenR,) [41]</font></td></tr></table>>];
S335 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S335</td></tr>335<tr><td><font color="red">funcidx : u32 . (ParenR,) [40]</font></td></tr></table>>];
S336 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S336</td></tr>336<tr><td><font color="red">globalidx : Id . (ParenR,) [47]</font></td></tr></table>>];
S337 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S337</td></tr>337<tr><td><font color="red">u32 : Integer . (ParenR,) [32]</font></td></tr></table>>];
S338 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S338</td></tr>338<tr><td><font color="red">globalidx : u32 . (ParenR,) [46]</font></td></tr></table>>];
S339 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S339</td></tr>339<tr><td><font color="red">i32 : Integer . (ParenR,) [34]</font></td></tr></table>>];
S340 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S340</td></tr>340<tr><td><font color="red">i64 : Integer . (ParenR,) [35]</font></td></tr></table>>];
S341 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S341</td></tr>341<tr><td><font color="red">f32 : Float . (ParenR,) [36]</font></td></tr></table>>];
S342 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S342</td></tr>342<tr><td><font color="red">f64 : Float . (ParenR,) [37]</font></td></tr></table>>];
S343 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S343</td></tr>343<tr><td><font color="red">global : ParenL Global id exportabbr globaltype constexpr ParenR . (EOF,ParenL,ParenR,) [84]</font></td></tr></table>>];
S344 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S344</td></tr>344<tr><td><font color="red">export : ParenL Export String ParenL Func funcidx ParenR ParenR . (EOF,ParenL,ParenR,) [68]</font></td></tr></table>>];
S345 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S345</td></tr>345<tr><td><font color="red">export : ParenL Export String ParenL Table tableidx ParenR ParenR . (EOF,ParenL,ParenR,) [69]</font></td></tr></table>>];
S346 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S346</td></tr>346<tr><td><font color="red">export : ParenL Export String ParenL Memory memidx ParenR ParenR . (EOF,ParenL,ParenR,) [70]</font></td></tr></table>>];
S347 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S347</td></tr>347<tr><td><font color="red">export : ParenL Export String ParenL Global globalidx ParenR ParenR . (EOF,ParenL,ParenR,) [71]</font></td></tr></table>>];
S348 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S348</td></tr>348<tr><td><font color="red">func : ParenL Func ParenL Import String String ParenR ParenR . (EOF,ParenL,ParenR,) [81]</font></td></tr></table>>];
S349 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S349</td></tr>349<tr><td>func : ParenL Func ParenL Import String String ParenR typeuse . ParenR (EOF,ParenL,ParenR,) [81]</td></tr></table>>];
S349 -> S359 [label="ParenR"];
S350 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S350</td></tr>350<tr><td>func : ParenL Func exportabbr ParenL Import String String ParenR . ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL Func exportabbr ParenL Import String String ParenR . typeuse ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>typeuse : . params (ParenR,) [49]</td></tr><tr><td>typeuse : . results (ParenR,) [49]</td></tr><tr><td>typeuse : . params results (ParenR,) [49]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR (ParenR,) [48]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR params (ParenR,) [48]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR results (ParenR,) [48]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR params results (ParenR,) [48]</td></tr><tr><td>params : . ParenL Param ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . ParenL Param valtypes ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . params ParenL Param ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . ParenL Param Id valtype ParenR (ParenL,ParenR,) [21]</td></tr><tr><td>params : . params ParenL Param valtypes ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . params ParenL Param Id valtype ParenR (ParenL,ParenR,) [21]</td></tr><tr><td>results : . ParenL Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . ParenL Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . results ParenL Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . results ParenL Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr></table>>];
S350 -> S32 [label="ParenL"];
S350 -> S360 [label="ParenR"];
S350 -> S373 [label="params"];
S350 -> S374 [label="results"];
S350 -> S361 [label="typeuse"];
S351 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S351</td></tr>351<tr><td>func : ParenL Func id ParenL Import String String ParenR . ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL Func id ParenL Import String String ParenR . typeuse ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>typeuse : . params (ParenR,) [49]</td></tr><tr><td>typeuse : . results (ParenR,) [49]</td></tr><tr><td>typeuse : . params results (ParenR,) [49]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR (ParenR,) [48]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR params (ParenR,) [48]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR results (ParenR,) [48]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR params results (ParenR,) [48]</td></tr><tr><td>params : . ParenL Param ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . ParenL Param valtypes ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . params ParenL Param ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . ParenL Param Id valtype ParenR (ParenL,ParenR,) [21]</td></tr><tr><td>params : . params ParenL Param valtypes ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . params ParenL Param Id valtype ParenR (ParenL,ParenR,) [21]</td></tr><tr><td>results : . ParenL Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . ParenL Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . results ParenL Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . results ParenL Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr></table>>];
S351 -> S32 [label="ParenL"];
S351 -> S362 [label="ParenR"];
S351 -> S373 [label="params"];
S351 -> S374 [label="results"];
S351 -> S363 [label="typeuse"];
S352 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S352</td></tr>352<tr><td>func : ParenL Func id exportabbr ParenL Import String String . ParenR ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL Func id exportabbr ParenL Import String String . ParenR typeuse ParenR (EOF,ParenL,ParenR,) [81]</td></tr></table>>];
S352 -> S364 [label="ParenR"];
S353 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S353</td></tr>353<tr><td><font color="red">func : ParenL Func id exportabbr typeuse locals instrs ParenR . (EOF,ParenL,ParenR,) [80]</font></td></tr></table>>];
S354 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S354</td></tr>354<tr><td>global : ParenL Global ParenL Import String String ParenR globaltype . ParenR (EOF,ParenL,ParenR,) [85]</td></tr></table>>];
S354 -> S365 [label="ParenR"];
S355 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S355</td></tr>355<tr><td>global : ParenL Global exportabbr ParenL Import String String ParenR . globaltype ParenR (EOF,ParenL,ParenR,) [85]</td></tr><tr><td>globaltype : . valtype (ParenR,) [54]</td></tr><tr><td>globaltype : . ParenL Mut valtype ParenR (ParenR,) [55]</td></tr><tr><td>valtype : . Funcref (ParenR,) [15]</td></tr><tr><td>valtype : . Externref (ParenR,) [16]</td></tr><tr><td>valtype : . NumType (ParenR,) [14]</td></tr></table>>];
S355 -> S96 [label="ParenL"];
S355 -> S378 [label="Funcref"];
S355 -> S379 [label="Externref"];
S355 -> S380 [label="NumType"];
S355 -> S366 [label="globaltype"];
S355 -> S382 [label="valtype"];
S356 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S356</td></tr>356<tr><td>global : ParenL Global id ParenL Import String String ParenR . globaltype ParenR (EOF,ParenL,ParenR,) [85]</td></tr><tr><td>globaltype : . valtype (ParenR,) [54]</td></tr><tr><td>globaltype : . ParenL Mut valtype ParenR (ParenR,) [55]</td></tr><tr><td>valtype : . Funcref (ParenR,) [15]</td></tr><tr><td>valtype : . Externref (ParenR,) [16]</td></tr><tr><td>valtype : . NumType (ParenR,) [14]</td></tr></table>>];
S356 -> S96 [label="ParenL"];
S356 -> S378 [label="Funcref"];
S356 -> S379 [label="Externref"];
S356 -> S380 [label="NumType"];
S356 -> S367 [label="globaltype"];
S356 -> S382 [label="valtype"];
S357 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S357</td></tr>357<tr><td>global : ParenL Global id exportabbr ParenL Import String String . ParenR globaltype ParenR (EOF,ParenL,ParenR,) [85]</td></tr></table>>];
S357 -> S368 [label="ParenR"];
S358 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S358</td></tr>358<tr><td>results : results . ParenL Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : results . ParenL Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr><tr><td><font color="red">typeuse : ParenL Type typeidx ParenR results . (ParenL,ParenR,) [48]</font></td></tr></table>>];
S358 -> S34 [label="ParenL"];
S359 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S359</td></tr>359<tr><td><font color="red">func : ParenL Func ParenL Import String String ParenR typeuse ParenR . (EOF,ParenL,ParenR,) [81]</font></td></tr></table>>];
S360 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S360</td></tr>360<tr><td><font color="red">func : ParenL Func exportabbr ParenL Import String String ParenR ParenR . (EOF,ParenL,ParenR,) [81]</font></td></tr></table>>];
S361 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S361</td></tr>361<tr><td>func : ParenL Func exportabbr ParenL Import String String ParenR typeuse . ParenR (EOF,ParenL,ParenR,) [81]</td></tr></table>>];
S361 -> S370 [label="ParenR"];
S362 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S362</td></tr>362<tr><td><font color="red">func : ParenL Func id ParenL Import String String ParenR ParenR . (EOF,ParenL,ParenR,) [81]</font></td></tr></table>>];
S363 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S363</td></tr>363<tr><td>func : ParenL Func id ParenL Import String String ParenR typeuse . ParenR (EOF,ParenL,ParenR,) [81]</td></tr></table>>];
S363 -> S371 [label="ParenR"];
S364 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S364</td></tr>364<tr><td>func : ParenL Func id exportabbr ParenL Import String String ParenR . ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>func : ParenL Func id exportabbr ParenL Import String String ParenR . typeuse ParenR (EOF,ParenL,ParenR,) [81]</td></tr><tr><td>typeuse : . params (ParenR,) [49]</td></tr><tr><td>typeuse : . results (ParenR,) [49]</td></tr><tr><td>typeuse : . params results (ParenR,) [49]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR (ParenR,) [48]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR params (ParenR,) [48]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR results (ParenR,) [48]</td></tr><tr><td>typeuse : . ParenL Type typeidx ParenR params results (ParenR,) [48]</td></tr><tr><td>params : . ParenL Param ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . ParenL Param valtypes ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . params ParenL Param ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . ParenL Param Id valtype ParenR (ParenL,ParenR,) [21]</td></tr><tr><td>params : . params ParenL Param valtypes ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : . params ParenL Param Id valtype ParenR (ParenL,ParenR,) [21]</td></tr><tr><td>results : . ParenL Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . ParenL Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . results ParenL Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . results ParenL Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr></table>>];
S364 -> S32 [label="ParenL"];
S364 -> S372 [label="ParenR"];
S364 -> S373 [label="params"];
S364 -> S374 [label="results"];
S364 -> S375 [label="typeuse"];
S365 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S365</td></tr>365<tr><td><font color="red">global : ParenL Global ParenL Import String String ParenR globaltype ParenR . (EOF,ParenL,ParenR,) [85]</font></td></tr></table>>];
S366 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S366</td></tr>366<tr><td>global : ParenL Global exportabbr ParenL Import String String ParenR globaltype . ParenR (EOF,ParenL,ParenR,) [85]</td></tr></table>>];
S366 -> S376 [label="ParenR"];
S367 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S367</td></tr>367<tr><td>global : ParenL Global id ParenL Import String String ParenR globaltype . ParenR (EOF,ParenL,ParenR,) [85]</td></tr></table>>];
S367 -> S377 [label="ParenR"];
S368 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S368</td></tr>368<tr><td>global : ParenL Global id exportabbr ParenL Import String String ParenR . globaltype ParenR (EOF,ParenL,ParenR,) [85]</td></tr><tr><td>globaltype : . valtype (ParenR,) [54]</td></tr><tr><td>globaltype : . ParenL Mut valtype ParenR (ParenR,) [55]</td></tr><tr><td>valtype : . Funcref (ParenR,) [15]</td></tr><tr><td>valtype : . Externref (ParenR,) [16]</td></tr><tr><td>valtype : . NumType (ParenR,) [14]</td></tr></table>>];
S368 -> S96 [label="ParenL"];
S368 -> S378 [label="Funcref"];
S368 -> S379 [label="Externref"];
S368 -> S380 [label="NumType"];
S368 -> S381 [label="globaltype"];
S368 -> S382 [label="valtype"];
S369 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S369</td></tr>369<tr><td>results : results . ParenL Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : results . ParenL Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr><tr><td><font color="red">typeuse : ParenL Type typeidx ParenR params results . (ParenL,ParenR,) [48]</font></td></tr></table>>];
S369 -> S34 [label="ParenL"];
S370 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S370</td></tr>370<tr><td><font color="red">func : ParenL Func exportabbr ParenL Import String String ParenR typeuse ParenR . (EOF,ParenL,ParenR,) [81]</font></td></tr></table>>];
S371 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S371</td></tr>371<tr><td><font color="red">func : ParenL Func id ParenL Import String String ParenR typeuse ParenR . (EOF,ParenL,ParenR,) [81]</font></td></tr></table>>];
S372 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S372</td></tr>372<tr><td><font color="red">func : ParenL Func id exportabbr ParenL Import String String ParenR ParenR . (EOF,ParenL,ParenR,) [81]</font></td></tr></table>>];
S373 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S373</td></tr>373<tr><td>params : params . ParenL Param ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : params . ParenL Param valtypes ParenR (ParenL,ParenR,) [22]</td></tr><tr><td>params : params . ParenL Param Id valtype ParenR (ParenL,ParenR,) [21]</td></tr><tr><td><font color="red">typeuse : params . (ParenL,ParenR,) [49]</font></td></tr><tr><td>typeuse : params . results (ParenL,ParenR,) [49]</td></tr><tr><td>results : . ParenL Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . ParenL Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . results ParenL Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : . results ParenL Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr></table>>];
S373 -> S33 [label="ParenL"];
S373 -> S243 [label="results"];
S374 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S374</td></tr>374<tr><td>results : results . ParenL Result ParenR (ParenL,ParenR,) [24]</td></tr><tr><td>results : results . ParenL Result valtypes ParenR (ParenL,ParenR,) [24]</td></tr><tr><td><font color="red">typeuse : results . (ParenL,ParenR,) [49]</font></td></tr></table>>];
S374 -> S34 [label="ParenL"];
S375 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S375</td></tr>375<tr><td>func : ParenL Func id exportabbr ParenL Import String String ParenR typeuse . ParenR (EOF,ParenL,ParenR,) [81]</td></tr></table>>];
S375 -> S383 [label="ParenR"];
S376 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S376</td></tr>376<tr><td><font color="red">global : ParenL Global exportabbr ParenL Import String String ParenR globaltype ParenR . (EOF,ParenL,ParenR,) [85]</font></td></tr></table>>];
S377 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S377</td></tr>377<tr><td><font color="red">global : ParenL Global id ParenL Import String String ParenR globaltype ParenR . (EOF,ParenL,ParenR,) [85]</font></td></tr></table>>];
S378 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S378</td></tr>378<tr><td><font color="red">valtype : Funcref . (ParenR,Funcref,Externref,Ref_null,Ref_func,VariableInstr,I32_const,I64_const,F32_const,F64_const,NumType,) [15]</font></td></tr></table>>];
S379 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S379</td></tr>379<tr><td><font color="red">valtype : Externref . (ParenR,Funcref,Externref,Ref_null,Ref_func,VariableInstr,I32_const,I64_const,F32_const,F64_const,NumType,) [16]</font></td></tr></table>>];
S380 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S380</td></tr>380<tr><td><font color="red">valtype : NumType . (ParenR,Funcref,Externref,Ref_null,Ref_func,VariableInstr,I32_const,I64_const,F32_const,F64_const,NumType,) [14]</font></td></tr></table>>];
S381 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S381</td></tr>381<tr><td>global : ParenL Global id exportabbr ParenL Import String String ParenR globaltype . ParenR (EOF,ParenL,ParenR,) [85]</td></tr></table>>];
S381 -> S384 [label="ParenR"];
S382 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S382</td></tr>382<tr><td><font color="red">globaltype : valtype . (ParenR,Ref_null,Ref_func,VariableInstr,I32_const,I64_const,F32_const,F64_const,) [54]</font></td></tr></table>>];
S383 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S383</td></tr>383<tr><td><font color="red">func : ParenL Func id exportabbr ParenL Import String String ParenR typeuse ParenR . (EOF,ParenL,ParenR,) [81]</font></td></tr></table>>];
S384 [label=<<table border="0" cellborder="0" cellspacing="0"><tr><td>S384</td></tr>384<tr><td><font color="red">global : ParenL Global id exportabbr ParenL Import String String ParenR globaltype ParenR . (EOF,ParenL,ParenR,) [85]</font></td></tr></table>>];
}
