
// Generated from /Users/luishsu/Desktop/WasmVM/src/lib/parse/Wat.g4 by ANTLR 4.13.2


#include "WatVisitor.h"

#include "WatParser.h"


using namespace antlrcpp;
using namespace WasmVM;

using namespace antlr4;

namespace {

struct WatParserStaticData final {
  WatParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  WatParserStaticData(const WatParserStaticData&) = delete;
  WatParserStaticData(WatParserStaticData&&) = delete;
  WatParserStaticData& operator=(const WatParserStaticData&) = delete;
  WatParserStaticData& operator=(WatParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag watParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<WatParserStaticData> watParserStaticData = nullptr;

void watParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (watParserStaticData != nullptr) {
    return;
  }
#else
  assert(watParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<WatParserStaticData>(
    std::vector<std::string>{
      "module", "modulefield", "typesection", "importdesc", "importabbr", 
      "importsection", "funcsection", "local", "tablesection", "memorysection", 
      "globalsection", "exportsection", "exportdesc", "exportabbr", "startsection", 
      "elemsection", "elemlist", "elemexpr", "tableuse", "datasection", 
      "memuse", "i32", "i64", "u32", "u64", "f32", "f64", "valtype", "param", 
      "result", "functype", "limits", "memtype", "tabletype", "globaltype", 
      "typeidx", "funcidx", "tableidx", "memidx", "globalidx", "elemidx", 
      "dataidx", "localidx", "labelidx", "typeuse", "instr", "label", "elseinstr", 
      "blockinstr", "foldedinstr", "constexpr", "plaininstr", "controlinstr", 
      "referenceinstr", "parametricinstr", "variableinstr", "tableinstr", 
      "memarg", "memoryinstr", "numericinstr"
    },
    std::vector<std::string>{
      "", "'('", "'module'", "')'", "'type'", "'func'", "'table'", "'memory'", 
      "'global'", "'import'", "'local'", "'elem'", "'data'", "'export'", 
      "'start'", "'offset'", "'declare'", "'item'", "'param'", "'result'", 
      "'mut'", "'block'", "'end'", "'loop'", "'if'", "'else'", "'then'", 
      "'i32.const'", "'i64.const'", "'f32.const'", "'f64.const'", "'ref.func'", 
      "'global.get'", "'unreachable'", "'nop'", "'br'", "'br_if'", "'br_table'", 
      "'return'", "'call'", "'call_indirect'", "'ref.is_null'", "'drop'", 
      "'select'", "'local.get'", "'local.set'", "'local.tee'", "'global.set'", 
      "'table.get'", "'table.set'", "'table.size'", "'table.grow'", "'table.fill'", 
      "'table.copy'", "'table.init'", "'elem.drop'", "'memory.size'", "'memory.grow'", 
      "'memory.fill'", "'memory.copy'", "'memory.init'", "'data.drop'", 
      "'i32.load'", "'i32.load8_s'", "'i32.load8_u'", "'i32.load16_s'", 
      "'i32.load16_u'", "'i64.load'", "'i64.load8_s'", "'i64.load8_u'", 
      "'i64.load16_s'", "'i64.load16_u'", "'i64.load32_s'", "'i64.load32_u'", 
      "'f32.load'", "'f64.load'", "'i32.store'", "'i32.store8'", "'i32.store16'", 
      "'i64.store'", "'i64.store8'", "'i64.store16'", "'i64.store32'", "'f32.store'", 
      "'f64.store'", "'i32.eqz'", "'i32.eq'", "'i32.ne'", "'i32.lt_s'", 
      "'i32.lt_u'", "'i32.gt_s'", "'i32.gt_u'", "'i32.le_s'", "'i32.le_u'", 
      "'i32.ge_s'", "'i32.ge_u'", "'i64.eqz'", "'i64.eq'", "'i64.ne'", "'i64.lt_s'", 
      "'i64.lt_u'", "'i64.gt_s'", "'i64.gt_u'", "'i64.le_s'", "'i64.le_u'", 
      "'i64.ge_s'", "'i64.ge_u'", "'f32.eq'", "'f32.ne'", "'f32.lt'", "'f32.gt'", 
      "'f32.le'", "'f32.ge'", "'f64.eq'", "'f64.ne'", "'f64.lt'", "'f64.gt'", 
      "'f64.le'", "'f64.ge'", "'i32.clz'", "'i32.ctz'", "'i32.popcnt'", 
      "'i32.add'", "'i32.sub'", "'i32.mul'", "'i32.div_s'", "'i32.div_u'", 
      "'i32.rem_s'", "'i32.rem_u'", "'i32.and'", "'i32.or'", "'i32.xor'", 
      "'i32.shl'", "'i32.shr_s'", "'i32.shr_u'", "'i32.rotl'", "'i32.rotr'", 
      "'i64.clz'", "'i64.ctz'", "'i64.popcnt'", "'i64.add'", "'i64.sub'", 
      "'i64.mul'", "'i64.div_s'", "'i64.div_u'", "'i64.rem_s'", "'i64.rem_u'", 
      "'i64.and'", "'i64.or'", "'i64.xor'", "'i64.shl'", "'i64.shr_s'", 
      "'i64.shr_u'", "'i64.rotl'", "'i64.rotr'", "'f32.abs'", "'f32.neg'", 
      "'f32.ceil'", "'f32.floor'", "'f32.trunc'", "'f32.nearest'", "'f32.sqrt'", 
      "'f32.add'", "'f32.sub'", "'f32.mul'", "'f32.div'", "'f32.min'", "'f32.max'", 
      "'f32.copysign'", "'f64.abs'", "'f64.neg'", "'f64.ceil'", "'f64.floor'", 
      "'f64.trunc'", "'f64.nearest'", "'f64.sqrt'", "'f64.add'", "'f64.sub'", 
      "'f64.mul'", "'f64.div'", "'f64.min'", "'f64.max'", "'f64.copysign'", 
      "'i32.wrap_i64'", "'i32.trunc_f32_s'", "'i32.trunc_f32_u'", "'i32.trunc_f64_s'", 
      "'i32.trunc_f64_u'", "'i64.extend_i32'", "'i64.trunc_f32_s'", "'i64.trunc_f32_u'", 
      "'i64.trunc_f64_s'", "'i64.trunc_f64_u'", "'f32.convert_i32_s'", "'f32.convert_i32_u'", 
      "'f32.convert_i64_s'", "'f32.convert_i64_u'", "'f32.demote_f64'", 
      "'f64.convert_i32_s'", "'f64.convert_i32_u'", "'f64.convert_i64_s'", 
      "'f64.convert_i64_u'", "'f64.promote_f32'", "'i32.reinterpret_f32'", 
      "'i64.reinterpret_f64'", "'f32.reinterpret_i32'", "'f64.reinterpret_i64'", 
      "'i32.extend8_s'", "'i32.extend16_s'", "'i64.extend8_s'", "'i64.extend16_s'", 
      "'i64.extend32_s'", "'i32.trunc_sat_f32_s'", "'i32.trunc_sat_f32_u'", 
      "'i32.trunc_sat_f64_s'", "'i32.trunc_sat_f64_u'", "'i64.trunc_sat_f32_s'", 
      "'i64.trunc_sat_f32_u'", "'i64.trunc_sat_f64_s'", "'i64.trunc_sat_f64_u'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "BlockComment", 
      "LineComment", "WhiteSpace", "Integer", "Float", "String", "Id", "NumType", 
      "RefType", "RefNull", "Offset", "Align"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,231,1137,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,1,0,1,0,1,0,3,0,124,8,0,1,0,5,0,127,
  	8,0,10,0,12,0,130,9,0,3,0,132,8,0,1,0,1,0,5,0,136,8,0,10,0,12,0,139,9,
  	0,3,0,141,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,153,8,1,1,2,
  	1,2,1,2,3,2,158,8,2,1,2,1,2,1,2,1,3,1,3,1,3,3,3,166,8,3,1,3,1,3,1,3,1,
  	3,1,3,1,3,3,3,174,8,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,182,8,3,1,3,1,3,1,3,
  	1,3,1,3,1,3,3,3,190,8,3,1,3,1,3,1,3,3,3,195,8,3,1,4,1,4,1,4,1,4,1,4,1,
  	4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,3,6,213,8,6,1,6,5,6,216,8,6,
  	10,6,12,6,219,9,6,1,6,1,6,1,6,1,6,1,6,5,6,226,8,6,10,6,12,6,229,9,6,1,
  	6,5,6,232,8,6,10,6,12,6,235,9,6,3,6,237,8,6,1,6,1,6,1,7,1,7,1,7,3,7,244,
  	8,7,1,7,1,7,4,7,248,8,7,11,7,12,7,249,3,7,252,8,7,1,7,1,7,1,8,1,8,1,8,
  	3,8,259,8,8,1,8,5,8,262,8,8,10,8,12,8,265,9,8,1,8,3,8,268,8,8,1,8,1,8,
  	1,8,1,8,1,8,5,8,275,8,8,10,8,12,8,278,9,8,1,8,5,8,281,8,8,10,8,12,8,284,
  	9,8,3,8,286,8,8,1,8,3,8,289,8,8,1,8,1,8,1,9,1,9,1,9,3,9,296,8,9,1,9,5,
  	9,299,8,9,10,9,12,9,302,9,9,1,9,3,9,305,8,9,1,9,1,9,1,9,1,9,5,9,311,8,
  	9,10,9,12,9,314,9,9,1,9,3,9,317,8,9,1,9,1,9,1,10,1,10,1,10,3,10,324,8,
  	10,1,10,5,10,327,8,10,10,10,12,10,330,9,10,1,10,1,10,1,10,1,10,1,10,1,
  	10,3,10,338,8,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,
  	12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
  	12,1,12,1,12,1,12,3,12,368,8,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,
  	14,1,14,1,14,1,15,1,15,1,15,3,15,383,8,15,1,15,3,15,386,8,15,1,15,1,15,
  	3,15,390,8,15,1,15,1,15,1,15,1,15,3,15,396,8,15,1,15,1,15,1,15,3,15,401,
  	8,15,1,15,1,15,1,15,5,15,406,8,15,10,15,12,15,409,9,15,3,15,411,8,15,
  	1,15,1,15,1,16,1,16,5,16,417,8,16,10,16,12,16,420,9,16,1,16,1,16,5,16,
  	424,8,16,10,16,12,16,427,9,16,3,16,429,8,16,1,17,1,17,1,17,1,17,1,17,
  	1,17,1,17,1,17,1,17,3,17,440,8,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,
  	1,19,3,19,450,8,19,1,19,3,19,453,8,19,1,19,1,19,3,19,457,8,19,1,19,1,
  	19,1,19,3,19,462,8,19,1,19,5,19,465,8,19,10,19,12,19,468,9,19,1,19,1,
  	19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,
  	25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,28,1,28,5,28,496,8,28,10,
  	28,12,28,499,9,28,3,28,501,8,28,1,28,1,28,1,29,1,29,1,29,5,29,508,8,29,
  	10,29,12,29,511,9,29,1,29,1,29,1,30,1,30,1,30,5,30,518,8,30,10,30,12,
  	30,521,9,30,1,30,5,30,524,8,30,10,30,12,30,527,9,30,1,30,1,30,1,31,1,
  	31,3,31,533,8,31,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,
  	34,3,34,546,8,34,1,35,1,35,3,35,550,8,35,1,36,1,36,3,36,554,8,36,1,37,
  	1,37,3,37,558,8,37,1,38,1,38,3,38,562,8,38,1,39,1,39,3,39,566,8,39,1,
  	40,1,40,3,40,570,8,40,1,41,1,41,3,41,574,8,41,1,42,1,42,3,42,578,8,42,
  	1,43,1,43,3,43,582,8,43,1,44,1,44,1,44,1,44,1,44,3,44,589,8,44,1,44,5,
  	44,592,8,44,10,44,12,44,595,9,44,1,44,5,44,598,8,44,10,44,12,44,601,9,
  	44,1,45,1,45,1,45,3,45,606,8,45,1,46,3,46,609,8,46,1,47,1,47,1,48,1,48,
  	1,48,1,48,5,48,617,8,48,10,48,12,48,620,9,48,1,48,1,48,3,48,624,8,48,
  	1,48,1,48,1,48,1,48,5,48,630,8,48,10,48,12,48,633,9,48,1,48,1,48,3,48,
  	637,8,48,1,48,1,48,1,48,1,48,5,48,643,8,48,10,48,12,48,646,9,48,1,48,
  	1,48,3,48,650,8,48,1,48,5,48,653,8,48,10,48,12,48,656,9,48,3,48,658,8,
  	48,1,48,1,48,3,48,662,8,48,3,48,664,8,48,1,49,1,49,1,49,5,49,669,8,49,
  	10,49,12,49,672,9,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,5,49,681,8,49,
  	10,49,12,49,684,9,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,5,49,693,8,49,
  	10,49,12,49,696,9,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,5,49,705,8,49,
  	10,49,12,49,708,9,49,1,49,1,49,1,49,5,49,713,8,49,10,49,12,49,716,9,49,
  	1,49,1,49,1,49,1,49,5,49,722,8,49,10,49,12,49,725,9,49,1,49,3,49,728,
  	8,49,1,49,1,49,3,49,732,8,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
  	1,50,1,50,1,50,1,50,1,50,3,50,747,8,50,1,51,1,51,1,51,1,51,1,51,1,51,
  	1,51,3,51,756,8,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,4,52,766,8,
  	52,11,52,12,52,767,1,52,1,52,1,52,1,52,1,52,3,52,775,8,52,1,52,3,52,778,
  	8,52,1,53,1,53,1,53,1,53,3,53,784,8,53,1,54,1,54,1,54,5,54,789,8,54,10,
  	54,12,54,792,9,54,3,54,794,8,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,
  	55,1,55,1,55,3,55,806,8,55,1,56,1,56,3,56,810,8,56,1,56,1,56,3,56,814,
  	8,56,1,56,1,56,3,56,818,8,56,1,56,1,56,3,56,822,8,56,1,56,1,56,3,56,826,
  	8,56,1,56,1,56,1,56,1,56,3,56,832,8,56,1,56,1,56,3,56,836,8,56,1,56,1,
  	56,1,56,3,56,841,8,56,1,57,3,57,844,8,57,1,57,3,57,847,8,57,1,58,1,58,
  	3,58,851,8,58,1,58,1,58,3,58,855,8,58,1,58,1,58,3,58,859,8,58,1,58,1,
  	58,1,58,1,58,3,58,865,8,58,1,58,1,58,3,58,869,8,58,1,58,1,58,1,58,1,58,
  	1,58,3,58,876,8,58,1,58,1,58,1,58,3,58,881,8,58,1,58,1,58,1,58,3,58,886,
  	8,58,1,58,1,58,1,58,3,58,891,8,58,1,58,1,58,1,58,3,58,896,8,58,1,58,1,
  	58,1,58,3,58,901,8,58,1,58,1,58,1,58,3,58,906,8,58,1,58,1,58,1,58,3,58,
  	911,8,58,1,58,1,58,1,58,3,58,916,8,58,1,58,1,58,1,58,3,58,921,8,58,1,
  	58,1,58,1,58,3,58,926,8,58,1,58,1,58,1,58,3,58,931,8,58,1,58,1,58,1,58,
  	3,58,936,8,58,1,58,1,58,1,58,3,58,941,8,58,1,58,1,58,1,58,3,58,946,8,
  	58,1,58,1,58,1,58,3,58,951,8,58,1,58,1,58,1,58,3,58,956,8,58,1,58,1,58,
  	1,58,3,58,961,8,58,1,58,1,58,1,58,3,58,966,8,58,1,58,1,58,1,58,3,58,971,
  	8,58,1,58,1,58,1,58,3,58,976,8,58,1,58,1,58,1,58,3,58,981,8,58,1,58,1,
  	58,1,58,3,58,986,8,58,1,58,3,58,989,8,58,1,59,1,59,1,59,1,59,1,59,1,59,
  	1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
  	1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
  	1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
  	1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
  	1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
  	1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
  	1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
  	1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
  	1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
  	1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,1135,
  	8,59,1,59,0,0,60,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
  	38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,
  	84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,0,1,1,
  	0,227,228,1424,0,140,1,0,0,0,2,152,1,0,0,0,4,154,1,0,0,0,6,194,1,0,0,
  	0,8,196,1,0,0,0,10,202,1,0,0,0,12,209,1,0,0,0,14,240,1,0,0,0,16,255,1,
  	0,0,0,18,292,1,0,0,0,20,320,1,0,0,0,22,341,1,0,0,0,24,367,1,0,0,0,26,
  	369,1,0,0,0,28,374,1,0,0,0,30,379,1,0,0,0,32,428,1,0,0,0,34,439,1,0,0,
  	0,36,441,1,0,0,0,38,446,1,0,0,0,40,471,1,0,0,0,42,476,1,0,0,0,44,478,
  	1,0,0,0,46,480,1,0,0,0,48,482,1,0,0,0,50,484,1,0,0,0,52,486,1,0,0,0,54,
  	488,1,0,0,0,56,490,1,0,0,0,58,504,1,0,0,0,60,514,1,0,0,0,62,530,1,0,0,
  	0,64,534,1,0,0,0,66,536,1,0,0,0,68,545,1,0,0,0,70,549,1,0,0,0,72,553,
  	1,0,0,0,74,557,1,0,0,0,76,561,1,0,0,0,78,565,1,0,0,0,80,569,1,0,0,0,82,
  	573,1,0,0,0,84,577,1,0,0,0,86,581,1,0,0,0,88,588,1,0,0,0,90,605,1,0,0,
  	0,92,608,1,0,0,0,94,610,1,0,0,0,96,663,1,0,0,0,98,731,1,0,0,0,100,746,
  	1,0,0,0,102,755,1,0,0,0,104,777,1,0,0,0,106,783,1,0,0,0,108,793,1,0,0,
  	0,110,805,1,0,0,0,112,840,1,0,0,0,114,843,1,0,0,0,116,988,1,0,0,0,118,
  	1134,1,0,0,0,120,131,5,1,0,0,121,123,5,2,0,0,122,124,5,226,0,0,123,122,
  	1,0,0,0,123,124,1,0,0,0,124,128,1,0,0,0,125,127,3,2,1,0,126,125,1,0,0,
  	0,127,130,1,0,0,0,128,126,1,0,0,0,128,129,1,0,0,0,129,132,1,0,0,0,130,
  	128,1,0,0,0,131,121,1,0,0,0,131,132,1,0,0,0,132,133,1,0,0,0,133,141,5,
  	3,0,0,134,136,3,2,1,0,135,134,1,0,0,0,136,139,1,0,0,0,137,135,1,0,0,0,
  	137,138,1,0,0,0,138,141,1,0,0,0,139,137,1,0,0,0,140,120,1,0,0,0,140,137,
  	1,0,0,0,141,1,1,0,0,0,142,153,3,4,2,0,143,153,3,10,5,0,144,153,3,12,6,
  	0,145,153,3,16,8,0,146,153,3,18,9,0,147,153,3,20,10,0,148,153,3,22,11,
  	0,149,153,3,28,14,0,150,153,3,30,15,0,151,153,3,38,19,0,152,142,1,0,0,
  	0,152,143,1,0,0,0,152,144,1,0,0,0,152,145,1,0,0,0,152,146,1,0,0,0,152,
  	147,1,0,0,0,152,148,1,0,0,0,152,149,1,0,0,0,152,150,1,0,0,0,152,151,1,
  	0,0,0,153,3,1,0,0,0,154,155,5,1,0,0,155,157,5,4,0,0,156,158,5,226,0,0,
  	157,156,1,0,0,0,157,158,1,0,0,0,158,159,1,0,0,0,159,160,3,60,30,0,160,
  	161,5,3,0,0,161,5,1,0,0,0,162,163,5,1,0,0,163,165,5,5,0,0,164,166,5,226,
  	0,0,165,164,1,0,0,0,165,166,1,0,0,0,166,167,1,0,0,0,167,168,3,88,44,0,
  	168,169,5,3,0,0,169,195,1,0,0,0,170,171,5,1,0,0,171,173,5,6,0,0,172,174,
  	5,226,0,0,173,172,1,0,0,0,173,174,1,0,0,0,174,175,1,0,0,0,175,176,3,66,
  	33,0,176,177,5,3,0,0,177,195,1,0,0,0,178,179,5,1,0,0,179,181,5,7,0,0,
  	180,182,5,226,0,0,181,180,1,0,0,0,181,182,1,0,0,0,182,183,1,0,0,0,183,
  	184,3,64,32,0,184,185,5,3,0,0,185,195,1,0,0,0,186,187,5,1,0,0,187,189,
  	5,8,0,0,188,190,5,226,0,0,189,188,1,0,0,0,189,190,1,0,0,0,190,191,1,0,
  	0,0,191,192,3,68,34,0,192,193,5,3,0,0,193,195,1,0,0,0,194,162,1,0,0,0,
  	194,170,1,0,0,0,194,178,1,0,0,0,194,186,1,0,0,0,195,7,1,0,0,0,196,197,
  	5,1,0,0,197,198,5,9,0,0,198,199,5,225,0,0,199,200,5,225,0,0,200,201,5,
  	3,0,0,201,9,1,0,0,0,202,203,5,1,0,0,203,204,5,9,0,0,204,205,5,225,0,0,
  	205,206,5,225,0,0,206,207,3,6,3,0,207,208,5,3,0,0,208,11,1,0,0,0,209,
  	210,5,1,0,0,210,212,5,5,0,0,211,213,5,226,0,0,212,211,1,0,0,0,212,213,
  	1,0,0,0,213,217,1,0,0,0,214,216,3,26,13,0,215,214,1,0,0,0,216,219,1,0,
  	0,0,217,215,1,0,0,0,217,218,1,0,0,0,218,236,1,0,0,0,219,217,1,0,0,0,220,
  	221,3,8,4,0,221,222,3,88,44,0,222,237,1,0,0,0,223,227,3,88,44,0,224,226,
  	3,14,7,0,225,224,1,0,0,0,226,229,1,0,0,0,227,225,1,0,0,0,227,228,1,0,
  	0,0,228,233,1,0,0,0,229,227,1,0,0,0,230,232,3,90,45,0,231,230,1,0,0,0,
  	232,235,1,0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,237,1,0,0,0,235,233,
  	1,0,0,0,236,220,1,0,0,0,236,223,1,0,0,0,237,238,1,0,0,0,238,239,5,3,0,
  	0,239,13,1,0,0,0,240,241,5,1,0,0,241,251,5,10,0,0,242,244,5,226,0,0,243,
  	242,1,0,0,0,243,244,1,0,0,0,244,245,1,0,0,0,245,252,3,54,27,0,246,248,
  	3,54,27,0,247,246,1,0,0,0,248,249,1,0,0,0,249,247,1,0,0,0,249,250,1,0,
  	0,0,250,252,1,0,0,0,251,243,1,0,0,0,251,247,1,0,0,0,252,253,1,0,0,0,253,
  	254,5,3,0,0,254,15,1,0,0,0,255,256,5,1,0,0,256,258,5,6,0,0,257,259,5,
  	226,0,0,258,257,1,0,0,0,258,259,1,0,0,0,259,263,1,0,0,0,260,262,3,26,
  	13,0,261,260,1,0,0,0,262,265,1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,
  	264,288,1,0,0,0,265,263,1,0,0,0,266,268,3,8,4,0,267,266,1,0,0,0,267,268,
  	1,0,0,0,268,269,1,0,0,0,269,289,3,66,33,0,270,271,5,228,0,0,271,272,5,
  	1,0,0,272,285,5,11,0,0,273,275,3,34,17,0,274,273,1,0,0,0,275,278,1,0,
  	0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,286,1,0,0,0,278,276,1,0,0,0,279,
  	281,3,72,36,0,280,279,1,0,0,0,281,284,1,0,0,0,282,280,1,0,0,0,282,283,
  	1,0,0,0,283,286,1,0,0,0,284,282,1,0,0,0,285,276,1,0,0,0,285,282,1,0,0,
  	0,286,287,1,0,0,0,287,289,5,3,0,0,288,267,1,0,0,0,288,270,1,0,0,0,289,
  	290,1,0,0,0,290,291,5,3,0,0,291,17,1,0,0,0,292,293,5,1,0,0,293,295,5,
  	7,0,0,294,296,5,226,0,0,295,294,1,0,0,0,295,296,1,0,0,0,296,300,1,0,0,
  	0,297,299,3,26,13,0,298,297,1,0,0,0,299,302,1,0,0,0,300,298,1,0,0,0,300,
  	301,1,0,0,0,301,316,1,0,0,0,302,300,1,0,0,0,303,305,3,8,4,0,304,303,1,
  	0,0,0,304,305,1,0,0,0,305,306,1,0,0,0,306,317,3,64,32,0,307,308,5,1,0,
  	0,308,312,5,12,0,0,309,311,5,225,0,0,310,309,1,0,0,0,311,314,1,0,0,0,
  	312,310,1,0,0,0,312,313,1,0,0,0,313,315,1,0,0,0,314,312,1,0,0,0,315,317,
  	5,3,0,0,316,304,1,0,0,0,316,307,1,0,0,0,317,318,1,0,0,0,318,319,5,3,0,
  	0,319,19,1,0,0,0,320,321,5,1,0,0,321,323,5,8,0,0,322,324,5,226,0,0,323,
  	322,1,0,0,0,323,324,1,0,0,0,324,328,1,0,0,0,325,327,3,26,13,0,326,325,
  	1,0,0,0,327,330,1,0,0,0,328,326,1,0,0,0,328,329,1,0,0,0,329,337,1,0,0,
  	0,330,328,1,0,0,0,331,332,3,8,4,0,332,333,3,68,34,0,333,338,1,0,0,0,334,
  	335,3,68,34,0,335,336,3,100,50,0,336,338,1,0,0,0,337,331,1,0,0,0,337,
  	334,1,0,0,0,338,339,1,0,0,0,339,340,5,3,0,0,340,21,1,0,0,0,341,342,5,
  	1,0,0,342,343,5,13,0,0,343,344,5,225,0,0,344,345,3,24,12,0,345,346,5,
  	3,0,0,346,23,1,0,0,0,347,348,5,1,0,0,348,349,5,5,0,0,349,350,3,72,36,
  	0,350,351,5,3,0,0,351,368,1,0,0,0,352,353,5,1,0,0,353,354,5,6,0,0,354,
  	355,3,74,37,0,355,356,5,3,0,0,356,368,1,0,0,0,357,358,5,1,0,0,358,359,
  	5,7,0,0,359,360,3,76,38,0,360,361,5,3,0,0,361,368,1,0,0,0,362,363,5,1,
  	0,0,363,364,5,8,0,0,364,365,3,78,39,0,365,366,5,3,0,0,366,368,1,0,0,0,
  	367,347,1,0,0,0,367,352,1,0,0,0,367,357,1,0,0,0,367,362,1,0,0,0,368,25,
  	1,0,0,0,369,370,5,1,0,0,370,371,5,13,0,0,371,372,5,225,0,0,372,373,5,
  	3,0,0,373,27,1,0,0,0,374,375,5,1,0,0,375,376,5,14,0,0,376,377,3,72,36,
  	0,377,378,5,3,0,0,378,29,1,0,0,0,379,380,5,1,0,0,380,382,5,11,0,0,381,
  	383,5,226,0,0,382,381,1,0,0,0,382,383,1,0,0,0,383,410,1,0,0,0,384,386,
  	3,36,18,0,385,384,1,0,0,0,385,386,1,0,0,0,386,387,1,0,0,0,387,389,5,1,
  	0,0,388,390,5,15,0,0,389,388,1,0,0,0,389,390,1,0,0,0,390,391,1,0,0,0,
  	391,392,3,100,50,0,392,393,5,3,0,0,393,396,1,0,0,0,394,396,5,16,0,0,395,
  	385,1,0,0,0,395,394,1,0,0,0,395,396,1,0,0,0,396,397,1,0,0,0,397,411,3,
  	32,16,0,398,400,5,1,0,0,399,401,5,15,0,0,400,399,1,0,0,0,400,401,1,0,
  	0,0,401,402,1,0,0,0,402,403,3,100,50,0,403,407,5,3,0,0,404,406,3,72,36,
  	0,405,404,1,0,0,0,406,409,1,0,0,0,407,405,1,0,0,0,407,408,1,0,0,0,408,
  	411,1,0,0,0,409,407,1,0,0,0,410,395,1,0,0,0,410,398,1,0,0,0,411,412,1,
  	0,0,0,412,413,5,3,0,0,413,31,1,0,0,0,414,418,5,228,0,0,415,417,3,34,17,
  	0,416,415,1,0,0,0,417,420,1,0,0,0,418,416,1,0,0,0,418,419,1,0,0,0,419,
  	429,1,0,0,0,420,418,1,0,0,0,421,425,5,5,0,0,422,424,3,72,36,0,423,422,
  	1,0,0,0,424,427,1,0,0,0,425,423,1,0,0,0,425,426,1,0,0,0,426,429,1,0,0,
  	0,427,425,1,0,0,0,428,414,1,0,0,0,428,421,1,0,0,0,429,33,1,0,0,0,430,
  	431,5,1,0,0,431,432,5,17,0,0,432,433,3,100,50,0,433,434,5,3,0,0,434,440,
  	1,0,0,0,435,436,5,1,0,0,436,437,3,100,50,0,437,438,5,3,0,0,438,440,1,
  	0,0,0,439,430,1,0,0,0,439,435,1,0,0,0,440,35,1,0,0,0,441,442,5,1,0,0,
  	442,443,5,6,0,0,443,444,3,74,37,0,444,445,5,3,0,0,445,37,1,0,0,0,446,
  	447,5,1,0,0,447,449,5,12,0,0,448,450,5,226,0,0,449,448,1,0,0,0,449,450,
  	1,0,0,0,450,461,1,0,0,0,451,453,3,40,20,0,452,451,1,0,0,0,452,453,1,0,
  	0,0,453,454,1,0,0,0,454,456,5,1,0,0,455,457,5,15,0,0,456,455,1,0,0,0,
  	456,457,1,0,0,0,457,458,1,0,0,0,458,459,3,100,50,0,459,460,5,3,0,0,460,
  	462,1,0,0,0,461,452,1,0,0,0,461,462,1,0,0,0,462,466,1,0,0,0,463,465,5,
  	225,0,0,464,463,1,0,0,0,465,468,1,0,0,0,466,464,1,0,0,0,466,467,1,0,0,
  	0,467,469,1,0,0,0,468,466,1,0,0,0,469,470,5,3,0,0,470,39,1,0,0,0,471,
  	472,5,1,0,0,472,473,5,7,0,0,473,474,3,76,38,0,474,475,5,3,0,0,475,41,
  	1,0,0,0,476,477,5,223,0,0,477,43,1,0,0,0,478,479,5,223,0,0,479,45,1,0,
  	0,0,480,481,5,223,0,0,481,47,1,0,0,0,482,483,5,223,0,0,483,49,1,0,0,0,
  	484,485,5,224,0,0,485,51,1,0,0,0,486,487,5,224,0,0,487,53,1,0,0,0,488,
  	489,7,0,0,0,489,55,1,0,0,0,490,491,5,1,0,0,491,500,5,18,0,0,492,493,5,
  	226,0,0,493,501,3,54,27,0,494,496,3,54,27,0,495,494,1,0,0,0,496,499,1,
  	0,0,0,497,495,1,0,0,0,497,498,1,0,0,0,498,501,1,0,0,0,499,497,1,0,0,0,
  	500,492,1,0,0,0,500,497,1,0,0,0,501,502,1,0,0,0,502,503,5,3,0,0,503,57,
  	1,0,0,0,504,505,5,1,0,0,505,509,5,19,0,0,506,508,3,54,27,0,507,506,1,
  	0,0,0,508,511,1,0,0,0,509,507,1,0,0,0,509,510,1,0,0,0,510,512,1,0,0,0,
  	511,509,1,0,0,0,512,513,5,3,0,0,513,59,1,0,0,0,514,515,5,1,0,0,515,519,
  	5,5,0,0,516,518,3,56,28,0,517,516,1,0,0,0,518,521,1,0,0,0,519,517,1,0,
  	0,0,519,520,1,0,0,0,520,525,1,0,0,0,521,519,1,0,0,0,522,524,3,58,29,0,
  	523,522,1,0,0,0,524,527,1,0,0,0,525,523,1,0,0,0,525,526,1,0,0,0,526,528,
  	1,0,0,0,527,525,1,0,0,0,528,529,5,3,0,0,529,61,1,0,0,0,530,532,3,48,24,
  	0,531,533,3,48,24,0,532,531,1,0,0,0,532,533,1,0,0,0,533,63,1,0,0,0,534,
  	535,3,62,31,0,535,65,1,0,0,0,536,537,3,62,31,0,537,538,5,228,0,0,538,
  	67,1,0,0,0,539,546,3,54,27,0,540,541,5,1,0,0,541,542,5,20,0,0,542,543,
  	3,54,27,0,543,544,5,3,0,0,544,546,1,0,0,0,545,539,1,0,0,0,545,540,1,0,
  	0,0,546,69,1,0,0,0,547,550,3,46,23,0,548,550,5,226,0,0,549,547,1,0,0,
  	0,549,548,1,0,0,0,550,71,1,0,0,0,551,554,3,46,23,0,552,554,5,226,0,0,
  	553,551,1,0,0,0,553,552,1,0,0,0,554,73,1,0,0,0,555,558,3,46,23,0,556,
  	558,5,226,0,0,557,555,1,0,0,0,557,556,1,0,0,0,558,75,1,0,0,0,559,562,
  	3,46,23,0,560,562,5,226,0,0,561,559,1,0,0,0,561,560,1,0,0,0,562,77,1,
  	0,0,0,563,566,3,46,23,0,564,566,5,226,0,0,565,563,1,0,0,0,565,564,1,0,
  	0,0,566,79,1,0,0,0,567,570,3,46,23,0,568,570,5,226,0,0,569,567,1,0,0,
  	0,569,568,1,0,0,0,570,81,1,0,0,0,571,574,3,46,23,0,572,574,5,226,0,0,
  	573,571,1,0,0,0,573,572,1,0,0,0,574,83,1,0,0,0,575,578,3,46,23,0,576,
  	578,5,226,0,0,577,575,1,0,0,0,577,576,1,0,0,0,578,85,1,0,0,0,579,582,
  	3,46,23,0,580,582,5,226,0,0,581,579,1,0,0,0,581,580,1,0,0,0,582,87,1,
  	0,0,0,583,584,5,1,0,0,584,585,5,4,0,0,585,586,3,70,35,0,586,587,5,3,0,
  	0,587,589,1,0,0,0,588,583,1,0,0,0,588,589,1,0,0,0,589,593,1,0,0,0,590,
  	592,3,56,28,0,591,590,1,0,0,0,592,595,1,0,0,0,593,591,1,0,0,0,593,594,
  	1,0,0,0,594,599,1,0,0,0,595,593,1,0,0,0,596,598,3,58,29,0,597,596,1,0,
  	0,0,598,601,1,0,0,0,599,597,1,0,0,0,599,600,1,0,0,0,600,89,1,0,0,0,601,
  	599,1,0,0,0,602,606,3,102,51,0,603,606,3,96,48,0,604,606,3,98,49,0,605,
  	602,1,0,0,0,605,603,1,0,0,0,605,604,1,0,0,0,606,91,1,0,0,0,607,609,5,
  	226,0,0,608,607,1,0,0,0,608,609,1,0,0,0,609,93,1,0,0,0,610,611,3,90,45,
  	0,611,95,1,0,0,0,612,613,5,21,0,0,613,614,3,92,46,0,614,618,3,88,44,0,
  	615,617,3,90,45,0,616,615,1,0,0,0,617,620,1,0,0,0,618,616,1,0,0,0,618,
  	619,1,0,0,0,619,621,1,0,0,0,620,618,1,0,0,0,621,623,5,22,0,0,622,624,
  	5,226,0,0,623,622,1,0,0,0,623,624,1,0,0,0,624,664,1,0,0,0,625,626,5,23,
  	0,0,626,627,3,92,46,0,627,631,3,88,44,0,628,630,3,90,45,0,629,628,1,0,
  	0,0,630,633,1,0,0,0,631,629,1,0,0,0,631,632,1,0,0,0,632,634,1,0,0,0,633,
  	631,1,0,0,0,634,636,5,22,0,0,635,637,5,226,0,0,636,635,1,0,0,0,636,637,
  	1,0,0,0,637,664,1,0,0,0,638,639,5,24,0,0,639,640,3,92,46,0,640,644,3,
  	88,44,0,641,643,3,90,45,0,642,641,1,0,0,0,643,646,1,0,0,0,644,642,1,0,
  	0,0,644,645,1,0,0,0,645,657,1,0,0,0,646,644,1,0,0,0,647,649,5,25,0,0,
  	648,650,5,226,0,0,649,648,1,0,0,0,649,650,1,0,0,0,650,654,1,0,0,0,651,
  	653,3,94,47,0,652,651,1,0,0,0,653,656,1,0,0,0,654,652,1,0,0,0,654,655,
  	1,0,0,0,655,658,1,0,0,0,656,654,1,0,0,0,657,647,1,0,0,0,657,658,1,0,0,
  	0,658,659,1,0,0,0,659,661,5,22,0,0,660,662,5,226,0,0,661,660,1,0,0,0,
  	661,662,1,0,0,0,662,664,1,0,0,0,663,612,1,0,0,0,663,625,1,0,0,0,663,638,
  	1,0,0,0,664,97,1,0,0,0,665,666,5,1,0,0,666,670,3,102,51,0,667,669,3,98,
  	49,0,668,667,1,0,0,0,669,672,1,0,0,0,670,668,1,0,0,0,670,671,1,0,0,0,
  	671,673,1,0,0,0,672,670,1,0,0,0,673,674,5,3,0,0,674,732,1,0,0,0,675,676,
  	5,1,0,0,676,677,5,21,0,0,677,678,3,92,46,0,678,682,3,88,44,0,679,681,
  	3,90,45,0,680,679,1,0,0,0,681,684,1,0,0,0,682,680,1,0,0,0,682,683,1,0,
  	0,0,683,685,1,0,0,0,684,682,1,0,0,0,685,686,5,3,0,0,686,732,1,0,0,0,687,
  	688,5,1,0,0,688,689,5,23,0,0,689,690,3,92,46,0,690,694,3,88,44,0,691,
  	693,3,90,45,0,692,691,1,0,0,0,693,696,1,0,0,0,694,692,1,0,0,0,694,695,
  	1,0,0,0,695,697,1,0,0,0,696,694,1,0,0,0,697,698,5,3,0,0,698,732,1,0,0,
  	0,699,700,5,1,0,0,700,701,5,24,0,0,701,702,3,92,46,0,702,706,3,88,44,
  	0,703,705,3,98,49,0,704,703,1,0,0,0,705,708,1,0,0,0,706,704,1,0,0,0,706,
  	707,1,0,0,0,707,709,1,0,0,0,708,706,1,0,0,0,709,710,5,1,0,0,710,714,5,
  	26,0,0,711,713,3,90,45,0,712,711,1,0,0,0,713,716,1,0,0,0,714,712,1,0,
  	0,0,714,715,1,0,0,0,715,717,1,0,0,0,716,714,1,0,0,0,717,727,5,3,0,0,718,
  	719,5,1,0,0,719,723,5,25,0,0,720,722,3,94,47,0,721,720,1,0,0,0,722,725,
  	1,0,0,0,723,721,1,0,0,0,723,724,1,0,0,0,724,726,1,0,0,0,725,723,1,0,0,
  	0,726,728,5,3,0,0,727,718,1,0,0,0,727,728,1,0,0,0,728,729,1,0,0,0,729,
  	730,5,3,0,0,730,732,1,0,0,0,731,665,1,0,0,0,731,675,1,0,0,0,731,687,1,
  	0,0,0,731,699,1,0,0,0,732,99,1,0,0,0,733,734,5,27,0,0,734,747,3,42,21,
  	0,735,736,5,28,0,0,736,747,3,44,22,0,737,738,5,29,0,0,738,747,3,50,25,
  	0,739,740,5,30,0,0,740,747,3,52,26,0,741,747,5,229,0,0,742,743,5,31,0,
  	0,743,747,3,72,36,0,744,745,5,32,0,0,745,747,3,78,39,0,746,733,1,0,0,
  	0,746,735,1,0,0,0,746,737,1,0,0,0,746,739,1,0,0,0,746,741,1,0,0,0,746,
  	742,1,0,0,0,746,744,1,0,0,0,747,101,1,0,0,0,748,756,3,104,52,0,749,756,
  	3,106,53,0,750,756,3,108,54,0,751,756,3,110,55,0,752,756,3,112,56,0,753,
  	756,3,116,58,0,754,756,3,118,59,0,755,748,1,0,0,0,755,749,1,0,0,0,755,
  	750,1,0,0,0,755,751,1,0,0,0,755,752,1,0,0,0,755,753,1,0,0,0,755,754,1,
  	0,0,0,756,103,1,0,0,0,757,778,5,33,0,0,758,778,5,34,0,0,759,760,5,35,
  	0,0,760,778,3,86,43,0,761,762,5,36,0,0,762,778,3,86,43,0,763,765,5,37,
  	0,0,764,766,3,86,43,0,765,764,1,0,0,0,766,767,1,0,0,0,767,765,1,0,0,0,
  	767,768,1,0,0,0,768,778,1,0,0,0,769,778,5,38,0,0,770,771,5,39,0,0,771,
  	778,3,72,36,0,772,774,5,40,0,0,773,775,3,74,37,0,774,773,1,0,0,0,774,
  	775,1,0,0,0,775,776,1,0,0,0,776,778,3,88,44,0,777,757,1,0,0,0,777,758,
  	1,0,0,0,777,759,1,0,0,0,777,761,1,0,0,0,777,763,1,0,0,0,777,769,1,0,0,
  	0,777,770,1,0,0,0,777,772,1,0,0,0,778,105,1,0,0,0,779,784,5,229,0,0,780,
  	784,5,41,0,0,781,782,5,31,0,0,782,784,3,72,36,0,783,779,1,0,0,0,783,780,
  	1,0,0,0,783,781,1,0,0,0,784,107,1,0,0,0,785,794,5,42,0,0,786,790,5,43,
  	0,0,787,789,3,58,29,0,788,787,1,0,0,0,789,792,1,0,0,0,790,788,1,0,0,0,
  	790,791,1,0,0,0,791,794,1,0,0,0,792,790,1,0,0,0,793,785,1,0,0,0,793,786,
  	1,0,0,0,794,109,1,0,0,0,795,796,5,44,0,0,796,806,3,84,42,0,797,798,5,
  	45,0,0,798,806,3,84,42,0,799,800,5,46,0,0,800,806,3,84,42,0,801,802,5,
  	32,0,0,802,806,3,78,39,0,803,804,5,47,0,0,804,806,3,78,39,0,805,795,1,
  	0,0,0,805,797,1,0,0,0,805,799,1,0,0,0,805,801,1,0,0,0,805,803,1,0,0,0,
  	806,111,1,0,0,0,807,809,5,48,0,0,808,810,3,74,37,0,809,808,1,0,0,0,809,
  	810,1,0,0,0,810,841,1,0,0,0,811,813,5,49,0,0,812,814,3,74,37,0,813,812,
  	1,0,0,0,813,814,1,0,0,0,814,841,1,0,0,0,815,817,5,50,0,0,816,818,3,74,
  	37,0,817,816,1,0,0,0,817,818,1,0,0,0,818,841,1,0,0,0,819,821,5,51,0,0,
  	820,822,3,74,37,0,821,820,1,0,0,0,821,822,1,0,0,0,822,841,1,0,0,0,823,
  	825,5,52,0,0,824,826,3,74,37,0,825,824,1,0,0,0,825,826,1,0,0,0,826,841,
  	1,0,0,0,827,831,5,53,0,0,828,829,3,74,37,0,829,830,3,74,37,0,830,832,
  	1,0,0,0,831,828,1,0,0,0,831,832,1,0,0,0,832,841,1,0,0,0,833,835,5,54,
  	0,0,834,836,3,74,37,0,835,834,1,0,0,0,835,836,1,0,0,0,836,837,1,0,0,0,
  	837,841,3,80,40,0,838,839,5,55,0,0,839,841,3,80,40,0,840,807,1,0,0,0,
  	840,811,1,0,0,0,840,815,1,0,0,0,840,819,1,0,0,0,840,823,1,0,0,0,840,827,
  	1,0,0,0,840,833,1,0,0,0,840,838,1,0,0,0,841,113,1,0,0,0,842,844,5,230,
  	0,0,843,842,1,0,0,0,843,844,1,0,0,0,844,846,1,0,0,0,845,847,5,231,0,0,
  	846,845,1,0,0,0,846,847,1,0,0,0,847,115,1,0,0,0,848,850,5,56,0,0,849,
  	851,3,76,38,0,850,849,1,0,0,0,850,851,1,0,0,0,851,989,1,0,0,0,852,854,
  	5,57,0,0,853,855,3,76,38,0,854,853,1,0,0,0,854,855,1,0,0,0,855,989,1,
  	0,0,0,856,858,5,58,0,0,857,859,3,76,38,0,858,857,1,0,0,0,858,859,1,0,
  	0,0,859,989,1,0,0,0,860,864,5,59,0,0,861,862,3,76,38,0,862,863,3,76,38,
  	0,863,865,1,0,0,0,864,861,1,0,0,0,864,865,1,0,0,0,865,989,1,0,0,0,866,
  	868,5,60,0,0,867,869,3,76,38,0,868,867,1,0,0,0,868,869,1,0,0,0,869,870,
  	1,0,0,0,870,989,3,82,41,0,871,872,5,61,0,0,872,989,3,82,41,0,873,875,
  	5,62,0,0,874,876,3,76,38,0,875,874,1,0,0,0,875,876,1,0,0,0,876,877,1,
  	0,0,0,877,989,3,114,57,0,878,880,5,63,0,0,879,881,3,76,38,0,880,879,1,
  	0,0,0,880,881,1,0,0,0,881,882,1,0,0,0,882,989,3,114,57,0,883,885,5,64,
  	0,0,884,886,3,76,38,0,885,884,1,0,0,0,885,886,1,0,0,0,886,887,1,0,0,0,
  	887,989,3,114,57,0,888,890,5,65,0,0,889,891,3,76,38,0,890,889,1,0,0,0,
  	890,891,1,0,0,0,891,892,1,0,0,0,892,989,3,114,57,0,893,895,5,66,0,0,894,
  	896,3,76,38,0,895,894,1,0,0,0,895,896,1,0,0,0,896,897,1,0,0,0,897,989,
  	3,114,57,0,898,900,5,67,0,0,899,901,3,76,38,0,900,899,1,0,0,0,900,901,
  	1,0,0,0,901,902,1,0,0,0,902,989,3,114,57,0,903,905,5,68,0,0,904,906,3,
  	76,38,0,905,904,1,0,0,0,905,906,1,0,0,0,906,907,1,0,0,0,907,989,3,114,
  	57,0,908,910,5,69,0,0,909,911,3,76,38,0,910,909,1,0,0,0,910,911,1,0,0,
  	0,911,912,1,0,0,0,912,989,3,114,57,0,913,915,5,70,0,0,914,916,3,76,38,
  	0,915,914,1,0,0,0,915,916,1,0,0,0,916,917,1,0,0,0,917,989,3,114,57,0,
  	918,920,5,71,0,0,919,921,3,76,38,0,920,919,1,0,0,0,920,921,1,0,0,0,921,
  	922,1,0,0,0,922,989,3,114,57,0,923,925,5,72,0,0,924,926,3,76,38,0,925,
  	924,1,0,0,0,925,926,1,0,0,0,926,927,1,0,0,0,927,989,3,114,57,0,928,930,
  	5,73,0,0,929,931,3,76,38,0,930,929,1,0,0,0,930,931,1,0,0,0,931,932,1,
  	0,0,0,932,989,3,114,57,0,933,935,5,74,0,0,934,936,3,76,38,0,935,934,1,
  	0,0,0,935,936,1,0,0,0,936,937,1,0,0,0,937,989,3,114,57,0,938,940,5,75,
  	0,0,939,941,3,76,38,0,940,939,1,0,0,0,940,941,1,0,0,0,941,942,1,0,0,0,
  	942,989,3,114,57,0,943,945,5,76,0,0,944,946,3,76,38,0,945,944,1,0,0,0,
  	945,946,1,0,0,0,946,947,1,0,0,0,947,989,3,114,57,0,948,950,5,77,0,0,949,
  	951,3,76,38,0,950,949,1,0,0,0,950,951,1,0,0,0,951,952,1,0,0,0,952,989,
  	3,114,57,0,953,955,5,78,0,0,954,956,3,76,38,0,955,954,1,0,0,0,955,956,
  	1,0,0,0,956,957,1,0,0,0,957,989,3,114,57,0,958,960,5,79,0,0,959,961,3,
  	76,38,0,960,959,1,0,0,0,960,961,1,0,0,0,961,962,1,0,0,0,962,989,3,114,
  	57,0,963,965,5,80,0,0,964,966,3,76,38,0,965,964,1,0,0,0,965,966,1,0,0,
  	0,966,967,1,0,0,0,967,989,3,114,57,0,968,970,5,81,0,0,969,971,3,76,38,
  	0,970,969,1,0,0,0,970,971,1,0,0,0,971,972,1,0,0,0,972,989,3,114,57,0,
  	973,975,5,82,0,0,974,976,3,76,38,0,975,974,1,0,0,0,975,976,1,0,0,0,976,
  	977,1,0,0,0,977,989,3,114,57,0,978,980,5,83,0,0,979,981,3,76,38,0,980,
  	979,1,0,0,0,980,981,1,0,0,0,981,982,1,0,0,0,982,989,3,114,57,0,983,985,
  	5,84,0,0,984,986,3,76,38,0,985,984,1,0,0,0,985,986,1,0,0,0,986,987,1,
  	0,0,0,987,989,3,114,57,0,988,848,1,0,0,0,988,852,1,0,0,0,988,856,1,0,
  	0,0,988,860,1,0,0,0,988,866,1,0,0,0,988,871,1,0,0,0,988,873,1,0,0,0,988,
  	878,1,0,0,0,988,883,1,0,0,0,988,888,1,0,0,0,988,893,1,0,0,0,988,898,1,
  	0,0,0,988,903,1,0,0,0,988,908,1,0,0,0,988,913,1,0,0,0,988,918,1,0,0,0,
  	988,923,1,0,0,0,988,928,1,0,0,0,988,933,1,0,0,0,988,938,1,0,0,0,988,943,
  	1,0,0,0,988,948,1,0,0,0,988,953,1,0,0,0,988,958,1,0,0,0,988,963,1,0,0,
  	0,988,968,1,0,0,0,988,973,1,0,0,0,988,978,1,0,0,0,988,983,1,0,0,0,989,
  	117,1,0,0,0,990,991,5,27,0,0,991,1135,3,42,21,0,992,993,5,28,0,0,993,
  	1135,3,44,22,0,994,995,5,29,0,0,995,1135,3,50,25,0,996,997,5,30,0,0,997,
  	1135,3,52,26,0,998,1135,5,85,0,0,999,1135,5,86,0,0,1000,1135,5,87,0,0,
  	1001,1135,5,88,0,0,1002,1135,5,89,0,0,1003,1135,5,90,0,0,1004,1135,5,
  	91,0,0,1005,1135,5,92,0,0,1006,1135,5,93,0,0,1007,1135,5,94,0,0,1008,
  	1135,5,95,0,0,1009,1135,5,96,0,0,1010,1135,5,97,0,0,1011,1135,5,98,0,
  	0,1012,1135,5,99,0,0,1013,1135,5,100,0,0,1014,1135,5,101,0,0,1015,1135,
  	5,102,0,0,1016,1135,5,103,0,0,1017,1135,5,104,0,0,1018,1135,5,105,0,0,
  	1019,1135,5,106,0,0,1020,1135,5,107,0,0,1021,1135,5,108,0,0,1022,1135,
  	5,109,0,0,1023,1135,5,110,0,0,1024,1135,5,111,0,0,1025,1135,5,112,0,0,
  	1026,1135,5,113,0,0,1027,1135,5,114,0,0,1028,1135,5,115,0,0,1029,1135,
  	5,116,0,0,1030,1135,5,117,0,0,1031,1135,5,118,0,0,1032,1135,5,119,0,0,
  	1033,1135,5,120,0,0,1034,1135,5,121,0,0,1035,1135,5,122,0,0,1036,1135,
  	5,123,0,0,1037,1135,5,124,0,0,1038,1135,5,125,0,0,1039,1135,5,126,0,0,
  	1040,1135,5,127,0,0,1041,1135,5,128,0,0,1042,1135,5,129,0,0,1043,1135,
  	5,130,0,0,1044,1135,5,131,0,0,1045,1135,5,132,0,0,1046,1135,5,133,0,0,
  	1047,1135,5,134,0,0,1048,1135,5,135,0,0,1049,1135,5,136,0,0,1050,1135,
  	5,137,0,0,1051,1135,5,138,0,0,1052,1135,5,139,0,0,1053,1135,5,140,0,0,
  	1054,1135,5,141,0,0,1055,1135,5,142,0,0,1056,1135,5,143,0,0,1057,1135,
  	5,144,0,0,1058,1135,5,145,0,0,1059,1135,5,146,0,0,1060,1135,5,147,0,0,
  	1061,1135,5,148,0,0,1062,1135,5,149,0,0,1063,1135,5,150,0,0,1064,1135,
  	5,151,0,0,1065,1135,5,152,0,0,1066,1135,5,153,0,0,1067,1135,5,154,0,0,
  	1068,1135,5,155,0,0,1069,1135,5,156,0,0,1070,1135,5,157,0,0,1071,1135,
  	5,158,0,0,1072,1135,5,159,0,0,1073,1135,5,160,0,0,1074,1135,5,161,0,0,
  	1075,1135,5,162,0,0,1076,1135,5,163,0,0,1077,1135,5,164,0,0,1078,1135,
  	5,165,0,0,1079,1135,5,166,0,0,1080,1135,5,167,0,0,1081,1135,5,168,0,0,
  	1082,1135,5,169,0,0,1083,1135,5,170,0,0,1084,1135,5,171,0,0,1085,1135,
  	5,172,0,0,1086,1135,5,173,0,0,1087,1135,5,174,0,0,1088,1135,5,175,0,0,
  	1089,1135,5,176,0,0,1090,1135,5,177,0,0,1091,1135,5,178,0,0,1092,1135,
  	5,179,0,0,1093,1135,5,180,0,0,1094,1135,5,181,0,0,1095,1135,5,182,0,0,
  	1096,1135,5,183,0,0,1097,1135,5,184,0,0,1098,1135,5,185,0,0,1099,1135,
  	5,186,0,0,1100,1135,5,187,0,0,1101,1135,5,188,0,0,1102,1135,5,188,0,0,
  	1103,1135,5,189,0,0,1104,1135,5,190,0,0,1105,1135,5,191,0,0,1106,1135,
  	5,192,0,0,1107,1135,5,193,0,0,1108,1135,5,194,0,0,1109,1135,5,195,0,0,
  	1110,1135,5,196,0,0,1111,1135,5,197,0,0,1112,1135,5,198,0,0,1113,1135,
  	5,199,0,0,1114,1135,5,200,0,0,1115,1135,5,201,0,0,1116,1135,5,202,0,0,
  	1117,1135,5,203,0,0,1118,1135,5,204,0,0,1119,1135,5,205,0,0,1120,1135,
  	5,206,0,0,1121,1135,5,207,0,0,1122,1135,5,208,0,0,1123,1135,5,209,0,0,
  	1124,1135,5,210,0,0,1125,1135,5,211,0,0,1126,1135,5,212,0,0,1127,1135,
  	5,213,0,0,1128,1135,5,214,0,0,1129,1135,5,215,0,0,1130,1135,5,216,0,0,
  	1131,1135,5,217,0,0,1132,1135,5,218,0,0,1133,1135,5,219,0,0,1134,990,
  	1,0,0,0,1134,992,1,0,0,0,1134,994,1,0,0,0,1134,996,1,0,0,0,1134,998,1,
  	0,0,0,1134,999,1,0,0,0,1134,1000,1,0,0,0,1134,1001,1,0,0,0,1134,1002,
  	1,0,0,0,1134,1003,1,0,0,0,1134,1004,1,0,0,0,1134,1005,1,0,0,0,1134,1006,
  	1,0,0,0,1134,1007,1,0,0,0,1134,1008,1,0,0,0,1134,1009,1,0,0,0,1134,1010,
  	1,0,0,0,1134,1011,1,0,0,0,1134,1012,1,0,0,0,1134,1013,1,0,0,0,1134,1014,
  	1,0,0,0,1134,1015,1,0,0,0,1134,1016,1,0,0,0,1134,1017,1,0,0,0,1134,1018,
  	1,0,0,0,1134,1019,1,0,0,0,1134,1020,1,0,0,0,1134,1021,1,0,0,0,1134,1022,
  	1,0,0,0,1134,1023,1,0,0,0,1134,1024,1,0,0,0,1134,1025,1,0,0,0,1134,1026,
  	1,0,0,0,1134,1027,1,0,0,0,1134,1028,1,0,0,0,1134,1029,1,0,0,0,1134,1030,
  	1,0,0,0,1134,1031,1,0,0,0,1134,1032,1,0,0,0,1134,1033,1,0,0,0,1134,1034,
  	1,0,0,0,1134,1035,1,0,0,0,1134,1036,1,0,0,0,1134,1037,1,0,0,0,1134,1038,
  	1,0,0,0,1134,1039,1,0,0,0,1134,1040,1,0,0,0,1134,1041,1,0,0,0,1134,1042,
  	1,0,0,0,1134,1043,1,0,0,0,1134,1044,1,0,0,0,1134,1045,1,0,0,0,1134,1046,
  	1,0,0,0,1134,1047,1,0,0,0,1134,1048,1,0,0,0,1134,1049,1,0,0,0,1134,1050,
  	1,0,0,0,1134,1051,1,0,0,0,1134,1052,1,0,0,0,1134,1053,1,0,0,0,1134,1054,
  	1,0,0,0,1134,1055,1,0,0,0,1134,1056,1,0,0,0,1134,1057,1,0,0,0,1134,1058,
  	1,0,0,0,1134,1059,1,0,0,0,1134,1060,1,0,0,0,1134,1061,1,0,0,0,1134,1062,
  	1,0,0,0,1134,1063,1,0,0,0,1134,1064,1,0,0,0,1134,1065,1,0,0,0,1134,1066,
  	1,0,0,0,1134,1067,1,0,0,0,1134,1068,1,0,0,0,1134,1069,1,0,0,0,1134,1070,
  	1,0,0,0,1134,1071,1,0,0,0,1134,1072,1,0,0,0,1134,1073,1,0,0,0,1134,1074,
  	1,0,0,0,1134,1075,1,0,0,0,1134,1076,1,0,0,0,1134,1077,1,0,0,0,1134,1078,
  	1,0,0,0,1134,1079,1,0,0,0,1134,1080,1,0,0,0,1134,1081,1,0,0,0,1134,1082,
  	1,0,0,0,1134,1083,1,0,0,0,1134,1084,1,0,0,0,1134,1085,1,0,0,0,1134,1086,
  	1,0,0,0,1134,1087,1,0,0,0,1134,1088,1,0,0,0,1134,1089,1,0,0,0,1134,1090,
  	1,0,0,0,1134,1091,1,0,0,0,1134,1092,1,0,0,0,1134,1093,1,0,0,0,1134,1094,
  	1,0,0,0,1134,1095,1,0,0,0,1134,1096,1,0,0,0,1134,1097,1,0,0,0,1134,1098,
  	1,0,0,0,1134,1099,1,0,0,0,1134,1100,1,0,0,0,1134,1101,1,0,0,0,1134,1102,
  	1,0,0,0,1134,1103,1,0,0,0,1134,1104,1,0,0,0,1134,1105,1,0,0,0,1134,1106,
  	1,0,0,0,1134,1107,1,0,0,0,1134,1108,1,0,0,0,1134,1109,1,0,0,0,1134,1110,
  	1,0,0,0,1134,1111,1,0,0,0,1134,1112,1,0,0,0,1134,1113,1,0,0,0,1134,1114,
  	1,0,0,0,1134,1115,1,0,0,0,1134,1116,1,0,0,0,1134,1117,1,0,0,0,1134,1118,
  	1,0,0,0,1134,1119,1,0,0,0,1134,1120,1,0,0,0,1134,1121,1,0,0,0,1134,1122,
  	1,0,0,0,1134,1123,1,0,0,0,1134,1124,1,0,0,0,1134,1125,1,0,0,0,1134,1126,
  	1,0,0,0,1134,1127,1,0,0,0,1134,1128,1,0,0,0,1134,1129,1,0,0,0,1134,1130,
  	1,0,0,0,1134,1131,1,0,0,0,1134,1132,1,0,0,0,1134,1133,1,0,0,0,1135,119,
  	1,0,0,0,140,123,128,131,137,140,152,157,165,173,181,189,194,212,217,227,
  	233,236,243,249,251,258,263,267,276,282,285,288,295,300,304,312,316,323,
  	328,337,367,382,385,389,395,400,407,410,418,425,428,439,449,452,456,461,
  	466,497,500,509,519,525,532,545,549,553,557,561,565,569,573,577,581,588,
  	593,599,605,608,618,623,631,636,644,649,654,657,661,663,670,682,694,706,
  	714,723,727,731,746,755,767,774,777,783,790,793,805,809,813,817,821,825,
  	831,835,840,843,846,850,854,858,864,868,875,880,885,890,895,900,905,910,
  	915,920,925,930,935,940,945,950,955,960,965,970,975,980,985,988,1134
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  watParserStaticData = std::move(staticData);
}

}

WatParser::WatParser(TokenStream *input) : WatParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

WatParser::WatParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  WatParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *watParserStaticData->atn, watParserStaticData->decisionToDFA, watParserStaticData->sharedContextCache, options);
}

WatParser::~WatParser() {
  delete _interpreter;
}

const atn::ATN& WatParser::getATN() const {
  return *watParserStaticData->atn;
}

std::string WatParser::getGrammarFileName() const {
  return "Wat.g4";
}

const std::vector<std::string>& WatParser::getRuleNames() const {
  return watParserStaticData->ruleNames;
}

const dfa::Vocabulary& WatParser::getVocabulary() const {
  return watParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView WatParser::getSerializedATN() const {
  return watParserStaticData->serializedATN;
}


//----------------- ModuleContext ------------------------------------------------------------------

WatParser::ModuleContext::ModuleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::ModuleContext::Id() {
  return getToken(WatParser::Id, 0);
}

std::vector<WatParser::ModulefieldContext *> WatParser::ModuleContext::modulefield() {
  return getRuleContexts<WatParser::ModulefieldContext>();
}

WatParser::ModulefieldContext* WatParser::ModuleContext::modulefield(size_t i) {
  return getRuleContext<WatParser::ModulefieldContext>(i);
}


size_t WatParser::ModuleContext::getRuleIndex() const {
  return WatParser::RuleModule;
}


std::any WatParser::ModuleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitModule(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ModuleContext* WatParser::module() {
  ModuleContext *_localctx = _tracker.createInstance<ModuleContext>(_ctx, getState());
  enterRule(_localctx, 0, WatParser::RuleModule);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(140);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(120);
      match(WatParser::T__0);
      setState(131);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::T__1) {
        setState(121);
        match(WatParser::T__1);
        setState(123);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Id) {
          setState(122);
          match(WatParser::Id);
        }
        setState(128);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == WatParser::T__0) {
          setState(125);
          modulefield();
          setState(130);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(133);
      match(WatParser::T__2);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(137);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::T__0) {
        setState(134);
        modulefield();
        setState(139);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModulefieldContext ------------------------------------------------------------------

WatParser::ModulefieldContext::ModulefieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::TypesectionContext* WatParser::ModulefieldContext::typesection() {
  return getRuleContext<WatParser::TypesectionContext>(0);
}

WatParser::ImportsectionContext* WatParser::ModulefieldContext::importsection() {
  return getRuleContext<WatParser::ImportsectionContext>(0);
}

WatParser::FuncsectionContext* WatParser::ModulefieldContext::funcsection() {
  return getRuleContext<WatParser::FuncsectionContext>(0);
}

WatParser::TablesectionContext* WatParser::ModulefieldContext::tablesection() {
  return getRuleContext<WatParser::TablesectionContext>(0);
}

WatParser::MemorysectionContext* WatParser::ModulefieldContext::memorysection() {
  return getRuleContext<WatParser::MemorysectionContext>(0);
}

WatParser::GlobalsectionContext* WatParser::ModulefieldContext::globalsection() {
  return getRuleContext<WatParser::GlobalsectionContext>(0);
}

WatParser::ExportsectionContext* WatParser::ModulefieldContext::exportsection() {
  return getRuleContext<WatParser::ExportsectionContext>(0);
}

WatParser::StartsectionContext* WatParser::ModulefieldContext::startsection() {
  return getRuleContext<WatParser::StartsectionContext>(0);
}

WatParser::ElemsectionContext* WatParser::ModulefieldContext::elemsection() {
  return getRuleContext<WatParser::ElemsectionContext>(0);
}

WatParser::DatasectionContext* WatParser::ModulefieldContext::datasection() {
  return getRuleContext<WatParser::DatasectionContext>(0);
}


size_t WatParser::ModulefieldContext::getRuleIndex() const {
  return WatParser::RuleModulefield;
}


std::any WatParser::ModulefieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitModulefield(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ModulefieldContext* WatParser::modulefield() {
  ModulefieldContext *_localctx = _tracker.createInstance<ModulefieldContext>(_ctx, getState());
  enterRule(_localctx, 2, WatParser::RuleModulefield);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(152);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(142);
      typesection();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(143);
      importsection();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(144);
      funcsection();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(145);
      tablesection();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(146);
      memorysection();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(147);
      globalsection();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(148);
      exportsection();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(149);
      startsection();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(150);
      elemsection();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(151);
      datasection();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypesectionContext ------------------------------------------------------------------

WatParser::TypesectionContext::TypesectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::FunctypeContext* WatParser::TypesectionContext::functype() {
  return getRuleContext<WatParser::FunctypeContext>(0);
}

tree::TerminalNode* WatParser::TypesectionContext::Id() {
  return getToken(WatParser::Id, 0);
}


size_t WatParser::TypesectionContext::getRuleIndex() const {
  return WatParser::RuleTypesection;
}


std::any WatParser::TypesectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitTypesection(this);
  else
    return visitor->visitChildren(this);
}

WatParser::TypesectionContext* WatParser::typesection() {
  TypesectionContext *_localctx = _tracker.createInstance<TypesectionContext>(_ctx, getState());
  enterRule(_localctx, 4, WatParser::RuleTypesection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(154);
    match(WatParser::T__0);
    setState(155);
    match(WatParser::T__3);
    setState(157);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::Id) {
      setState(156);
      match(WatParser::Id);
    }
    setState(159);
    functype();
    setState(160);
    match(WatParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportdescContext ------------------------------------------------------------------

WatParser::ImportdescContext::ImportdescContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::TypeuseContext* WatParser::ImportdescContext::typeuse() {
  return getRuleContext<WatParser::TypeuseContext>(0);
}

tree::TerminalNode* WatParser::ImportdescContext::Id() {
  return getToken(WatParser::Id, 0);
}

WatParser::TabletypeContext* WatParser::ImportdescContext::tabletype() {
  return getRuleContext<WatParser::TabletypeContext>(0);
}

WatParser::MemtypeContext* WatParser::ImportdescContext::memtype() {
  return getRuleContext<WatParser::MemtypeContext>(0);
}

WatParser::GlobaltypeContext* WatParser::ImportdescContext::globaltype() {
  return getRuleContext<WatParser::GlobaltypeContext>(0);
}


size_t WatParser::ImportdescContext::getRuleIndex() const {
  return WatParser::RuleImportdesc;
}


std::any WatParser::ImportdescContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitImportdesc(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ImportdescContext* WatParser::importdesc() {
  ImportdescContext *_localctx = _tracker.createInstance<ImportdescContext>(_ctx, getState());
  enterRule(_localctx, 6, WatParser::RuleImportdesc);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(194);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(162);
      match(WatParser::T__0);
      setState(163);
      match(WatParser::T__4);
      setState(165);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::Id) {
        setState(164);
        match(WatParser::Id);
      }
      setState(167);
      typeuse();
      setState(168);
      match(WatParser::T__2);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(170);
      match(WatParser::T__0);
      setState(171);
      match(WatParser::T__5);
      setState(173);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::Id) {
        setState(172);
        match(WatParser::Id);
      }
      setState(175);
      tabletype();
      setState(176);
      match(WatParser::T__2);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(178);
      match(WatParser::T__0);
      setState(179);
      match(WatParser::T__6);
      setState(181);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::Id) {
        setState(180);
        match(WatParser::Id);
      }
      setState(183);
      memtype();
      setState(184);
      match(WatParser::T__2);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(186);
      match(WatParser::T__0);
      setState(187);
      match(WatParser::T__7);
      setState(189);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::Id) {
        setState(188);
        match(WatParser::Id);
      }
      setState(191);
      globaltype();
      setState(192);
      match(WatParser::T__2);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportabbrContext ------------------------------------------------------------------

WatParser::ImportabbrContext::ImportabbrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> WatParser::ImportabbrContext::String() {
  return getTokens(WatParser::String);
}

tree::TerminalNode* WatParser::ImportabbrContext::String(size_t i) {
  return getToken(WatParser::String, i);
}


size_t WatParser::ImportabbrContext::getRuleIndex() const {
  return WatParser::RuleImportabbr;
}


std::any WatParser::ImportabbrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitImportabbr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ImportabbrContext* WatParser::importabbr() {
  ImportabbrContext *_localctx = _tracker.createInstance<ImportabbrContext>(_ctx, getState());
  enterRule(_localctx, 8, WatParser::RuleImportabbr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(196);
    match(WatParser::T__0);
    setState(197);
    match(WatParser::T__8);
    setState(198);
    match(WatParser::String);
    setState(199);
    match(WatParser::String);
    setState(200);
    match(WatParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportsectionContext ------------------------------------------------------------------

WatParser::ImportsectionContext::ImportsectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> WatParser::ImportsectionContext::String() {
  return getTokens(WatParser::String);
}

tree::TerminalNode* WatParser::ImportsectionContext::String(size_t i) {
  return getToken(WatParser::String, i);
}

WatParser::ImportdescContext* WatParser::ImportsectionContext::importdesc() {
  return getRuleContext<WatParser::ImportdescContext>(0);
}


size_t WatParser::ImportsectionContext::getRuleIndex() const {
  return WatParser::RuleImportsection;
}


std::any WatParser::ImportsectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitImportsection(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ImportsectionContext* WatParser::importsection() {
  ImportsectionContext *_localctx = _tracker.createInstance<ImportsectionContext>(_ctx, getState());
  enterRule(_localctx, 10, WatParser::RuleImportsection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(202);
    match(WatParser::T__0);
    setState(203);
    match(WatParser::T__8);
    setState(204);
    match(WatParser::String);
    setState(205);
    match(WatParser::String);
    setState(206);
    importdesc();
    setState(207);
    match(WatParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FuncsectionContext ------------------------------------------------------------------

WatParser::FuncsectionContext::FuncsectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::ImportabbrContext* WatParser::FuncsectionContext::importabbr() {
  return getRuleContext<WatParser::ImportabbrContext>(0);
}

WatParser::TypeuseContext* WatParser::FuncsectionContext::typeuse() {
  return getRuleContext<WatParser::TypeuseContext>(0);
}

tree::TerminalNode* WatParser::FuncsectionContext::Id() {
  return getToken(WatParser::Id, 0);
}

std::vector<WatParser::ExportabbrContext *> WatParser::FuncsectionContext::exportabbr() {
  return getRuleContexts<WatParser::ExportabbrContext>();
}

WatParser::ExportabbrContext* WatParser::FuncsectionContext::exportabbr(size_t i) {
  return getRuleContext<WatParser::ExportabbrContext>(i);
}

std::vector<WatParser::LocalContext *> WatParser::FuncsectionContext::local() {
  return getRuleContexts<WatParser::LocalContext>();
}

WatParser::LocalContext* WatParser::FuncsectionContext::local(size_t i) {
  return getRuleContext<WatParser::LocalContext>(i);
}

std::vector<WatParser::InstrContext *> WatParser::FuncsectionContext::instr() {
  return getRuleContexts<WatParser::InstrContext>();
}

WatParser::InstrContext* WatParser::FuncsectionContext::instr(size_t i) {
  return getRuleContext<WatParser::InstrContext>(i);
}


size_t WatParser::FuncsectionContext::getRuleIndex() const {
  return WatParser::RuleFuncsection;
}


std::any WatParser::FuncsectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitFuncsection(this);
  else
    return visitor->visitChildren(this);
}

WatParser::FuncsectionContext* WatParser::funcsection() {
  FuncsectionContext *_localctx = _tracker.createInstance<FuncsectionContext>(_ctx, getState());
  enterRule(_localctx, 12, WatParser::RuleFuncsection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(209);
    match(WatParser::T__0);
    setState(210);
    match(WatParser::T__4);
    setState(212);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::Id) {
      setState(211);
      match(WatParser::Id);
    }
    setState(217);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(214);
        exportabbr(); 
      }
      setState(219);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx);
    }
    setState(236);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx)) {
    case 1: {
      setState(220);
      importabbr();
      setState(221);
      typeuse();
      break;
    }

    case 2: {
      setState(223);
      typeuse();
      setState(227);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 14, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(224);
          local(); 
        }
        setState(229);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 14, _ctx);
      }
      setState(233);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -106954750) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & -1) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & -1) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 192)) & 137707388927) != 0)) {
        setState(230);
        instr();
        setState(235);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    default:
      break;
    }
    setState(238);
    match(WatParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocalContext ------------------------------------------------------------------

WatParser::LocalContext::LocalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<WatParser::ValtypeContext *> WatParser::LocalContext::valtype() {
  return getRuleContexts<WatParser::ValtypeContext>();
}

WatParser::ValtypeContext* WatParser::LocalContext::valtype(size_t i) {
  return getRuleContext<WatParser::ValtypeContext>(i);
}

tree::TerminalNode* WatParser::LocalContext::Id() {
  return getToken(WatParser::Id, 0);
}


size_t WatParser::LocalContext::getRuleIndex() const {
  return WatParser::RuleLocal;
}


std::any WatParser::LocalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitLocal(this);
  else
    return visitor->visitChildren(this);
}

WatParser::LocalContext* WatParser::local() {
  LocalContext *_localctx = _tracker.createInstance<LocalContext>(_ctx, getState());
  enterRule(_localctx, 14, WatParser::RuleLocal);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(240);
    match(WatParser::T__0);
    setState(241);
    match(WatParser::T__9);
    setState(251);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx)) {
    case 1: {
      setState(243);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::Id) {
        setState(242);
        match(WatParser::Id);
      }
      setState(245);
      valtype();
      break;
    }

    case 2: {
      setState(247); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(246);
        valtype();
        setState(249); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == WatParser::NumType

      || _la == WatParser::RefType);
      break;
    }

    default:
      break;
    }
    setState(253);
    match(WatParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TablesectionContext ------------------------------------------------------------------

WatParser::TablesectionContext::TablesectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::TabletypeContext* WatParser::TablesectionContext::tabletype() {
  return getRuleContext<WatParser::TabletypeContext>(0);
}

tree::TerminalNode* WatParser::TablesectionContext::RefType() {
  return getToken(WatParser::RefType, 0);
}

tree::TerminalNode* WatParser::TablesectionContext::Id() {
  return getToken(WatParser::Id, 0);
}

std::vector<WatParser::ExportabbrContext *> WatParser::TablesectionContext::exportabbr() {
  return getRuleContexts<WatParser::ExportabbrContext>();
}

WatParser::ExportabbrContext* WatParser::TablesectionContext::exportabbr(size_t i) {
  return getRuleContext<WatParser::ExportabbrContext>(i);
}

WatParser::ImportabbrContext* WatParser::TablesectionContext::importabbr() {
  return getRuleContext<WatParser::ImportabbrContext>(0);
}

std::vector<WatParser::ElemexprContext *> WatParser::TablesectionContext::elemexpr() {
  return getRuleContexts<WatParser::ElemexprContext>();
}

WatParser::ElemexprContext* WatParser::TablesectionContext::elemexpr(size_t i) {
  return getRuleContext<WatParser::ElemexprContext>(i);
}

std::vector<WatParser::FuncidxContext *> WatParser::TablesectionContext::funcidx() {
  return getRuleContexts<WatParser::FuncidxContext>();
}

WatParser::FuncidxContext* WatParser::TablesectionContext::funcidx(size_t i) {
  return getRuleContext<WatParser::FuncidxContext>(i);
}


size_t WatParser::TablesectionContext::getRuleIndex() const {
  return WatParser::RuleTablesection;
}


std::any WatParser::TablesectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitTablesection(this);
  else
    return visitor->visitChildren(this);
}

WatParser::TablesectionContext* WatParser::tablesection() {
  TablesectionContext *_localctx = _tracker.createInstance<TablesectionContext>(_ctx, getState());
  enterRule(_localctx, 16, WatParser::RuleTablesection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(255);
    match(WatParser::T__0);
    setState(256);
    match(WatParser::T__5);
    setState(258);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::Id) {
      setState(257);
      match(WatParser::Id);
    }
    setState(263);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(260);
        exportabbr(); 
      }
      setState(265);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx);
    }
    setState(288);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::T__0:
      case WatParser::Integer: {
        setState(267);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::T__0) {
          setState(266);
          importabbr();
        }
        setState(269);
        tabletype();
        break;
      }

      case WatParser::RefType: {
        setState(270);
        match(WatParser::RefType);
        setState(271);
        match(WatParser::T__0);
        setState(272);
        match(WatParser::T__10);
        setState(285);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx)) {
        case 1: {
          setState(276);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == WatParser::T__0) {
            setState(273);
            elemexpr();
            setState(278);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
          break;
        }

        case 2: {
          setState(282);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == WatParser::Integer

          || _la == WatParser::Id) {
            setState(279);
            funcidx();
            setState(284);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
          break;
        }

        default:
          break;
        }
        setState(287);
        match(WatParser::T__2);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(290);
    match(WatParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MemorysectionContext ------------------------------------------------------------------

WatParser::MemorysectionContext::MemorysectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::MemtypeContext* WatParser::MemorysectionContext::memtype() {
  return getRuleContext<WatParser::MemtypeContext>(0);
}

tree::TerminalNode* WatParser::MemorysectionContext::Id() {
  return getToken(WatParser::Id, 0);
}

std::vector<WatParser::ExportabbrContext *> WatParser::MemorysectionContext::exportabbr() {
  return getRuleContexts<WatParser::ExportabbrContext>();
}

WatParser::ExportabbrContext* WatParser::MemorysectionContext::exportabbr(size_t i) {
  return getRuleContext<WatParser::ExportabbrContext>(i);
}

WatParser::ImportabbrContext* WatParser::MemorysectionContext::importabbr() {
  return getRuleContext<WatParser::ImportabbrContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::MemorysectionContext::String() {
  return getTokens(WatParser::String);
}

tree::TerminalNode* WatParser::MemorysectionContext::String(size_t i) {
  return getToken(WatParser::String, i);
}


size_t WatParser::MemorysectionContext::getRuleIndex() const {
  return WatParser::RuleMemorysection;
}


std::any WatParser::MemorysectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitMemorysection(this);
  else
    return visitor->visitChildren(this);
}

WatParser::MemorysectionContext* WatParser::memorysection() {
  MemorysectionContext *_localctx = _tracker.createInstance<MemorysectionContext>(_ctx, getState());
  enterRule(_localctx, 18, WatParser::RuleMemorysection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(292);
    match(WatParser::T__0);
    setState(293);
    match(WatParser::T__6);
    setState(295);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::Id) {
      setState(294);
      match(WatParser::Id);
    }
    setState(300);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(297);
        exportabbr(); 
      }
      setState(302);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx);
    }
    setState(316);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx)) {
    case 1: {
      setState(304);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::T__0) {
        setState(303);
        importabbr();
      }
      setState(306);
      memtype();
      break;
    }

    case 2: {
      setState(307);
      match(WatParser::T__0);
      setState(308);
      match(WatParser::T__11);
      setState(312);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::String) {
        setState(309);
        match(WatParser::String);
        setState(314);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(315);
      match(WatParser::T__2);
      break;
    }

    default:
      break;
    }
    setState(318);
    match(WatParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GlobalsectionContext ------------------------------------------------------------------

WatParser::GlobalsectionContext::GlobalsectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::ImportabbrContext* WatParser::GlobalsectionContext::importabbr() {
  return getRuleContext<WatParser::ImportabbrContext>(0);
}

WatParser::GlobaltypeContext* WatParser::GlobalsectionContext::globaltype() {
  return getRuleContext<WatParser::GlobaltypeContext>(0);
}

WatParser::ConstexprContext* WatParser::GlobalsectionContext::constexpr_() {
  return getRuleContext<WatParser::ConstexprContext>(0);
}

tree::TerminalNode* WatParser::GlobalsectionContext::Id() {
  return getToken(WatParser::Id, 0);
}

std::vector<WatParser::ExportabbrContext *> WatParser::GlobalsectionContext::exportabbr() {
  return getRuleContexts<WatParser::ExportabbrContext>();
}

WatParser::ExportabbrContext* WatParser::GlobalsectionContext::exportabbr(size_t i) {
  return getRuleContext<WatParser::ExportabbrContext>(i);
}


size_t WatParser::GlobalsectionContext::getRuleIndex() const {
  return WatParser::RuleGlobalsection;
}


std::any WatParser::GlobalsectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitGlobalsection(this);
  else
    return visitor->visitChildren(this);
}

WatParser::GlobalsectionContext* WatParser::globalsection() {
  GlobalsectionContext *_localctx = _tracker.createInstance<GlobalsectionContext>(_ctx, getState());
  enterRule(_localctx, 20, WatParser::RuleGlobalsection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(320);
    match(WatParser::T__0);
    setState(321);
    match(WatParser::T__7);
    setState(323);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::Id) {
      setState(322);
      match(WatParser::Id);
    }
    setState(328);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(325);
        exportabbr(); 
      }
      setState(330);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx);
    }
    setState(337);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx)) {
    case 1: {
      setState(331);
      importabbr();
      setState(332);
      globaltype();
      break;
    }

    case 2: {
      setState(334);
      globaltype();
      setState(335);
      constexpr_();
      break;
    }

    default:
      break;
    }
    setState(339);
    match(WatParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExportsectionContext ------------------------------------------------------------------

WatParser::ExportsectionContext::ExportsectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::ExportsectionContext::String() {
  return getToken(WatParser::String, 0);
}

WatParser::ExportdescContext* WatParser::ExportsectionContext::exportdesc() {
  return getRuleContext<WatParser::ExportdescContext>(0);
}


size_t WatParser::ExportsectionContext::getRuleIndex() const {
  return WatParser::RuleExportsection;
}


std::any WatParser::ExportsectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitExportsection(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ExportsectionContext* WatParser::exportsection() {
  ExportsectionContext *_localctx = _tracker.createInstance<ExportsectionContext>(_ctx, getState());
  enterRule(_localctx, 22, WatParser::RuleExportsection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(341);
    match(WatParser::T__0);
    setState(342);
    match(WatParser::T__12);
    setState(343);
    match(WatParser::String);
    setState(344);
    exportdesc();
    setState(345);
    match(WatParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExportdescContext ------------------------------------------------------------------

WatParser::ExportdescContext::ExportdescContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::FuncidxContext* WatParser::ExportdescContext::funcidx() {
  return getRuleContext<WatParser::FuncidxContext>(0);
}

WatParser::TableidxContext* WatParser::ExportdescContext::tableidx() {
  return getRuleContext<WatParser::TableidxContext>(0);
}

WatParser::MemidxContext* WatParser::ExportdescContext::memidx() {
  return getRuleContext<WatParser::MemidxContext>(0);
}

WatParser::GlobalidxContext* WatParser::ExportdescContext::globalidx() {
  return getRuleContext<WatParser::GlobalidxContext>(0);
}


size_t WatParser::ExportdescContext::getRuleIndex() const {
  return WatParser::RuleExportdesc;
}


std::any WatParser::ExportdescContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitExportdesc(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ExportdescContext* WatParser::exportdesc() {
  ExportdescContext *_localctx = _tracker.createInstance<ExportdescContext>(_ctx, getState());
  enterRule(_localctx, 24, WatParser::RuleExportdesc);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(367);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 35, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(347);
      match(WatParser::T__0);
      setState(348);
      match(WatParser::T__4);
      setState(349);
      funcidx();
      setState(350);
      match(WatParser::T__2);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(352);
      match(WatParser::T__0);
      setState(353);
      match(WatParser::T__5);
      setState(354);
      tableidx();
      setState(355);
      match(WatParser::T__2);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(357);
      match(WatParser::T__0);
      setState(358);
      match(WatParser::T__6);
      setState(359);
      memidx();
      setState(360);
      match(WatParser::T__2);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(362);
      match(WatParser::T__0);
      setState(363);
      match(WatParser::T__7);
      setState(364);
      globalidx();
      setState(365);
      match(WatParser::T__2);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExportabbrContext ------------------------------------------------------------------

WatParser::ExportabbrContext::ExportabbrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::ExportabbrContext::String() {
  return getToken(WatParser::String, 0);
}


size_t WatParser::ExportabbrContext::getRuleIndex() const {
  return WatParser::RuleExportabbr;
}


std::any WatParser::ExportabbrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitExportabbr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ExportabbrContext* WatParser::exportabbr() {
  ExportabbrContext *_localctx = _tracker.createInstance<ExportabbrContext>(_ctx, getState());
  enterRule(_localctx, 26, WatParser::RuleExportabbr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(369);
    match(WatParser::T__0);
    setState(370);
    match(WatParser::T__12);
    setState(371);
    match(WatParser::String);
    setState(372);
    match(WatParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StartsectionContext ------------------------------------------------------------------

WatParser::StartsectionContext::StartsectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::FuncidxContext* WatParser::StartsectionContext::funcidx() {
  return getRuleContext<WatParser::FuncidxContext>(0);
}


size_t WatParser::StartsectionContext::getRuleIndex() const {
  return WatParser::RuleStartsection;
}


std::any WatParser::StartsectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitStartsection(this);
  else
    return visitor->visitChildren(this);
}

WatParser::StartsectionContext* WatParser::startsection() {
  StartsectionContext *_localctx = _tracker.createInstance<StartsectionContext>(_ctx, getState());
  enterRule(_localctx, 28, WatParser::RuleStartsection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(374);
    match(WatParser::T__0);
    setState(375);
    match(WatParser::T__13);
    setState(376);
    funcidx();
    setState(377);
    match(WatParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElemsectionContext ------------------------------------------------------------------

WatParser::ElemsectionContext::ElemsectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::ElemlistContext* WatParser::ElemsectionContext::elemlist() {
  return getRuleContext<WatParser::ElemlistContext>(0);
}

WatParser::ConstexprContext* WatParser::ElemsectionContext::constexpr_() {
  return getRuleContext<WatParser::ConstexprContext>(0);
}

tree::TerminalNode* WatParser::ElemsectionContext::Id() {
  return getToken(WatParser::Id, 0);
}

std::vector<WatParser::FuncidxContext *> WatParser::ElemsectionContext::funcidx() {
  return getRuleContexts<WatParser::FuncidxContext>();
}

WatParser::FuncidxContext* WatParser::ElemsectionContext::funcidx(size_t i) {
  return getRuleContext<WatParser::FuncidxContext>(i);
}

WatParser::TableuseContext* WatParser::ElemsectionContext::tableuse() {
  return getRuleContext<WatParser::TableuseContext>(0);
}


size_t WatParser::ElemsectionContext::getRuleIndex() const {
  return WatParser::RuleElemsection;
}


std::any WatParser::ElemsectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitElemsection(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ElemsectionContext* WatParser::elemsection() {
  ElemsectionContext *_localctx = _tracker.createInstance<ElemsectionContext>(_ctx, getState());
  enterRule(_localctx, 30, WatParser::RuleElemsection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(379);
    match(WatParser::T__0);
    setState(380);
    match(WatParser::T__10);
    setState(382);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::Id) {
      setState(381);
      match(WatParser::Id);
    }
    setState(410);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx)) {
    case 1: {
      setState(395);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case WatParser::T__0: {
          setState(385);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 37, _ctx)) {
          case 1: {
            setState(384);
            tableuse();
            break;
          }

          default:
            break;
          }
          setState(387);
          match(WatParser::T__0);
          setState(389);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == WatParser::T__14) {
            setState(388);
            match(WatParser::T__14);
          }
          setState(391);
          constexpr_();
          setState(392);
          match(WatParser::T__2);
          break;
        }

        case WatParser::T__15: {
          setState(394);
          match(WatParser::T__15);
          break;
        }

        case WatParser::T__4:
        case WatParser::RefType: {
          break;
        }

      default:
        break;
      }
      setState(397);
      elemlist();
      break;
    }

    case 2: {
      setState(398);
      match(WatParser::T__0);
      setState(400);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::T__14) {
        setState(399);
        match(WatParser::T__14);
      }
      setState(402);
      constexpr_();
      setState(403);
      match(WatParser::T__2);
      setState(407);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::Integer

      || _la == WatParser::Id) {
        setState(404);
        funcidx();
        setState(409);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    default:
      break;
    }
    setState(412);
    match(WatParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElemlistContext ------------------------------------------------------------------

WatParser::ElemlistContext::ElemlistContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::ElemlistContext::RefType() {
  return getToken(WatParser::RefType, 0);
}

std::vector<WatParser::ElemexprContext *> WatParser::ElemlistContext::elemexpr() {
  return getRuleContexts<WatParser::ElemexprContext>();
}

WatParser::ElemexprContext* WatParser::ElemlistContext::elemexpr(size_t i) {
  return getRuleContext<WatParser::ElemexprContext>(i);
}

std::vector<WatParser::FuncidxContext *> WatParser::ElemlistContext::funcidx() {
  return getRuleContexts<WatParser::FuncidxContext>();
}

WatParser::FuncidxContext* WatParser::ElemlistContext::funcidx(size_t i) {
  return getRuleContext<WatParser::FuncidxContext>(i);
}


size_t WatParser::ElemlistContext::getRuleIndex() const {
  return WatParser::RuleElemlist;
}


std::any WatParser::ElemlistContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitElemlist(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ElemlistContext* WatParser::elemlist() {
  ElemlistContext *_localctx = _tracker.createInstance<ElemlistContext>(_ctx, getState());
  enterRule(_localctx, 32, WatParser::RuleElemlist);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(428);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::RefType: {
        enterOuterAlt(_localctx, 1);
        setState(414);
        match(WatParser::RefType);
        setState(418);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == WatParser::T__0) {
          setState(415);
          elemexpr();
          setState(420);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case WatParser::T__4: {
        enterOuterAlt(_localctx, 2);
        setState(421);
        match(WatParser::T__4);
        setState(425);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == WatParser::Integer

        || _la == WatParser::Id) {
          setState(422);
          funcidx();
          setState(427);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElemexprContext ------------------------------------------------------------------

WatParser::ElemexprContext::ElemexprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::ConstexprContext* WatParser::ElemexprContext::constexpr_() {
  return getRuleContext<WatParser::ConstexprContext>(0);
}


size_t WatParser::ElemexprContext::getRuleIndex() const {
  return WatParser::RuleElemexpr;
}


std::any WatParser::ElemexprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitElemexpr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ElemexprContext* WatParser::elemexpr() {
  ElemexprContext *_localctx = _tracker.createInstance<ElemexprContext>(_ctx, getState());
  enterRule(_localctx, 34, WatParser::RuleElemexpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(439);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(430);
      match(WatParser::T__0);
      setState(431);
      match(WatParser::T__16);
      setState(432);
      constexpr_();
      setState(433);
      match(WatParser::T__2);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(435);
      match(WatParser::T__0);
      setState(436);
      constexpr_();
      setState(437);
      match(WatParser::T__2);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableuseContext ------------------------------------------------------------------

WatParser::TableuseContext::TableuseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::TableidxContext* WatParser::TableuseContext::tableidx() {
  return getRuleContext<WatParser::TableidxContext>(0);
}


size_t WatParser::TableuseContext::getRuleIndex() const {
  return WatParser::RuleTableuse;
}


std::any WatParser::TableuseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitTableuse(this);
  else
    return visitor->visitChildren(this);
}

WatParser::TableuseContext* WatParser::tableuse() {
  TableuseContext *_localctx = _tracker.createInstance<TableuseContext>(_ctx, getState());
  enterRule(_localctx, 36, WatParser::RuleTableuse);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(441);
    match(WatParser::T__0);
    setState(442);
    match(WatParser::T__5);
    setState(443);
    tableidx();
    setState(444);
    match(WatParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DatasectionContext ------------------------------------------------------------------

WatParser::DatasectionContext::DatasectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::DatasectionContext::Id() {
  return getToken(WatParser::Id, 0);
}

WatParser::ConstexprContext* WatParser::DatasectionContext::constexpr_() {
  return getRuleContext<WatParser::ConstexprContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::DatasectionContext::String() {
  return getTokens(WatParser::String);
}

tree::TerminalNode* WatParser::DatasectionContext::String(size_t i) {
  return getToken(WatParser::String, i);
}

WatParser::MemuseContext* WatParser::DatasectionContext::memuse() {
  return getRuleContext<WatParser::MemuseContext>(0);
}


size_t WatParser::DatasectionContext::getRuleIndex() const {
  return WatParser::RuleDatasection;
}


std::any WatParser::DatasectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitDatasection(this);
  else
    return visitor->visitChildren(this);
}

WatParser::DatasectionContext* WatParser::datasection() {
  DatasectionContext *_localctx = _tracker.createInstance<DatasectionContext>(_ctx, getState());
  enterRule(_localctx, 38, WatParser::RuleDatasection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(446);
    match(WatParser::T__0);
    setState(447);
    match(WatParser::T__11);
    setState(449);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::Id) {
      setState(448);
      match(WatParser::Id);
    }
    setState(461);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::T__0) {
      setState(452);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx)) {
      case 1: {
        setState(451);
        memuse();
        break;
      }

      default:
        break;
      }
      setState(454);
      match(WatParser::T__0);
      setState(456);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::T__14) {
        setState(455);
        match(WatParser::T__14);
      }
      setState(458);
      constexpr_();
      setState(459);
      match(WatParser::T__2);
    }
    setState(466);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == WatParser::String) {
      setState(463);
      match(WatParser::String);
      setState(468);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(469);
    match(WatParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MemuseContext ------------------------------------------------------------------

WatParser::MemuseContext::MemuseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::MemidxContext* WatParser::MemuseContext::memidx() {
  return getRuleContext<WatParser::MemidxContext>(0);
}


size_t WatParser::MemuseContext::getRuleIndex() const {
  return WatParser::RuleMemuse;
}


std::any WatParser::MemuseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitMemuse(this);
  else
    return visitor->visitChildren(this);
}

WatParser::MemuseContext* WatParser::memuse() {
  MemuseContext *_localctx = _tracker.createInstance<MemuseContext>(_ctx, getState());
  enterRule(_localctx, 40, WatParser::RuleMemuse);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(471);
    match(WatParser::T__0);
    setState(472);
    match(WatParser::T__6);
    setState(473);
    memidx();
    setState(474);
    match(WatParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- I32Context ------------------------------------------------------------------

WatParser::I32Context::I32Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::I32Context::Integer() {
  return getToken(WatParser::Integer, 0);
}


size_t WatParser::I32Context::getRuleIndex() const {
  return WatParser::RuleI32;
}


std::any WatParser::I32Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitI32(this);
  else
    return visitor->visitChildren(this);
}

WatParser::I32Context* WatParser::i32() {
  I32Context *_localctx = _tracker.createInstance<I32Context>(_ctx, getState());
  enterRule(_localctx, 42, WatParser::RuleI32);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(476);
    match(WatParser::Integer);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- I64Context ------------------------------------------------------------------

WatParser::I64Context::I64Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::I64Context::Integer() {
  return getToken(WatParser::Integer, 0);
}


size_t WatParser::I64Context::getRuleIndex() const {
  return WatParser::RuleI64;
}


std::any WatParser::I64Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitI64(this);
  else
    return visitor->visitChildren(this);
}

WatParser::I64Context* WatParser::i64() {
  I64Context *_localctx = _tracker.createInstance<I64Context>(_ctx, getState());
  enterRule(_localctx, 44, WatParser::RuleI64);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(478);
    match(WatParser::Integer);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- U32Context ------------------------------------------------------------------

WatParser::U32Context::U32Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::U32Context::Integer() {
  return getToken(WatParser::Integer, 0);
}


size_t WatParser::U32Context::getRuleIndex() const {
  return WatParser::RuleU32;
}


std::any WatParser::U32Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitU32(this);
  else
    return visitor->visitChildren(this);
}

WatParser::U32Context* WatParser::u32() {
  U32Context *_localctx = _tracker.createInstance<U32Context>(_ctx, getState());
  enterRule(_localctx, 46, WatParser::RuleU32);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(480);
    match(WatParser::Integer);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- U64Context ------------------------------------------------------------------

WatParser::U64Context::U64Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::U64Context::Integer() {
  return getToken(WatParser::Integer, 0);
}


size_t WatParser::U64Context::getRuleIndex() const {
  return WatParser::RuleU64;
}


std::any WatParser::U64Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitU64(this);
  else
    return visitor->visitChildren(this);
}

WatParser::U64Context* WatParser::u64() {
  U64Context *_localctx = _tracker.createInstance<U64Context>(_ctx, getState());
  enterRule(_localctx, 48, WatParser::RuleU64);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(482);
    match(WatParser::Integer);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- F32Context ------------------------------------------------------------------

WatParser::F32Context::F32Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::F32Context::Float() {
  return getToken(WatParser::Float, 0);
}


size_t WatParser::F32Context::getRuleIndex() const {
  return WatParser::RuleF32;
}


std::any WatParser::F32Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitF32(this);
  else
    return visitor->visitChildren(this);
}

WatParser::F32Context* WatParser::f32() {
  F32Context *_localctx = _tracker.createInstance<F32Context>(_ctx, getState());
  enterRule(_localctx, 50, WatParser::RuleF32);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(484);
    match(WatParser::Float);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- F64Context ------------------------------------------------------------------

WatParser::F64Context::F64Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::F64Context::Float() {
  return getToken(WatParser::Float, 0);
}


size_t WatParser::F64Context::getRuleIndex() const {
  return WatParser::RuleF64;
}


std::any WatParser::F64Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitF64(this);
  else
    return visitor->visitChildren(this);
}

WatParser::F64Context* WatParser::f64() {
  F64Context *_localctx = _tracker.createInstance<F64Context>(_ctx, getState());
  enterRule(_localctx, 52, WatParser::RuleF64);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(486);
    match(WatParser::Float);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValtypeContext ------------------------------------------------------------------

WatParser::ValtypeContext::ValtypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::ValtypeContext::NumType() {
  return getToken(WatParser::NumType, 0);
}

tree::TerminalNode* WatParser::ValtypeContext::RefType() {
  return getToken(WatParser::RefType, 0);
}


size_t WatParser::ValtypeContext::getRuleIndex() const {
  return WatParser::RuleValtype;
}


std::any WatParser::ValtypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitValtype(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ValtypeContext* WatParser::valtype() {
  ValtypeContext *_localctx = _tracker.createInstance<ValtypeContext>(_ctx, getState());
  enterRule(_localctx, 54, WatParser::RuleValtype);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(488);
    _la = _input->LA(1);
    if (!(_la == WatParser::NumType

    || _la == WatParser::RefType)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParamContext ------------------------------------------------------------------

WatParser::ParamContext::ParamContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::ParamContext::Id() {
  return getToken(WatParser::Id, 0);
}

std::vector<WatParser::ValtypeContext *> WatParser::ParamContext::valtype() {
  return getRuleContexts<WatParser::ValtypeContext>();
}

WatParser::ValtypeContext* WatParser::ParamContext::valtype(size_t i) {
  return getRuleContext<WatParser::ValtypeContext>(i);
}


size_t WatParser::ParamContext::getRuleIndex() const {
  return WatParser::RuleParam;
}


std::any WatParser::ParamContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitParam(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ParamContext* WatParser::param() {
  ParamContext *_localctx = _tracker.createInstance<ParamContext>(_ctx, getState());
  enterRule(_localctx, 56, WatParser::RuleParam);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(490);
    match(WatParser::T__0);
    setState(491);
    match(WatParser::T__17);
    setState(500);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::Id: {
        setState(492);
        match(WatParser::Id);
        setState(493);
        valtype();
        break;
      }

      case WatParser::T__2:
      case WatParser::NumType:
      case WatParser::RefType: {
        setState(497);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == WatParser::NumType

        || _la == WatParser::RefType) {
          setState(494);
          valtype();
          setState(499);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(502);
    match(WatParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResultContext ------------------------------------------------------------------

WatParser::ResultContext::ResultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<WatParser::ValtypeContext *> WatParser::ResultContext::valtype() {
  return getRuleContexts<WatParser::ValtypeContext>();
}

WatParser::ValtypeContext* WatParser::ResultContext::valtype(size_t i) {
  return getRuleContext<WatParser::ValtypeContext>(i);
}


size_t WatParser::ResultContext::getRuleIndex() const {
  return WatParser::RuleResult;
}


std::any WatParser::ResultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitResult(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ResultContext* WatParser::result() {
  ResultContext *_localctx = _tracker.createInstance<ResultContext>(_ctx, getState());
  enterRule(_localctx, 58, WatParser::RuleResult);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(504);
    match(WatParser::T__0);
    setState(505);
    match(WatParser::T__18);
    setState(509);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == WatParser::NumType

    || _la == WatParser::RefType) {
      setState(506);
      valtype();
      setState(511);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(512);
    match(WatParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctypeContext ------------------------------------------------------------------

WatParser::FunctypeContext::FunctypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<WatParser::ParamContext *> WatParser::FunctypeContext::param() {
  return getRuleContexts<WatParser::ParamContext>();
}

WatParser::ParamContext* WatParser::FunctypeContext::param(size_t i) {
  return getRuleContext<WatParser::ParamContext>(i);
}

std::vector<WatParser::ResultContext *> WatParser::FunctypeContext::result() {
  return getRuleContexts<WatParser::ResultContext>();
}

WatParser::ResultContext* WatParser::FunctypeContext::result(size_t i) {
  return getRuleContext<WatParser::ResultContext>(i);
}


size_t WatParser::FunctypeContext::getRuleIndex() const {
  return WatParser::RuleFunctype;
}


std::any WatParser::FunctypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitFunctype(this);
  else
    return visitor->visitChildren(this);
}

WatParser::FunctypeContext* WatParser::functype() {
  FunctypeContext *_localctx = _tracker.createInstance<FunctypeContext>(_ctx, getState());
  enterRule(_localctx, 60, WatParser::RuleFunctype);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(514);
    match(WatParser::T__0);
    setState(515);
    match(WatParser::T__4);
    setState(519);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(516);
        param(); 
      }
      setState(521);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx);
    }
    setState(525);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == WatParser::T__0) {
      setState(522);
      result();
      setState(527);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(528);
    match(WatParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LimitsContext ------------------------------------------------------------------

WatParser::LimitsContext::LimitsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<WatParser::U64Context *> WatParser::LimitsContext::u64() {
  return getRuleContexts<WatParser::U64Context>();
}

WatParser::U64Context* WatParser::LimitsContext::u64(size_t i) {
  return getRuleContext<WatParser::U64Context>(i);
}


size_t WatParser::LimitsContext::getRuleIndex() const {
  return WatParser::RuleLimits;
}


std::any WatParser::LimitsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitLimits(this);
  else
    return visitor->visitChildren(this);
}

WatParser::LimitsContext* WatParser::limits() {
  LimitsContext *_localctx = _tracker.createInstance<LimitsContext>(_ctx, getState());
  enterRule(_localctx, 62, WatParser::RuleLimits);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(530);
    u64();
    setState(532);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::Integer) {
      setState(531);
      u64();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MemtypeContext ------------------------------------------------------------------

WatParser::MemtypeContext::MemtypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::LimitsContext* WatParser::MemtypeContext::limits() {
  return getRuleContext<WatParser::LimitsContext>(0);
}


size_t WatParser::MemtypeContext::getRuleIndex() const {
  return WatParser::RuleMemtype;
}


std::any WatParser::MemtypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitMemtype(this);
  else
    return visitor->visitChildren(this);
}

WatParser::MemtypeContext* WatParser::memtype() {
  MemtypeContext *_localctx = _tracker.createInstance<MemtypeContext>(_ctx, getState());
  enterRule(_localctx, 64, WatParser::RuleMemtype);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(534);
    limits();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TabletypeContext ------------------------------------------------------------------

WatParser::TabletypeContext::TabletypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::LimitsContext* WatParser::TabletypeContext::limits() {
  return getRuleContext<WatParser::LimitsContext>(0);
}

tree::TerminalNode* WatParser::TabletypeContext::RefType() {
  return getToken(WatParser::RefType, 0);
}


size_t WatParser::TabletypeContext::getRuleIndex() const {
  return WatParser::RuleTabletype;
}


std::any WatParser::TabletypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitTabletype(this);
  else
    return visitor->visitChildren(this);
}

WatParser::TabletypeContext* WatParser::tabletype() {
  TabletypeContext *_localctx = _tracker.createInstance<TabletypeContext>(_ctx, getState());
  enterRule(_localctx, 66, WatParser::RuleTabletype);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(536);
    limits();
    setState(537);
    match(WatParser::RefType);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GlobaltypeContext ------------------------------------------------------------------

WatParser::GlobaltypeContext::GlobaltypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::ValtypeContext* WatParser::GlobaltypeContext::valtype() {
  return getRuleContext<WatParser::ValtypeContext>(0);
}


size_t WatParser::GlobaltypeContext::getRuleIndex() const {
  return WatParser::RuleGlobaltype;
}


std::any WatParser::GlobaltypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitGlobaltype(this);
  else
    return visitor->visitChildren(this);
}

WatParser::GlobaltypeContext* WatParser::globaltype() {
  GlobaltypeContext *_localctx = _tracker.createInstance<GlobaltypeContext>(_ctx, getState());
  enterRule(_localctx, 68, WatParser::RuleGlobaltype);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(545);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::NumType:
      case WatParser::RefType: {
        enterOuterAlt(_localctx, 1);
        setState(539);
        valtype();
        break;
      }

      case WatParser::T__0: {
        enterOuterAlt(_localctx, 2);
        setState(540);
        match(WatParser::T__0);
        setState(541);
        match(WatParser::T__19);
        setState(542);
        valtype();
        setState(543);
        match(WatParser::T__2);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeidxContext ------------------------------------------------------------------

WatParser::TypeidxContext::TypeidxContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::U32Context* WatParser::TypeidxContext::u32() {
  return getRuleContext<WatParser::U32Context>(0);
}

tree::TerminalNode* WatParser::TypeidxContext::Id() {
  return getToken(WatParser::Id, 0);
}


size_t WatParser::TypeidxContext::getRuleIndex() const {
  return WatParser::RuleTypeidx;
}


std::any WatParser::TypeidxContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitTypeidx(this);
  else
    return visitor->visitChildren(this);
}

WatParser::TypeidxContext* WatParser::typeidx() {
  TypeidxContext *_localctx = _tracker.createInstance<TypeidxContext>(_ctx, getState());
  enterRule(_localctx, 70, WatParser::RuleTypeidx);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(549);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::Integer: {
        enterOuterAlt(_localctx, 1);
        setState(547);
        u32();
        break;
      }

      case WatParser::Id: {
        enterOuterAlt(_localctx, 2);
        setState(548);
        match(WatParser::Id);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FuncidxContext ------------------------------------------------------------------

WatParser::FuncidxContext::FuncidxContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::U32Context* WatParser::FuncidxContext::u32() {
  return getRuleContext<WatParser::U32Context>(0);
}

tree::TerminalNode* WatParser::FuncidxContext::Id() {
  return getToken(WatParser::Id, 0);
}


size_t WatParser::FuncidxContext::getRuleIndex() const {
  return WatParser::RuleFuncidx;
}


std::any WatParser::FuncidxContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitFuncidx(this);
  else
    return visitor->visitChildren(this);
}

WatParser::FuncidxContext* WatParser::funcidx() {
  FuncidxContext *_localctx = _tracker.createInstance<FuncidxContext>(_ctx, getState());
  enterRule(_localctx, 72, WatParser::RuleFuncidx);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(553);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::Integer: {
        enterOuterAlt(_localctx, 1);
        setState(551);
        u32();
        break;
      }

      case WatParser::Id: {
        enterOuterAlt(_localctx, 2);
        setState(552);
        match(WatParser::Id);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableidxContext ------------------------------------------------------------------

WatParser::TableidxContext::TableidxContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::U32Context* WatParser::TableidxContext::u32() {
  return getRuleContext<WatParser::U32Context>(0);
}

tree::TerminalNode* WatParser::TableidxContext::Id() {
  return getToken(WatParser::Id, 0);
}


size_t WatParser::TableidxContext::getRuleIndex() const {
  return WatParser::RuleTableidx;
}


std::any WatParser::TableidxContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitTableidx(this);
  else
    return visitor->visitChildren(this);
}

WatParser::TableidxContext* WatParser::tableidx() {
  TableidxContext *_localctx = _tracker.createInstance<TableidxContext>(_ctx, getState());
  enterRule(_localctx, 74, WatParser::RuleTableidx);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(557);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::Integer: {
        enterOuterAlt(_localctx, 1);
        setState(555);
        u32();
        break;
      }

      case WatParser::Id: {
        enterOuterAlt(_localctx, 2);
        setState(556);
        match(WatParser::Id);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MemidxContext ------------------------------------------------------------------

WatParser::MemidxContext::MemidxContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::U32Context* WatParser::MemidxContext::u32() {
  return getRuleContext<WatParser::U32Context>(0);
}

tree::TerminalNode* WatParser::MemidxContext::Id() {
  return getToken(WatParser::Id, 0);
}


size_t WatParser::MemidxContext::getRuleIndex() const {
  return WatParser::RuleMemidx;
}


std::any WatParser::MemidxContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitMemidx(this);
  else
    return visitor->visitChildren(this);
}

WatParser::MemidxContext* WatParser::memidx() {
  MemidxContext *_localctx = _tracker.createInstance<MemidxContext>(_ctx, getState());
  enterRule(_localctx, 76, WatParser::RuleMemidx);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(561);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::Integer: {
        enterOuterAlt(_localctx, 1);
        setState(559);
        u32();
        break;
      }

      case WatParser::Id: {
        enterOuterAlt(_localctx, 2);
        setState(560);
        match(WatParser::Id);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GlobalidxContext ------------------------------------------------------------------

WatParser::GlobalidxContext::GlobalidxContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::U32Context* WatParser::GlobalidxContext::u32() {
  return getRuleContext<WatParser::U32Context>(0);
}

tree::TerminalNode* WatParser::GlobalidxContext::Id() {
  return getToken(WatParser::Id, 0);
}


size_t WatParser::GlobalidxContext::getRuleIndex() const {
  return WatParser::RuleGlobalidx;
}


std::any WatParser::GlobalidxContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitGlobalidx(this);
  else
    return visitor->visitChildren(this);
}

WatParser::GlobalidxContext* WatParser::globalidx() {
  GlobalidxContext *_localctx = _tracker.createInstance<GlobalidxContext>(_ctx, getState());
  enterRule(_localctx, 78, WatParser::RuleGlobalidx);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(565);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::Integer: {
        enterOuterAlt(_localctx, 1);
        setState(563);
        u32();
        break;
      }

      case WatParser::Id: {
        enterOuterAlt(_localctx, 2);
        setState(564);
        match(WatParser::Id);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElemidxContext ------------------------------------------------------------------

WatParser::ElemidxContext::ElemidxContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::U32Context* WatParser::ElemidxContext::u32() {
  return getRuleContext<WatParser::U32Context>(0);
}

tree::TerminalNode* WatParser::ElemidxContext::Id() {
  return getToken(WatParser::Id, 0);
}


size_t WatParser::ElemidxContext::getRuleIndex() const {
  return WatParser::RuleElemidx;
}


std::any WatParser::ElemidxContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitElemidx(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ElemidxContext* WatParser::elemidx() {
  ElemidxContext *_localctx = _tracker.createInstance<ElemidxContext>(_ctx, getState());
  enterRule(_localctx, 80, WatParser::RuleElemidx);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(569);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::Integer: {
        enterOuterAlt(_localctx, 1);
        setState(567);
        u32();
        break;
      }

      case WatParser::Id: {
        enterOuterAlt(_localctx, 2);
        setState(568);
        match(WatParser::Id);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataidxContext ------------------------------------------------------------------

WatParser::DataidxContext::DataidxContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::U32Context* WatParser::DataidxContext::u32() {
  return getRuleContext<WatParser::U32Context>(0);
}

tree::TerminalNode* WatParser::DataidxContext::Id() {
  return getToken(WatParser::Id, 0);
}


size_t WatParser::DataidxContext::getRuleIndex() const {
  return WatParser::RuleDataidx;
}


std::any WatParser::DataidxContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitDataidx(this);
  else
    return visitor->visitChildren(this);
}

WatParser::DataidxContext* WatParser::dataidx() {
  DataidxContext *_localctx = _tracker.createInstance<DataidxContext>(_ctx, getState());
  enterRule(_localctx, 82, WatParser::RuleDataidx);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(573);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::Integer: {
        enterOuterAlt(_localctx, 1);
        setState(571);
        u32();
        break;
      }

      case WatParser::Id: {
        enterOuterAlt(_localctx, 2);
        setState(572);
        match(WatParser::Id);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocalidxContext ------------------------------------------------------------------

WatParser::LocalidxContext::LocalidxContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::U32Context* WatParser::LocalidxContext::u32() {
  return getRuleContext<WatParser::U32Context>(0);
}

tree::TerminalNode* WatParser::LocalidxContext::Id() {
  return getToken(WatParser::Id, 0);
}


size_t WatParser::LocalidxContext::getRuleIndex() const {
  return WatParser::RuleLocalidx;
}


std::any WatParser::LocalidxContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitLocalidx(this);
  else
    return visitor->visitChildren(this);
}

WatParser::LocalidxContext* WatParser::localidx() {
  LocalidxContext *_localctx = _tracker.createInstance<LocalidxContext>(_ctx, getState());
  enterRule(_localctx, 84, WatParser::RuleLocalidx);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(577);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::Integer: {
        enterOuterAlt(_localctx, 1);
        setState(575);
        u32();
        break;
      }

      case WatParser::Id: {
        enterOuterAlt(_localctx, 2);
        setState(576);
        match(WatParser::Id);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelidxContext ------------------------------------------------------------------

WatParser::LabelidxContext::LabelidxContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::U32Context* WatParser::LabelidxContext::u32() {
  return getRuleContext<WatParser::U32Context>(0);
}

tree::TerminalNode* WatParser::LabelidxContext::Id() {
  return getToken(WatParser::Id, 0);
}


size_t WatParser::LabelidxContext::getRuleIndex() const {
  return WatParser::RuleLabelidx;
}


std::any WatParser::LabelidxContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitLabelidx(this);
  else
    return visitor->visitChildren(this);
}

WatParser::LabelidxContext* WatParser::labelidx() {
  LabelidxContext *_localctx = _tracker.createInstance<LabelidxContext>(_ctx, getState());
  enterRule(_localctx, 86, WatParser::RuleLabelidx);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(581);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::Integer: {
        enterOuterAlt(_localctx, 1);
        setState(579);
        u32();
        break;
      }

      case WatParser::Id: {
        enterOuterAlt(_localctx, 2);
        setState(580);
        match(WatParser::Id);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeuseContext ------------------------------------------------------------------

WatParser::TypeuseContext::TypeuseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::TypeidxContext* WatParser::TypeuseContext::typeidx() {
  return getRuleContext<WatParser::TypeidxContext>(0);
}

std::vector<WatParser::ParamContext *> WatParser::TypeuseContext::param() {
  return getRuleContexts<WatParser::ParamContext>();
}

WatParser::ParamContext* WatParser::TypeuseContext::param(size_t i) {
  return getRuleContext<WatParser::ParamContext>(i);
}

std::vector<WatParser::ResultContext *> WatParser::TypeuseContext::result() {
  return getRuleContexts<WatParser::ResultContext>();
}

WatParser::ResultContext* WatParser::TypeuseContext::result(size_t i) {
  return getRuleContext<WatParser::ResultContext>(i);
}


size_t WatParser::TypeuseContext::getRuleIndex() const {
  return WatParser::RuleTypeuse;
}


std::any WatParser::TypeuseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitTypeuse(this);
  else
    return visitor->visitChildren(this);
}

WatParser::TypeuseContext* WatParser::typeuse() {
  TypeuseContext *_localctx = _tracker.createInstance<TypeuseContext>(_ctx, getState());
  enterRule(_localctx, 88, WatParser::RuleTypeuse);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(588);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx)) {
    case 1: {
      setState(583);
      match(WatParser::T__0);
      setState(584);
      match(WatParser::T__3);
      setState(585);
      typeidx();
      setState(586);
      match(WatParser::T__2);
      break;
    }

    default:
      break;
    }
    setState(593);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(590);
        param(); 
      }
      setState(595);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx);
    }
    setState(599);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(596);
        result(); 
      }
      setState(601);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InstrContext ------------------------------------------------------------------

WatParser::InstrContext::InstrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::PlaininstrContext* WatParser::InstrContext::plaininstr() {
  return getRuleContext<WatParser::PlaininstrContext>(0);
}

WatParser::BlockinstrContext* WatParser::InstrContext::blockinstr() {
  return getRuleContext<WatParser::BlockinstrContext>(0);
}

WatParser::FoldedinstrContext* WatParser::InstrContext::foldedinstr() {
  return getRuleContext<WatParser::FoldedinstrContext>(0);
}


size_t WatParser::InstrContext::getRuleIndex() const {
  return WatParser::RuleInstr;
}


std::any WatParser::InstrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitInstr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::InstrContext* WatParser::instr() {
  InstrContext *_localctx = _tracker.createInstance<InstrContext>(_ctx, getState());
  enterRule(_localctx, 90, WatParser::RuleInstr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(605);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::T__26:
      case WatParser::T__27:
      case WatParser::T__28:
      case WatParser::T__29:
      case WatParser::T__30:
      case WatParser::T__31:
      case WatParser::T__32:
      case WatParser::T__33:
      case WatParser::T__34:
      case WatParser::T__35:
      case WatParser::T__36:
      case WatParser::T__37:
      case WatParser::T__38:
      case WatParser::T__39:
      case WatParser::T__40:
      case WatParser::T__41:
      case WatParser::T__42:
      case WatParser::T__43:
      case WatParser::T__44:
      case WatParser::T__45:
      case WatParser::T__46:
      case WatParser::T__47:
      case WatParser::T__48:
      case WatParser::T__49:
      case WatParser::T__50:
      case WatParser::T__51:
      case WatParser::T__52:
      case WatParser::T__53:
      case WatParser::T__54:
      case WatParser::T__55:
      case WatParser::T__56:
      case WatParser::T__57:
      case WatParser::T__58:
      case WatParser::T__59:
      case WatParser::T__60:
      case WatParser::T__61:
      case WatParser::T__62:
      case WatParser::T__63:
      case WatParser::T__64:
      case WatParser::T__65:
      case WatParser::T__66:
      case WatParser::T__67:
      case WatParser::T__68:
      case WatParser::T__69:
      case WatParser::T__70:
      case WatParser::T__71:
      case WatParser::T__72:
      case WatParser::T__73:
      case WatParser::T__74:
      case WatParser::T__75:
      case WatParser::T__76:
      case WatParser::T__77:
      case WatParser::T__78:
      case WatParser::T__79:
      case WatParser::T__80:
      case WatParser::T__81:
      case WatParser::T__82:
      case WatParser::T__83:
      case WatParser::T__84:
      case WatParser::T__85:
      case WatParser::T__86:
      case WatParser::T__87:
      case WatParser::T__88:
      case WatParser::T__89:
      case WatParser::T__90:
      case WatParser::T__91:
      case WatParser::T__92:
      case WatParser::T__93:
      case WatParser::T__94:
      case WatParser::T__95:
      case WatParser::T__96:
      case WatParser::T__97:
      case WatParser::T__98:
      case WatParser::T__99:
      case WatParser::T__100:
      case WatParser::T__101:
      case WatParser::T__102:
      case WatParser::T__103:
      case WatParser::T__104:
      case WatParser::T__105:
      case WatParser::T__106:
      case WatParser::T__107:
      case WatParser::T__108:
      case WatParser::T__109:
      case WatParser::T__110:
      case WatParser::T__111:
      case WatParser::T__112:
      case WatParser::T__113:
      case WatParser::T__114:
      case WatParser::T__115:
      case WatParser::T__116:
      case WatParser::T__117:
      case WatParser::T__118:
      case WatParser::T__119:
      case WatParser::T__120:
      case WatParser::T__121:
      case WatParser::T__122:
      case WatParser::T__123:
      case WatParser::T__124:
      case WatParser::T__125:
      case WatParser::T__126:
      case WatParser::T__127:
      case WatParser::T__128:
      case WatParser::T__129:
      case WatParser::T__130:
      case WatParser::T__131:
      case WatParser::T__132:
      case WatParser::T__133:
      case WatParser::T__134:
      case WatParser::T__135:
      case WatParser::T__136:
      case WatParser::T__137:
      case WatParser::T__138:
      case WatParser::T__139:
      case WatParser::T__140:
      case WatParser::T__141:
      case WatParser::T__142:
      case WatParser::T__143:
      case WatParser::T__144:
      case WatParser::T__145:
      case WatParser::T__146:
      case WatParser::T__147:
      case WatParser::T__148:
      case WatParser::T__149:
      case WatParser::T__150:
      case WatParser::T__151:
      case WatParser::T__152:
      case WatParser::T__153:
      case WatParser::T__154:
      case WatParser::T__155:
      case WatParser::T__156:
      case WatParser::T__157:
      case WatParser::T__158:
      case WatParser::T__159:
      case WatParser::T__160:
      case WatParser::T__161:
      case WatParser::T__162:
      case WatParser::T__163:
      case WatParser::T__164:
      case WatParser::T__165:
      case WatParser::T__166:
      case WatParser::T__167:
      case WatParser::T__168:
      case WatParser::T__169:
      case WatParser::T__170:
      case WatParser::T__171:
      case WatParser::T__172:
      case WatParser::T__173:
      case WatParser::T__174:
      case WatParser::T__175:
      case WatParser::T__176:
      case WatParser::T__177:
      case WatParser::T__178:
      case WatParser::T__179:
      case WatParser::T__180:
      case WatParser::T__181:
      case WatParser::T__182:
      case WatParser::T__183:
      case WatParser::T__184:
      case WatParser::T__185:
      case WatParser::T__186:
      case WatParser::T__187:
      case WatParser::T__188:
      case WatParser::T__189:
      case WatParser::T__190:
      case WatParser::T__191:
      case WatParser::T__192:
      case WatParser::T__193:
      case WatParser::T__194:
      case WatParser::T__195:
      case WatParser::T__196:
      case WatParser::T__197:
      case WatParser::T__198:
      case WatParser::T__199:
      case WatParser::T__200:
      case WatParser::T__201:
      case WatParser::T__202:
      case WatParser::T__203:
      case WatParser::T__204:
      case WatParser::T__205:
      case WatParser::T__206:
      case WatParser::T__207:
      case WatParser::T__208:
      case WatParser::T__209:
      case WatParser::T__210:
      case WatParser::T__211:
      case WatParser::T__212:
      case WatParser::T__213:
      case WatParser::T__214:
      case WatParser::T__215:
      case WatParser::T__216:
      case WatParser::T__217:
      case WatParser::T__218:
      case WatParser::RefNull: {
        enterOuterAlt(_localctx, 1);
        setState(602);
        plaininstr();
        break;
      }

      case WatParser::T__20:
      case WatParser::T__22:
      case WatParser::T__23: {
        enterOuterAlt(_localctx, 2);
        setState(603);
        blockinstr();
        break;
      }

      case WatParser::T__0: {
        enterOuterAlt(_localctx, 3);
        setState(604);
        foldedinstr();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelContext ------------------------------------------------------------------

WatParser::LabelContext::LabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::LabelContext::Id() {
  return getToken(WatParser::Id, 0);
}


size_t WatParser::LabelContext::getRuleIndex() const {
  return WatParser::RuleLabel;
}


std::any WatParser::LabelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitLabel(this);
  else
    return visitor->visitChildren(this);
}

WatParser::LabelContext* WatParser::label() {
  LabelContext *_localctx = _tracker.createInstance<LabelContext>(_ctx, getState());
  enterRule(_localctx, 92, WatParser::RuleLabel);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(608);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::Id) {
      setState(607);
      match(WatParser::Id);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElseinstrContext ------------------------------------------------------------------

WatParser::ElseinstrContext::ElseinstrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::InstrContext* WatParser::ElseinstrContext::instr() {
  return getRuleContext<WatParser::InstrContext>(0);
}


size_t WatParser::ElseinstrContext::getRuleIndex() const {
  return WatParser::RuleElseinstr;
}


std::any WatParser::ElseinstrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitElseinstr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ElseinstrContext* WatParser::elseinstr() {
  ElseinstrContext *_localctx = _tracker.createInstance<ElseinstrContext>(_ctx, getState());
  enterRule(_localctx, 94, WatParser::RuleElseinstr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(610);
    instr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockinstrContext ------------------------------------------------------------------

WatParser::BlockinstrContext::BlockinstrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::LabelContext* WatParser::BlockinstrContext::label() {
  return getRuleContext<WatParser::LabelContext>(0);
}

WatParser::TypeuseContext* WatParser::BlockinstrContext::typeuse() {
  return getRuleContext<WatParser::TypeuseContext>(0);
}

std::vector<WatParser::InstrContext *> WatParser::BlockinstrContext::instr() {
  return getRuleContexts<WatParser::InstrContext>();
}

WatParser::InstrContext* WatParser::BlockinstrContext::instr(size_t i) {
  return getRuleContext<WatParser::InstrContext>(i);
}

std::vector<tree::TerminalNode *> WatParser::BlockinstrContext::Id() {
  return getTokens(WatParser::Id);
}

tree::TerminalNode* WatParser::BlockinstrContext::Id(size_t i) {
  return getToken(WatParser::Id, i);
}

std::vector<WatParser::ElseinstrContext *> WatParser::BlockinstrContext::elseinstr() {
  return getRuleContexts<WatParser::ElseinstrContext>();
}

WatParser::ElseinstrContext* WatParser::BlockinstrContext::elseinstr(size_t i) {
  return getRuleContext<WatParser::ElseinstrContext>(i);
}


size_t WatParser::BlockinstrContext::getRuleIndex() const {
  return WatParser::RuleBlockinstr;
}


std::any WatParser::BlockinstrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitBlockinstr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::BlockinstrContext* WatParser::blockinstr() {
  BlockinstrContext *_localctx = _tracker.createInstance<BlockinstrContext>(_ctx, getState());
  enterRule(_localctx, 96, WatParser::RuleBlockinstr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(663);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::T__20: {
        enterOuterAlt(_localctx, 1);
        setState(612);
        match(WatParser::T__20);
        setState(613);
        label();
        setState(614);
        typeuse();
        setState(618);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -106954750) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & -1) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 128)) & -1) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 192)) & 137707388927) != 0)) {
          setState(615);
          instr();
          setState(620);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(621);
        match(WatParser::T__21);
        setState(623);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Id) {
          setState(622);
          match(WatParser::Id);
        }
        break;
      }

      case WatParser::T__22: {
        enterOuterAlt(_localctx, 2);
        setState(625);
        match(WatParser::T__22);
        setState(626);
        label();
        setState(627);
        typeuse();
        setState(631);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -106954750) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & -1) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 128)) & -1) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 192)) & 137707388927) != 0)) {
          setState(628);
          instr();
          setState(633);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(634);
        match(WatParser::T__21);
        setState(636);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Id) {
          setState(635);
          match(WatParser::Id);
        }
        break;
      }

      case WatParser::T__23: {
        enterOuterAlt(_localctx, 3);
        setState(638);
        match(WatParser::T__23);
        setState(639);
        label();
        setState(640);
        typeuse();
        setState(644);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -106954750) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & -1) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 128)) & -1) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 192)) & 137707388927) != 0)) {
          setState(641);
          instr();
          setState(646);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(657);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::T__24) {
          setState(647);
          match(WatParser::T__24);
          setState(649);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == WatParser::Id) {
            setState(648);
            match(WatParser::Id);
          }
          setState(654);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & -106954750) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 64)) & -1) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 128)) & -1) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 192)) & 137707388927) != 0)) {
            setState(651);
            elseinstr();
            setState(656);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(659);
        match(WatParser::T__21);
        setState(661);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Id) {
          setState(660);
          match(WatParser::Id);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FoldedinstrContext ------------------------------------------------------------------

WatParser::FoldedinstrContext::FoldedinstrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::PlaininstrContext* WatParser::FoldedinstrContext::plaininstr() {
  return getRuleContext<WatParser::PlaininstrContext>(0);
}

std::vector<WatParser::FoldedinstrContext *> WatParser::FoldedinstrContext::foldedinstr() {
  return getRuleContexts<WatParser::FoldedinstrContext>();
}

WatParser::FoldedinstrContext* WatParser::FoldedinstrContext::foldedinstr(size_t i) {
  return getRuleContext<WatParser::FoldedinstrContext>(i);
}

WatParser::LabelContext* WatParser::FoldedinstrContext::label() {
  return getRuleContext<WatParser::LabelContext>(0);
}

WatParser::TypeuseContext* WatParser::FoldedinstrContext::typeuse() {
  return getRuleContext<WatParser::TypeuseContext>(0);
}

std::vector<WatParser::InstrContext *> WatParser::FoldedinstrContext::instr() {
  return getRuleContexts<WatParser::InstrContext>();
}

WatParser::InstrContext* WatParser::FoldedinstrContext::instr(size_t i) {
  return getRuleContext<WatParser::InstrContext>(i);
}

std::vector<WatParser::ElseinstrContext *> WatParser::FoldedinstrContext::elseinstr() {
  return getRuleContexts<WatParser::ElseinstrContext>();
}

WatParser::ElseinstrContext* WatParser::FoldedinstrContext::elseinstr(size_t i) {
  return getRuleContext<WatParser::ElseinstrContext>(i);
}


size_t WatParser::FoldedinstrContext::getRuleIndex() const {
  return WatParser::RuleFoldedinstr;
}


std::any WatParser::FoldedinstrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitFoldedinstr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::FoldedinstrContext* WatParser::foldedinstr() {
  FoldedinstrContext *_localctx = _tracker.createInstance<FoldedinstrContext>(_ctx, getState());
  enterRule(_localctx, 98, WatParser::RuleFoldedinstr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(731);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(665);
      match(WatParser::T__0);
      setState(666);
      plaininstr();
      setState(670);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::T__0) {
        setState(667);
        foldedinstr();
        setState(672);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(673);
      match(WatParser::T__2);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(675);
      match(WatParser::T__0);
      setState(676);
      match(WatParser::T__20);
      setState(677);
      label();
      setState(678);
      typeuse();
      setState(682);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -106954750) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & -1) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & -1) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 192)) & 137707388927) != 0)) {
        setState(679);
        instr();
        setState(684);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(685);
      match(WatParser::T__2);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(687);
      match(WatParser::T__0);
      setState(688);
      match(WatParser::T__22);
      setState(689);
      label();
      setState(690);
      typeuse();
      setState(694);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -106954750) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & -1) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & -1) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 192)) & 137707388927) != 0)) {
        setState(691);
        instr();
        setState(696);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(697);
      match(WatParser::T__2);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(699);
      match(WatParser::T__0);
      setState(700);
      match(WatParser::T__23);
      setState(701);
      label();
      setState(702);
      typeuse();
      setState(706);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 86, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(703);
          foldedinstr(); 
        }
        setState(708);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 86, _ctx);
      }
      setState(709);
      match(WatParser::T__0);
      setState(710);
      match(WatParser::T__25);
      setState(714);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -106954750) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & -1) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & -1) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 192)) & 137707388927) != 0)) {
        setState(711);
        instr();
        setState(716);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(717);
      match(WatParser::T__2);
      setState(727);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::T__0) {
        setState(718);
        match(WatParser::T__0);
        setState(719);
        match(WatParser::T__24);
        setState(723);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -106954750) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & -1) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 128)) & -1) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 192)) & 137707388927) != 0)) {
          setState(720);
          elseinstr();
          setState(725);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(726);
        match(WatParser::T__2);
      }
      setState(729);
      match(WatParser::T__2);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstexprContext ------------------------------------------------------------------

WatParser::ConstexprContext::ConstexprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::I32Context* WatParser::ConstexprContext::i32() {
  return getRuleContext<WatParser::I32Context>(0);
}

WatParser::I64Context* WatParser::ConstexprContext::i64() {
  return getRuleContext<WatParser::I64Context>(0);
}

WatParser::F32Context* WatParser::ConstexprContext::f32() {
  return getRuleContext<WatParser::F32Context>(0);
}

WatParser::F64Context* WatParser::ConstexprContext::f64() {
  return getRuleContext<WatParser::F64Context>(0);
}

tree::TerminalNode* WatParser::ConstexprContext::RefNull() {
  return getToken(WatParser::RefNull, 0);
}

WatParser::FuncidxContext* WatParser::ConstexprContext::funcidx() {
  return getRuleContext<WatParser::FuncidxContext>(0);
}

WatParser::GlobalidxContext* WatParser::ConstexprContext::globalidx() {
  return getRuleContext<WatParser::GlobalidxContext>(0);
}


size_t WatParser::ConstexprContext::getRuleIndex() const {
  return WatParser::RuleConstexpr;
}


std::any WatParser::ConstexprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitConstexpr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ConstexprContext* WatParser::constexpr_() {
  ConstexprContext *_localctx = _tracker.createInstance<ConstexprContext>(_ctx, getState());
  enterRule(_localctx, 100, WatParser::RuleConstexpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(746);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::T__26: {
        enterOuterAlt(_localctx, 1);
        setState(733);
        match(WatParser::T__26);
        setState(734);
        i32();
        break;
      }

      case WatParser::T__27: {
        enterOuterAlt(_localctx, 2);
        setState(735);
        match(WatParser::T__27);
        setState(736);
        i64();
        break;
      }

      case WatParser::T__28: {
        enterOuterAlt(_localctx, 3);
        setState(737);
        match(WatParser::T__28);
        setState(738);
        f32();
        break;
      }

      case WatParser::T__29: {
        enterOuterAlt(_localctx, 4);
        setState(739);
        match(WatParser::T__29);
        setState(740);
        f64();
        break;
      }

      case WatParser::RefNull: {
        enterOuterAlt(_localctx, 5);
        setState(741);
        match(WatParser::RefNull);
        break;
      }

      case WatParser::T__30: {
        enterOuterAlt(_localctx, 6);
        setState(742);
        match(WatParser::T__30);
        setState(743);
        funcidx();
        break;
      }

      case WatParser::T__31: {
        enterOuterAlt(_localctx, 7);
        setState(744);
        match(WatParser::T__31);
        setState(745);
        globalidx();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PlaininstrContext ------------------------------------------------------------------

WatParser::PlaininstrContext::PlaininstrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::ControlinstrContext* WatParser::PlaininstrContext::controlinstr() {
  return getRuleContext<WatParser::ControlinstrContext>(0);
}

WatParser::ReferenceinstrContext* WatParser::PlaininstrContext::referenceinstr() {
  return getRuleContext<WatParser::ReferenceinstrContext>(0);
}

WatParser::ParametricinstrContext* WatParser::PlaininstrContext::parametricinstr() {
  return getRuleContext<WatParser::ParametricinstrContext>(0);
}

WatParser::VariableinstrContext* WatParser::PlaininstrContext::variableinstr() {
  return getRuleContext<WatParser::VariableinstrContext>(0);
}

WatParser::TableinstrContext* WatParser::PlaininstrContext::tableinstr() {
  return getRuleContext<WatParser::TableinstrContext>(0);
}

WatParser::MemoryinstrContext* WatParser::PlaininstrContext::memoryinstr() {
  return getRuleContext<WatParser::MemoryinstrContext>(0);
}

WatParser::NumericinstrContext* WatParser::PlaininstrContext::numericinstr() {
  return getRuleContext<WatParser::NumericinstrContext>(0);
}


size_t WatParser::PlaininstrContext::getRuleIndex() const {
  return WatParser::RulePlaininstr;
}


std::any WatParser::PlaininstrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitPlaininstr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::PlaininstrContext* WatParser::plaininstr() {
  PlaininstrContext *_localctx = _tracker.createInstance<PlaininstrContext>(_ctx, getState());
  enterRule(_localctx, 102, WatParser::RulePlaininstr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(755);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::T__32:
      case WatParser::T__33:
      case WatParser::T__34:
      case WatParser::T__35:
      case WatParser::T__36:
      case WatParser::T__37:
      case WatParser::T__38:
      case WatParser::T__39: {
        enterOuterAlt(_localctx, 1);
        setState(748);
        controlinstr();
        break;
      }

      case WatParser::T__30:
      case WatParser::T__40:
      case WatParser::RefNull: {
        enterOuterAlt(_localctx, 2);
        setState(749);
        referenceinstr();
        break;
      }

      case WatParser::T__41:
      case WatParser::T__42: {
        enterOuterAlt(_localctx, 3);
        setState(750);
        parametricinstr();
        break;
      }

      case WatParser::T__31:
      case WatParser::T__43:
      case WatParser::T__44:
      case WatParser::T__45:
      case WatParser::T__46: {
        enterOuterAlt(_localctx, 4);
        setState(751);
        variableinstr();
        break;
      }

      case WatParser::T__47:
      case WatParser::T__48:
      case WatParser::T__49:
      case WatParser::T__50:
      case WatParser::T__51:
      case WatParser::T__52:
      case WatParser::T__53:
      case WatParser::T__54: {
        enterOuterAlt(_localctx, 5);
        setState(752);
        tableinstr();
        break;
      }

      case WatParser::T__55:
      case WatParser::T__56:
      case WatParser::T__57:
      case WatParser::T__58:
      case WatParser::T__59:
      case WatParser::T__60:
      case WatParser::T__61:
      case WatParser::T__62:
      case WatParser::T__63:
      case WatParser::T__64:
      case WatParser::T__65:
      case WatParser::T__66:
      case WatParser::T__67:
      case WatParser::T__68:
      case WatParser::T__69:
      case WatParser::T__70:
      case WatParser::T__71:
      case WatParser::T__72:
      case WatParser::T__73:
      case WatParser::T__74:
      case WatParser::T__75:
      case WatParser::T__76:
      case WatParser::T__77:
      case WatParser::T__78:
      case WatParser::T__79:
      case WatParser::T__80:
      case WatParser::T__81:
      case WatParser::T__82:
      case WatParser::T__83: {
        enterOuterAlt(_localctx, 6);
        setState(753);
        memoryinstr();
        break;
      }

      case WatParser::T__26:
      case WatParser::T__27:
      case WatParser::T__28:
      case WatParser::T__29:
      case WatParser::T__84:
      case WatParser::T__85:
      case WatParser::T__86:
      case WatParser::T__87:
      case WatParser::T__88:
      case WatParser::T__89:
      case WatParser::T__90:
      case WatParser::T__91:
      case WatParser::T__92:
      case WatParser::T__93:
      case WatParser::T__94:
      case WatParser::T__95:
      case WatParser::T__96:
      case WatParser::T__97:
      case WatParser::T__98:
      case WatParser::T__99:
      case WatParser::T__100:
      case WatParser::T__101:
      case WatParser::T__102:
      case WatParser::T__103:
      case WatParser::T__104:
      case WatParser::T__105:
      case WatParser::T__106:
      case WatParser::T__107:
      case WatParser::T__108:
      case WatParser::T__109:
      case WatParser::T__110:
      case WatParser::T__111:
      case WatParser::T__112:
      case WatParser::T__113:
      case WatParser::T__114:
      case WatParser::T__115:
      case WatParser::T__116:
      case WatParser::T__117:
      case WatParser::T__118:
      case WatParser::T__119:
      case WatParser::T__120:
      case WatParser::T__121:
      case WatParser::T__122:
      case WatParser::T__123:
      case WatParser::T__124:
      case WatParser::T__125:
      case WatParser::T__126:
      case WatParser::T__127:
      case WatParser::T__128:
      case WatParser::T__129:
      case WatParser::T__130:
      case WatParser::T__131:
      case WatParser::T__132:
      case WatParser::T__133:
      case WatParser::T__134:
      case WatParser::T__135:
      case WatParser::T__136:
      case WatParser::T__137:
      case WatParser::T__138:
      case WatParser::T__139:
      case WatParser::T__140:
      case WatParser::T__141:
      case WatParser::T__142:
      case WatParser::T__143:
      case WatParser::T__144:
      case WatParser::T__145:
      case WatParser::T__146:
      case WatParser::T__147:
      case WatParser::T__148:
      case WatParser::T__149:
      case WatParser::T__150:
      case WatParser::T__151:
      case WatParser::T__152:
      case WatParser::T__153:
      case WatParser::T__154:
      case WatParser::T__155:
      case WatParser::T__156:
      case WatParser::T__157:
      case WatParser::T__158:
      case WatParser::T__159:
      case WatParser::T__160:
      case WatParser::T__161:
      case WatParser::T__162:
      case WatParser::T__163:
      case WatParser::T__164:
      case WatParser::T__165:
      case WatParser::T__166:
      case WatParser::T__167:
      case WatParser::T__168:
      case WatParser::T__169:
      case WatParser::T__170:
      case WatParser::T__171:
      case WatParser::T__172:
      case WatParser::T__173:
      case WatParser::T__174:
      case WatParser::T__175:
      case WatParser::T__176:
      case WatParser::T__177:
      case WatParser::T__178:
      case WatParser::T__179:
      case WatParser::T__180:
      case WatParser::T__181:
      case WatParser::T__182:
      case WatParser::T__183:
      case WatParser::T__184:
      case WatParser::T__185:
      case WatParser::T__186:
      case WatParser::T__187:
      case WatParser::T__188:
      case WatParser::T__189:
      case WatParser::T__190:
      case WatParser::T__191:
      case WatParser::T__192:
      case WatParser::T__193:
      case WatParser::T__194:
      case WatParser::T__195:
      case WatParser::T__196:
      case WatParser::T__197:
      case WatParser::T__198:
      case WatParser::T__199:
      case WatParser::T__200:
      case WatParser::T__201:
      case WatParser::T__202:
      case WatParser::T__203:
      case WatParser::T__204:
      case WatParser::T__205:
      case WatParser::T__206:
      case WatParser::T__207:
      case WatParser::T__208:
      case WatParser::T__209:
      case WatParser::T__210:
      case WatParser::T__211:
      case WatParser::T__212:
      case WatParser::T__213:
      case WatParser::T__214:
      case WatParser::T__215:
      case WatParser::T__216:
      case WatParser::T__217:
      case WatParser::T__218: {
        enterOuterAlt(_localctx, 7);
        setState(754);
        numericinstr();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ControlinstrContext ------------------------------------------------------------------

WatParser::ControlinstrContext::ControlinstrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<WatParser::LabelidxContext *> WatParser::ControlinstrContext::labelidx() {
  return getRuleContexts<WatParser::LabelidxContext>();
}

WatParser::LabelidxContext* WatParser::ControlinstrContext::labelidx(size_t i) {
  return getRuleContext<WatParser::LabelidxContext>(i);
}

WatParser::FuncidxContext* WatParser::ControlinstrContext::funcidx() {
  return getRuleContext<WatParser::FuncidxContext>(0);
}

WatParser::TypeuseContext* WatParser::ControlinstrContext::typeuse() {
  return getRuleContext<WatParser::TypeuseContext>(0);
}

WatParser::TableidxContext* WatParser::ControlinstrContext::tableidx() {
  return getRuleContext<WatParser::TableidxContext>(0);
}


size_t WatParser::ControlinstrContext::getRuleIndex() const {
  return WatParser::RuleControlinstr;
}


std::any WatParser::ControlinstrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitControlinstr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ControlinstrContext* WatParser::controlinstr() {
  ControlinstrContext *_localctx = _tracker.createInstance<ControlinstrContext>(_ctx, getState());
  enterRule(_localctx, 104, WatParser::RuleControlinstr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(777);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::T__32: {
        enterOuterAlt(_localctx, 1);
        setState(757);
        match(WatParser::T__32);
        break;
      }

      case WatParser::T__33: {
        enterOuterAlt(_localctx, 2);
        setState(758);
        match(WatParser::T__33);
        break;
      }

      case WatParser::T__34: {
        enterOuterAlt(_localctx, 3);
        setState(759);
        match(WatParser::T__34);
        setState(760);
        labelidx();
        break;
      }

      case WatParser::T__35: {
        enterOuterAlt(_localctx, 4);
        setState(761);
        match(WatParser::T__35);
        setState(762);
        labelidx();
        break;
      }

      case WatParser::T__36: {
        enterOuterAlt(_localctx, 5);
        setState(763);
        match(WatParser::T__36);
        setState(765); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(764);
          labelidx();
          setState(767); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == WatParser::Integer

        || _la == WatParser::Id);
        break;
      }

      case WatParser::T__37: {
        enterOuterAlt(_localctx, 6);
        setState(769);
        match(WatParser::T__37);
        break;
      }

      case WatParser::T__38: {
        enterOuterAlt(_localctx, 7);
        setState(770);
        match(WatParser::T__38);
        setState(771);
        funcidx();
        break;
      }

      case WatParser::T__39: {
        enterOuterAlt(_localctx, 8);
        setState(772);
        match(WatParser::T__39);
        setState(774);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Integer

        || _la == WatParser::Id) {
          setState(773);
          tableidx();
        }
        setState(776);
        typeuse();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReferenceinstrContext ------------------------------------------------------------------

WatParser::ReferenceinstrContext::ReferenceinstrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::ReferenceinstrContext::RefNull() {
  return getToken(WatParser::RefNull, 0);
}

WatParser::FuncidxContext* WatParser::ReferenceinstrContext::funcidx() {
  return getRuleContext<WatParser::FuncidxContext>(0);
}


size_t WatParser::ReferenceinstrContext::getRuleIndex() const {
  return WatParser::RuleReferenceinstr;
}


std::any WatParser::ReferenceinstrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitReferenceinstr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ReferenceinstrContext* WatParser::referenceinstr() {
  ReferenceinstrContext *_localctx = _tracker.createInstance<ReferenceinstrContext>(_ctx, getState());
  enterRule(_localctx, 106, WatParser::RuleReferenceinstr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(783);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::RefNull: {
        enterOuterAlt(_localctx, 1);
        setState(779);
        match(WatParser::RefNull);
        break;
      }

      case WatParser::T__40: {
        enterOuterAlt(_localctx, 2);
        setState(780);
        match(WatParser::T__40);
        break;
      }

      case WatParser::T__30: {
        enterOuterAlt(_localctx, 3);
        setState(781);
        match(WatParser::T__30);
        setState(782);
        funcidx();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParametricinstrContext ------------------------------------------------------------------

WatParser::ParametricinstrContext::ParametricinstrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<WatParser::ResultContext *> WatParser::ParametricinstrContext::result() {
  return getRuleContexts<WatParser::ResultContext>();
}

WatParser::ResultContext* WatParser::ParametricinstrContext::result(size_t i) {
  return getRuleContext<WatParser::ResultContext>(i);
}


size_t WatParser::ParametricinstrContext::getRuleIndex() const {
  return WatParser::RuleParametricinstr;
}


std::any WatParser::ParametricinstrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitParametricinstr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ParametricinstrContext* WatParser::parametricinstr() {
  ParametricinstrContext *_localctx = _tracker.createInstance<ParametricinstrContext>(_ctx, getState());
  enterRule(_localctx, 108, WatParser::RuleParametricinstr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(793);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::T__41: {
        enterOuterAlt(_localctx, 1);
        setState(785);
        match(WatParser::T__41);
        break;
      }

      case WatParser::T__42: {
        enterOuterAlt(_localctx, 2);
        setState(786);
        match(WatParser::T__42);
        setState(790);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(787);
            result(); 
          }
          setState(792);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableinstrContext ------------------------------------------------------------------

WatParser::VariableinstrContext::VariableinstrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::LocalidxContext* WatParser::VariableinstrContext::localidx() {
  return getRuleContext<WatParser::LocalidxContext>(0);
}

WatParser::GlobalidxContext* WatParser::VariableinstrContext::globalidx() {
  return getRuleContext<WatParser::GlobalidxContext>(0);
}


size_t WatParser::VariableinstrContext::getRuleIndex() const {
  return WatParser::RuleVariableinstr;
}


std::any WatParser::VariableinstrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitVariableinstr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::VariableinstrContext* WatParser::variableinstr() {
  VariableinstrContext *_localctx = _tracker.createInstance<VariableinstrContext>(_ctx, getState());
  enterRule(_localctx, 110, WatParser::RuleVariableinstr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(805);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::T__43: {
        enterOuterAlt(_localctx, 1);
        setState(795);
        match(WatParser::T__43);
        setState(796);
        localidx();
        break;
      }

      case WatParser::T__44: {
        enterOuterAlt(_localctx, 2);
        setState(797);
        match(WatParser::T__44);
        setState(798);
        localidx();
        break;
      }

      case WatParser::T__45: {
        enterOuterAlt(_localctx, 3);
        setState(799);
        match(WatParser::T__45);
        setState(800);
        localidx();
        break;
      }

      case WatParser::T__31: {
        enterOuterAlt(_localctx, 4);
        setState(801);
        match(WatParser::T__31);
        setState(802);
        globalidx();
        break;
      }

      case WatParser::T__46: {
        enterOuterAlt(_localctx, 5);
        setState(803);
        match(WatParser::T__46);
        setState(804);
        globalidx();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableinstrContext ------------------------------------------------------------------

WatParser::TableinstrContext::TableinstrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<WatParser::TableidxContext *> WatParser::TableinstrContext::tableidx() {
  return getRuleContexts<WatParser::TableidxContext>();
}

WatParser::TableidxContext* WatParser::TableinstrContext::tableidx(size_t i) {
  return getRuleContext<WatParser::TableidxContext>(i);
}

WatParser::ElemidxContext* WatParser::TableinstrContext::elemidx() {
  return getRuleContext<WatParser::ElemidxContext>(0);
}


size_t WatParser::TableinstrContext::getRuleIndex() const {
  return WatParser::RuleTableinstr;
}


std::any WatParser::TableinstrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitTableinstr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::TableinstrContext* WatParser::tableinstr() {
  TableinstrContext *_localctx = _tracker.createInstance<TableinstrContext>(_ctx, getState());
  enterRule(_localctx, 112, WatParser::RuleTableinstr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(840);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::T__47: {
        enterOuterAlt(_localctx, 1);
        setState(807);
        match(WatParser::T__47);
        setState(809);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Integer

        || _la == WatParser::Id) {
          setState(808);
          tableidx();
        }
        break;
      }

      case WatParser::T__48: {
        enterOuterAlt(_localctx, 2);
        setState(811);
        match(WatParser::T__48);
        setState(813);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Integer

        || _la == WatParser::Id) {
          setState(812);
          tableidx();
        }
        break;
      }

      case WatParser::T__49: {
        enterOuterAlt(_localctx, 3);
        setState(815);
        match(WatParser::T__49);
        setState(817);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Integer

        || _la == WatParser::Id) {
          setState(816);
          tableidx();
        }
        break;
      }

      case WatParser::T__50: {
        enterOuterAlt(_localctx, 4);
        setState(819);
        match(WatParser::T__50);
        setState(821);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Integer

        || _la == WatParser::Id) {
          setState(820);
          tableidx();
        }
        break;
      }

      case WatParser::T__51: {
        enterOuterAlt(_localctx, 5);
        setState(823);
        match(WatParser::T__51);
        setState(825);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Integer

        || _la == WatParser::Id) {
          setState(824);
          tableidx();
        }
        break;
      }

      case WatParser::T__52: {
        enterOuterAlt(_localctx, 6);
        setState(827);
        match(WatParser::T__52);
        setState(831);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Integer

        || _la == WatParser::Id) {
          setState(828);
          tableidx();
          setState(829);
          tableidx();
        }
        break;
      }

      case WatParser::T__53: {
        enterOuterAlt(_localctx, 7);
        setState(833);
        match(WatParser::T__53);
        setState(835);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx)) {
        case 1: {
          setState(834);
          tableidx();
          break;
        }

        default:
          break;
        }
        setState(837);
        elemidx();
        break;
      }

      case WatParser::T__54: {
        enterOuterAlt(_localctx, 8);
        setState(838);
        match(WatParser::T__54);
        setState(839);
        elemidx();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MemargContext ------------------------------------------------------------------

WatParser::MemargContext::MemargContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::MemargContext::Offset() {
  return getToken(WatParser::Offset, 0);
}

tree::TerminalNode* WatParser::MemargContext::Align() {
  return getToken(WatParser::Align, 0);
}


size_t WatParser::MemargContext::getRuleIndex() const {
  return WatParser::RuleMemarg;
}


std::any WatParser::MemargContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitMemarg(this);
  else
    return visitor->visitChildren(this);
}

WatParser::MemargContext* WatParser::memarg() {
  MemargContext *_localctx = _tracker.createInstance<MemargContext>(_ctx, getState());
  enterRule(_localctx, 114, WatParser::RuleMemarg);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(843);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::Offset) {
      setState(842);
      match(WatParser::Offset);
    }
    setState(846);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::Align) {
      setState(845);
      match(WatParser::Align);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MemoryinstrContext ------------------------------------------------------------------

WatParser::MemoryinstrContext::MemoryinstrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<WatParser::MemidxContext *> WatParser::MemoryinstrContext::memidx() {
  return getRuleContexts<WatParser::MemidxContext>();
}

WatParser::MemidxContext* WatParser::MemoryinstrContext::memidx(size_t i) {
  return getRuleContext<WatParser::MemidxContext>(i);
}

WatParser::DataidxContext* WatParser::MemoryinstrContext::dataidx() {
  return getRuleContext<WatParser::DataidxContext>(0);
}

WatParser::MemargContext* WatParser::MemoryinstrContext::memarg() {
  return getRuleContext<WatParser::MemargContext>(0);
}


size_t WatParser::MemoryinstrContext::getRuleIndex() const {
  return WatParser::RuleMemoryinstr;
}


std::any WatParser::MemoryinstrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitMemoryinstr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::MemoryinstrContext* WatParser::memoryinstr() {
  MemoryinstrContext *_localctx = _tracker.createInstance<MemoryinstrContext>(_ctx, getState());
  enterRule(_localctx, 116, WatParser::RuleMemoryinstr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(988);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::T__55: {
        enterOuterAlt(_localctx, 1);
        setState(848);
        match(WatParser::T__55);
        setState(850);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Integer

        || _la == WatParser::Id) {
          setState(849);
          memidx();
        }
        break;
      }

      case WatParser::T__56: {
        enterOuterAlt(_localctx, 2);
        setState(852);
        match(WatParser::T__56);
        setState(854);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Integer

        || _la == WatParser::Id) {
          setState(853);
          memidx();
        }
        break;
      }

      case WatParser::T__57: {
        enterOuterAlt(_localctx, 3);
        setState(856);
        match(WatParser::T__57);
        setState(858);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Integer

        || _la == WatParser::Id) {
          setState(857);
          memidx();
        }
        break;
      }

      case WatParser::T__58: {
        enterOuterAlt(_localctx, 4);
        setState(860);
        match(WatParser::T__58);
        setState(864);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Integer

        || _la == WatParser::Id) {
          setState(861);
          memidx();
          setState(862);
          memidx();
        }
        break;
      }

      case WatParser::T__59: {
        enterOuterAlt(_localctx, 5);
        setState(866);
        match(WatParser::T__59);
        setState(868);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx)) {
        case 1: {
          setState(867);
          memidx();
          break;
        }

        default:
          break;
        }
        setState(870);
        dataidx();
        break;
      }

      case WatParser::T__60: {
        enterOuterAlt(_localctx, 6);
        setState(871);
        match(WatParser::T__60);
        setState(872);
        dataidx();
        break;
      }

      case WatParser::T__61: {
        enterOuterAlt(_localctx, 7);
        setState(873);
        match(WatParser::T__61);
        setState(875);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Integer

        || _la == WatParser::Id) {
          setState(874);
          memidx();
        }
        setState(877);
        memarg();
        break;
      }

      case WatParser::T__62: {
        enterOuterAlt(_localctx, 8);
        setState(878);
        match(WatParser::T__62);
        setState(880);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Integer

        || _la == WatParser::Id) {
          setState(879);
          memidx();
        }
        setState(882);
        memarg();
        break;
      }

      case WatParser::T__63: {
        enterOuterAlt(_localctx, 9);
        setState(883);
        match(WatParser::T__63);
        setState(885);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Integer

        || _la == WatParser::Id) {
          setState(884);
          memidx();
        }
        setState(887);
        memarg();
        break;
      }

      case WatParser::T__64: {
        enterOuterAlt(_localctx, 10);
        setState(888);
        match(WatParser::T__64);
        setState(890);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Integer

        || _la == WatParser::Id) {
          setState(889);
          memidx();
        }
        setState(892);
        memarg();
        break;
      }

      case WatParser::T__65: {
        enterOuterAlt(_localctx, 11);
        setState(893);
        match(WatParser::T__65);
        setState(895);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Integer

        || _la == WatParser::Id) {
          setState(894);
          memidx();
        }
        setState(897);
        memarg();
        break;
      }

      case WatParser::T__66: {
        enterOuterAlt(_localctx, 12);
        setState(898);
        match(WatParser::T__66);
        setState(900);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Integer

        || _la == WatParser::Id) {
          setState(899);
          memidx();
        }
        setState(902);
        memarg();
        break;
      }

      case WatParser::T__67: {
        enterOuterAlt(_localctx, 13);
        setState(903);
        match(WatParser::T__67);
        setState(905);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Integer

        || _la == WatParser::Id) {
          setState(904);
          memidx();
        }
        setState(907);
        memarg();
        break;
      }

      case WatParser::T__68: {
        enterOuterAlt(_localctx, 14);
        setState(908);
        match(WatParser::T__68);
        setState(910);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Integer

        || _la == WatParser::Id) {
          setState(909);
          memidx();
        }
        setState(912);
        memarg();
        break;
      }

      case WatParser::T__69: {
        enterOuterAlt(_localctx, 15);
        setState(913);
        match(WatParser::T__69);
        setState(915);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Integer

        || _la == WatParser::Id) {
          setState(914);
          memidx();
        }
        setState(917);
        memarg();
        break;
      }

      case WatParser::T__70: {
        enterOuterAlt(_localctx, 16);
        setState(918);
        match(WatParser::T__70);
        setState(920);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Integer

        || _la == WatParser::Id) {
          setState(919);
          memidx();
        }
        setState(922);
        memarg();
        break;
      }

      case WatParser::T__71: {
        enterOuterAlt(_localctx, 17);
        setState(923);
        match(WatParser::T__71);
        setState(925);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Integer

        || _la == WatParser::Id) {
          setState(924);
          memidx();
        }
        setState(927);
        memarg();
        break;
      }

      case WatParser::T__72: {
        enterOuterAlt(_localctx, 18);
        setState(928);
        match(WatParser::T__72);
        setState(930);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Integer

        || _la == WatParser::Id) {
          setState(929);
          memidx();
        }
        setState(932);
        memarg();
        break;
      }

      case WatParser::T__73: {
        enterOuterAlt(_localctx, 19);
        setState(933);
        match(WatParser::T__73);
        setState(935);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Integer

        || _la == WatParser::Id) {
          setState(934);
          memidx();
        }
        setState(937);
        memarg();
        break;
      }

      case WatParser::T__74: {
        enterOuterAlt(_localctx, 20);
        setState(938);
        match(WatParser::T__74);
        setState(940);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Integer

        || _la == WatParser::Id) {
          setState(939);
          memidx();
        }
        setState(942);
        memarg();
        break;
      }

      case WatParser::T__75: {
        enterOuterAlt(_localctx, 21);
        setState(943);
        match(WatParser::T__75);
        setState(945);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Integer

        || _la == WatParser::Id) {
          setState(944);
          memidx();
        }
        setState(947);
        memarg();
        break;
      }

      case WatParser::T__76: {
        enterOuterAlt(_localctx, 22);
        setState(948);
        match(WatParser::T__76);
        setState(950);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Integer

        || _la == WatParser::Id) {
          setState(949);
          memidx();
        }
        setState(952);
        memarg();
        break;
      }

      case WatParser::T__77: {
        enterOuterAlt(_localctx, 23);
        setState(953);
        match(WatParser::T__77);
        setState(955);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Integer

        || _la == WatParser::Id) {
          setState(954);
          memidx();
        }
        setState(957);
        memarg();
        break;
      }

      case WatParser::T__78: {
        enterOuterAlt(_localctx, 24);
        setState(958);
        match(WatParser::T__78);
        setState(960);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Integer

        || _la == WatParser::Id) {
          setState(959);
          memidx();
        }
        setState(962);
        memarg();
        break;
      }

      case WatParser::T__79: {
        enterOuterAlt(_localctx, 25);
        setState(963);
        match(WatParser::T__79);
        setState(965);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Integer

        || _la == WatParser::Id) {
          setState(964);
          memidx();
        }
        setState(967);
        memarg();
        break;
      }

      case WatParser::T__80: {
        enterOuterAlt(_localctx, 26);
        setState(968);
        match(WatParser::T__80);
        setState(970);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Integer

        || _la == WatParser::Id) {
          setState(969);
          memidx();
        }
        setState(972);
        memarg();
        break;
      }

      case WatParser::T__81: {
        enterOuterAlt(_localctx, 27);
        setState(973);
        match(WatParser::T__81);
        setState(975);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Integer

        || _la == WatParser::Id) {
          setState(974);
          memidx();
        }
        setState(977);
        memarg();
        break;
      }

      case WatParser::T__82: {
        enterOuterAlt(_localctx, 28);
        setState(978);
        match(WatParser::T__82);
        setState(980);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Integer

        || _la == WatParser::Id) {
          setState(979);
          memidx();
        }
        setState(982);
        memarg();
        break;
      }

      case WatParser::T__83: {
        enterOuterAlt(_localctx, 29);
        setState(983);
        match(WatParser::T__83);
        setState(985);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Integer

        || _la == WatParser::Id) {
          setState(984);
          memidx();
        }
        setState(987);
        memarg();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumericinstrContext ------------------------------------------------------------------

WatParser::NumericinstrContext::NumericinstrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::I32Context* WatParser::NumericinstrContext::i32() {
  return getRuleContext<WatParser::I32Context>(0);
}

WatParser::I64Context* WatParser::NumericinstrContext::i64() {
  return getRuleContext<WatParser::I64Context>(0);
}

WatParser::F32Context* WatParser::NumericinstrContext::f32() {
  return getRuleContext<WatParser::F32Context>(0);
}

WatParser::F64Context* WatParser::NumericinstrContext::f64() {
  return getRuleContext<WatParser::F64Context>(0);
}


size_t WatParser::NumericinstrContext::getRuleIndex() const {
  return WatParser::RuleNumericinstr;
}


std::any WatParser::NumericinstrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitNumericinstr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::NumericinstrContext* WatParser::numericinstr() {
  NumericinstrContext *_localctx = _tracker.createInstance<NumericinstrContext>(_ctx, getState());
  enterRule(_localctx, 118, WatParser::RuleNumericinstr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1134);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 139, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(990);
      match(WatParser::T__26);
      setState(991);
      i32();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(992);
      match(WatParser::T__27);
      setState(993);
      i64();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(994);
      match(WatParser::T__28);
      setState(995);
      f32();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(996);
      match(WatParser::T__29);
      setState(997);
      f64();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(998);
      match(WatParser::T__84);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(999);
      match(WatParser::T__85);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1000);
      match(WatParser::T__86);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1001);
      match(WatParser::T__87);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1002);
      match(WatParser::T__88);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1003);
      match(WatParser::T__89);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1004);
      match(WatParser::T__90);
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1005);
      match(WatParser::T__91);
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(1006);
      match(WatParser::T__92);
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(1007);
      match(WatParser::T__93);
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(1008);
      match(WatParser::T__94);
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(1009);
      match(WatParser::T__95);
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(1010);
      match(WatParser::T__96);
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(1011);
      match(WatParser::T__97);
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(1012);
      match(WatParser::T__98);
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(1013);
      match(WatParser::T__99);
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(1014);
      match(WatParser::T__100);
      break;
    }

    case 22: {
      enterOuterAlt(_localctx, 22);
      setState(1015);
      match(WatParser::T__101);
      break;
    }

    case 23: {
      enterOuterAlt(_localctx, 23);
      setState(1016);
      match(WatParser::T__102);
      break;
    }

    case 24: {
      enterOuterAlt(_localctx, 24);
      setState(1017);
      match(WatParser::T__103);
      break;
    }

    case 25: {
      enterOuterAlt(_localctx, 25);
      setState(1018);
      match(WatParser::T__104);
      break;
    }

    case 26: {
      enterOuterAlt(_localctx, 26);
      setState(1019);
      match(WatParser::T__105);
      break;
    }

    case 27: {
      enterOuterAlt(_localctx, 27);
      setState(1020);
      match(WatParser::T__106);
      break;
    }

    case 28: {
      enterOuterAlt(_localctx, 28);
      setState(1021);
      match(WatParser::T__107);
      break;
    }

    case 29: {
      enterOuterAlt(_localctx, 29);
      setState(1022);
      match(WatParser::T__108);
      break;
    }

    case 30: {
      enterOuterAlt(_localctx, 30);
      setState(1023);
      match(WatParser::T__109);
      break;
    }

    case 31: {
      enterOuterAlt(_localctx, 31);
      setState(1024);
      match(WatParser::T__110);
      break;
    }

    case 32: {
      enterOuterAlt(_localctx, 32);
      setState(1025);
      match(WatParser::T__111);
      break;
    }

    case 33: {
      enterOuterAlt(_localctx, 33);
      setState(1026);
      match(WatParser::T__112);
      break;
    }

    case 34: {
      enterOuterAlt(_localctx, 34);
      setState(1027);
      match(WatParser::T__113);
      break;
    }

    case 35: {
      enterOuterAlt(_localctx, 35);
      setState(1028);
      match(WatParser::T__114);
      break;
    }

    case 36: {
      enterOuterAlt(_localctx, 36);
      setState(1029);
      match(WatParser::T__115);
      break;
    }

    case 37: {
      enterOuterAlt(_localctx, 37);
      setState(1030);
      match(WatParser::T__116);
      break;
    }

    case 38: {
      enterOuterAlt(_localctx, 38);
      setState(1031);
      match(WatParser::T__117);
      break;
    }

    case 39: {
      enterOuterAlt(_localctx, 39);
      setState(1032);
      match(WatParser::T__118);
      break;
    }

    case 40: {
      enterOuterAlt(_localctx, 40);
      setState(1033);
      match(WatParser::T__119);
      break;
    }

    case 41: {
      enterOuterAlt(_localctx, 41);
      setState(1034);
      match(WatParser::T__120);
      break;
    }

    case 42: {
      enterOuterAlt(_localctx, 42);
      setState(1035);
      match(WatParser::T__121);
      break;
    }

    case 43: {
      enterOuterAlt(_localctx, 43);
      setState(1036);
      match(WatParser::T__122);
      break;
    }

    case 44: {
      enterOuterAlt(_localctx, 44);
      setState(1037);
      match(WatParser::T__123);
      break;
    }

    case 45: {
      enterOuterAlt(_localctx, 45);
      setState(1038);
      match(WatParser::T__124);
      break;
    }

    case 46: {
      enterOuterAlt(_localctx, 46);
      setState(1039);
      match(WatParser::T__125);
      break;
    }

    case 47: {
      enterOuterAlt(_localctx, 47);
      setState(1040);
      match(WatParser::T__126);
      break;
    }

    case 48: {
      enterOuterAlt(_localctx, 48);
      setState(1041);
      match(WatParser::T__127);
      break;
    }

    case 49: {
      enterOuterAlt(_localctx, 49);
      setState(1042);
      match(WatParser::T__128);
      break;
    }

    case 50: {
      enterOuterAlt(_localctx, 50);
      setState(1043);
      match(WatParser::T__129);
      break;
    }

    case 51: {
      enterOuterAlt(_localctx, 51);
      setState(1044);
      match(WatParser::T__130);
      break;
    }

    case 52: {
      enterOuterAlt(_localctx, 52);
      setState(1045);
      match(WatParser::T__131);
      break;
    }

    case 53: {
      enterOuterAlt(_localctx, 53);
      setState(1046);
      match(WatParser::T__132);
      break;
    }

    case 54: {
      enterOuterAlt(_localctx, 54);
      setState(1047);
      match(WatParser::T__133);
      break;
    }

    case 55: {
      enterOuterAlt(_localctx, 55);
      setState(1048);
      match(WatParser::T__134);
      break;
    }

    case 56: {
      enterOuterAlt(_localctx, 56);
      setState(1049);
      match(WatParser::T__135);
      break;
    }

    case 57: {
      enterOuterAlt(_localctx, 57);
      setState(1050);
      match(WatParser::T__136);
      break;
    }

    case 58: {
      enterOuterAlt(_localctx, 58);
      setState(1051);
      match(WatParser::T__137);
      break;
    }

    case 59: {
      enterOuterAlt(_localctx, 59);
      setState(1052);
      match(WatParser::T__138);
      break;
    }

    case 60: {
      enterOuterAlt(_localctx, 60);
      setState(1053);
      match(WatParser::T__139);
      break;
    }

    case 61: {
      enterOuterAlt(_localctx, 61);
      setState(1054);
      match(WatParser::T__140);
      break;
    }

    case 62: {
      enterOuterAlt(_localctx, 62);
      setState(1055);
      match(WatParser::T__141);
      break;
    }

    case 63: {
      enterOuterAlt(_localctx, 63);
      setState(1056);
      match(WatParser::T__142);
      break;
    }

    case 64: {
      enterOuterAlt(_localctx, 64);
      setState(1057);
      match(WatParser::T__143);
      break;
    }

    case 65: {
      enterOuterAlt(_localctx, 65);
      setState(1058);
      match(WatParser::T__144);
      break;
    }

    case 66: {
      enterOuterAlt(_localctx, 66);
      setState(1059);
      match(WatParser::T__145);
      break;
    }

    case 67: {
      enterOuterAlt(_localctx, 67);
      setState(1060);
      match(WatParser::T__146);
      break;
    }

    case 68: {
      enterOuterAlt(_localctx, 68);
      setState(1061);
      match(WatParser::T__147);
      break;
    }

    case 69: {
      enterOuterAlt(_localctx, 69);
      setState(1062);
      match(WatParser::T__148);
      break;
    }

    case 70: {
      enterOuterAlt(_localctx, 70);
      setState(1063);
      match(WatParser::T__149);
      break;
    }

    case 71: {
      enterOuterAlt(_localctx, 71);
      setState(1064);
      match(WatParser::T__150);
      break;
    }

    case 72: {
      enterOuterAlt(_localctx, 72);
      setState(1065);
      match(WatParser::T__151);
      break;
    }

    case 73: {
      enterOuterAlt(_localctx, 73);
      setState(1066);
      match(WatParser::T__152);
      break;
    }

    case 74: {
      enterOuterAlt(_localctx, 74);
      setState(1067);
      match(WatParser::T__153);
      break;
    }

    case 75: {
      enterOuterAlt(_localctx, 75);
      setState(1068);
      match(WatParser::T__154);
      break;
    }

    case 76: {
      enterOuterAlt(_localctx, 76);
      setState(1069);
      match(WatParser::T__155);
      break;
    }

    case 77: {
      enterOuterAlt(_localctx, 77);
      setState(1070);
      match(WatParser::T__156);
      break;
    }

    case 78: {
      enterOuterAlt(_localctx, 78);
      setState(1071);
      match(WatParser::T__157);
      break;
    }

    case 79: {
      enterOuterAlt(_localctx, 79);
      setState(1072);
      match(WatParser::T__158);
      break;
    }

    case 80: {
      enterOuterAlt(_localctx, 80);
      setState(1073);
      match(WatParser::T__159);
      break;
    }

    case 81: {
      enterOuterAlt(_localctx, 81);
      setState(1074);
      match(WatParser::T__160);
      break;
    }

    case 82: {
      enterOuterAlt(_localctx, 82);
      setState(1075);
      match(WatParser::T__161);
      break;
    }

    case 83: {
      enterOuterAlt(_localctx, 83);
      setState(1076);
      match(WatParser::T__162);
      break;
    }

    case 84: {
      enterOuterAlt(_localctx, 84);
      setState(1077);
      match(WatParser::T__163);
      break;
    }

    case 85: {
      enterOuterAlt(_localctx, 85);
      setState(1078);
      match(WatParser::T__164);
      break;
    }

    case 86: {
      enterOuterAlt(_localctx, 86);
      setState(1079);
      match(WatParser::T__165);
      break;
    }

    case 87: {
      enterOuterAlt(_localctx, 87);
      setState(1080);
      match(WatParser::T__166);
      break;
    }

    case 88: {
      enterOuterAlt(_localctx, 88);
      setState(1081);
      match(WatParser::T__167);
      break;
    }

    case 89: {
      enterOuterAlt(_localctx, 89);
      setState(1082);
      match(WatParser::T__168);
      break;
    }

    case 90: {
      enterOuterAlt(_localctx, 90);
      setState(1083);
      match(WatParser::T__169);
      break;
    }

    case 91: {
      enterOuterAlt(_localctx, 91);
      setState(1084);
      match(WatParser::T__170);
      break;
    }

    case 92: {
      enterOuterAlt(_localctx, 92);
      setState(1085);
      match(WatParser::T__171);
      break;
    }

    case 93: {
      enterOuterAlt(_localctx, 93);
      setState(1086);
      match(WatParser::T__172);
      break;
    }

    case 94: {
      enterOuterAlt(_localctx, 94);
      setState(1087);
      match(WatParser::T__173);
      break;
    }

    case 95: {
      enterOuterAlt(_localctx, 95);
      setState(1088);
      match(WatParser::T__174);
      break;
    }

    case 96: {
      enterOuterAlt(_localctx, 96);
      setState(1089);
      match(WatParser::T__175);
      break;
    }

    case 97: {
      enterOuterAlt(_localctx, 97);
      setState(1090);
      match(WatParser::T__176);
      break;
    }

    case 98: {
      enterOuterAlt(_localctx, 98);
      setState(1091);
      match(WatParser::T__177);
      break;
    }

    case 99: {
      enterOuterAlt(_localctx, 99);
      setState(1092);
      match(WatParser::T__178);
      break;
    }

    case 100: {
      enterOuterAlt(_localctx, 100);
      setState(1093);
      match(WatParser::T__179);
      break;
    }

    case 101: {
      enterOuterAlt(_localctx, 101);
      setState(1094);
      match(WatParser::T__180);
      break;
    }

    case 102: {
      enterOuterAlt(_localctx, 102);
      setState(1095);
      match(WatParser::T__181);
      break;
    }

    case 103: {
      enterOuterAlt(_localctx, 103);
      setState(1096);
      match(WatParser::T__182);
      break;
    }

    case 104: {
      enterOuterAlt(_localctx, 104);
      setState(1097);
      match(WatParser::T__183);
      break;
    }

    case 105: {
      enterOuterAlt(_localctx, 105);
      setState(1098);
      match(WatParser::T__184);
      break;
    }

    case 106: {
      enterOuterAlt(_localctx, 106);
      setState(1099);
      match(WatParser::T__185);
      break;
    }

    case 107: {
      enterOuterAlt(_localctx, 107);
      setState(1100);
      match(WatParser::T__186);
      break;
    }

    case 108: {
      enterOuterAlt(_localctx, 108);
      setState(1101);
      match(WatParser::T__187);
      break;
    }

    case 109: {
      enterOuterAlt(_localctx, 109);
      setState(1102);
      match(WatParser::T__187);
      break;
    }

    case 110: {
      enterOuterAlt(_localctx, 110);
      setState(1103);
      match(WatParser::T__188);
      break;
    }

    case 111: {
      enterOuterAlt(_localctx, 111);
      setState(1104);
      match(WatParser::T__189);
      break;
    }

    case 112: {
      enterOuterAlt(_localctx, 112);
      setState(1105);
      match(WatParser::T__190);
      break;
    }

    case 113: {
      enterOuterAlt(_localctx, 113);
      setState(1106);
      match(WatParser::T__191);
      break;
    }

    case 114: {
      enterOuterAlt(_localctx, 114);
      setState(1107);
      match(WatParser::T__192);
      break;
    }

    case 115: {
      enterOuterAlt(_localctx, 115);
      setState(1108);
      match(WatParser::T__193);
      break;
    }

    case 116: {
      enterOuterAlt(_localctx, 116);
      setState(1109);
      match(WatParser::T__194);
      break;
    }

    case 117: {
      enterOuterAlt(_localctx, 117);
      setState(1110);
      match(WatParser::T__195);
      break;
    }

    case 118: {
      enterOuterAlt(_localctx, 118);
      setState(1111);
      match(WatParser::T__196);
      break;
    }

    case 119: {
      enterOuterAlt(_localctx, 119);
      setState(1112);
      match(WatParser::T__197);
      break;
    }

    case 120: {
      enterOuterAlt(_localctx, 120);
      setState(1113);
      match(WatParser::T__198);
      break;
    }

    case 121: {
      enterOuterAlt(_localctx, 121);
      setState(1114);
      match(WatParser::T__199);
      break;
    }

    case 122: {
      enterOuterAlt(_localctx, 122);
      setState(1115);
      match(WatParser::T__200);
      break;
    }

    case 123: {
      enterOuterAlt(_localctx, 123);
      setState(1116);
      match(WatParser::T__201);
      break;
    }

    case 124: {
      enterOuterAlt(_localctx, 124);
      setState(1117);
      match(WatParser::T__202);
      break;
    }

    case 125: {
      enterOuterAlt(_localctx, 125);
      setState(1118);
      match(WatParser::T__203);
      break;
    }

    case 126: {
      enterOuterAlt(_localctx, 126);
      setState(1119);
      match(WatParser::T__204);
      break;
    }

    case 127: {
      enterOuterAlt(_localctx, 127);
      setState(1120);
      match(WatParser::T__205);
      break;
    }

    case 128: {
      enterOuterAlt(_localctx, 128);
      setState(1121);
      match(WatParser::T__206);
      break;
    }

    case 129: {
      enterOuterAlt(_localctx, 129);
      setState(1122);
      match(WatParser::T__207);
      break;
    }

    case 130: {
      enterOuterAlt(_localctx, 130);
      setState(1123);
      match(WatParser::T__208);
      break;
    }

    case 131: {
      enterOuterAlt(_localctx, 131);
      setState(1124);
      match(WatParser::T__209);
      break;
    }

    case 132: {
      enterOuterAlt(_localctx, 132);
      setState(1125);
      match(WatParser::T__210);
      break;
    }

    case 133: {
      enterOuterAlt(_localctx, 133);
      setState(1126);
      match(WatParser::T__211);
      break;
    }

    case 134: {
      enterOuterAlt(_localctx, 134);
      setState(1127);
      match(WatParser::T__212);
      break;
    }

    case 135: {
      enterOuterAlt(_localctx, 135);
      setState(1128);
      match(WatParser::T__213);
      break;
    }

    case 136: {
      enterOuterAlt(_localctx, 136);
      setState(1129);
      match(WatParser::T__214);
      break;
    }

    case 137: {
      enterOuterAlt(_localctx, 137);
      setState(1130);
      match(WatParser::T__215);
      break;
    }

    case 138: {
      enterOuterAlt(_localctx, 138);
      setState(1131);
      match(WatParser::T__216);
      break;
    }

    case 139: {
      enterOuterAlt(_localctx, 139);
      setState(1132);
      match(WatParser::T__217);
      break;
    }

    case 140: {
      enterOuterAlt(_localctx, 140);
      setState(1133);
      match(WatParser::T__218);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

void WatParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  watParserInitialize();
#else
  ::antlr4::internal::call_once(watParserOnceFlag, watParserInitialize);
#endif
}
