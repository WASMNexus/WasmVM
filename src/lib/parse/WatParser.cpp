
// Generated from /Users/luishsu/Desktop/WasmVM/src/lib/parse/Wat.g4 by ANTLR 4.13.2


#include "WatVisitor.h"

#include "WatParser.h"


using namespace antlrcpp;
using namespace WasmVM;

using namespace antlr4;

namespace {

struct WatParserStaticData final {
  WatParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  WatParserStaticData(const WatParserStaticData&) = delete;
  WatParserStaticData(WatParserStaticData&&) = delete;
  WatParserStaticData& operator=(const WatParserStaticData&) = delete;
  WatParserStaticData& operator=(WatParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag watParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<WatParserStaticData> watParserStaticData = nullptr;

void watParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (watParserStaticData != nullptr) {
    return;
  }
#else
  assert(watParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<WatParserStaticData>(
    std::vector<std::string>{
      "module", "modulefield", "typesection", "importdesc", "importabbr", 
      "importsection", "funcsection", "local", "tablesection", "memorysection", 
      "globalsection", "exportsection", "exportdesc", "exportabbr", "startsection", 
      "elemsection", "elemlist", "elemexpr", "tableuse", "datasection", 
      "memuse", "i32", "i64", "u32", "u64", "f32", "f64", "valtype", "param", 
      "result", "functype", "limits", "memtype", "tabletype", "globaltype", 
      "typeidx", "funcidx", "tableidx", "memidx", "globalidx", "elemidx", 
      "dataidx", "localidx", "labelidx", "typeuse", "instr", "label", "blocktype", 
      "blockinstr", "foldedinstr", "constexpr", "plaininstr", "controlinstr", 
      "referenceinstr", "parametricinstr", "variableinstr", "tableinstr", 
      "memarg", "memoryinstr", "numericinstr"
    },
    std::vector<std::string>{
      "", "'('", "'module'", "')'", "'type'", "'func'", "'table'", "'memory'", 
      "'global'", "'import'", "'local'", "'elem'", "'data'", "'export'", 
      "'start'", "'offset'", "'declare'", "'item'", "'param'", "'result'", 
      "'mut'", "'block'", "'end'", "'loop'", "'if'", "'else'", "'then'", 
      "'i32.const'", "'i64.const'", "'f32.const'", "'f64.const'", "'ref.null'", 
      "'ref.func'", "'global.get'", "'unreachable'", "'nop'", "'br'", "'br_if'", 
      "'br_table'", "'return'", "'call'", "'call_indirect'", "'ref.is_null'", 
      "'drop'", "'select'", "'local.get'", "'local.set'", "'local.tee'", 
      "'global.set'", "'table.get'", "'table.set'", "'table.size'", "'table.grow'", 
      "'table.fill'", "'table.copy'", "'table.init'", "'elem.drop'", "'memory.size'", 
      "'memory.grow'", "'memory.fill'", "'memory.copy'", "'memory.init'", 
      "'data.drop'", "'i32.load'", "'i32.load8_s'", "'i32.load8_u'", "'i32.load16_s'", 
      "'i32.load16_u'", "'i64.load'", "'i64.load8_s'", "'i64.load8_u'", 
      "'i64.load16_s'", "'i64.load16_u'", "'i64.load32_s'", "'i64.load32_u'", 
      "'f32.load'", "'f64.load'", "'i32.store'", "'i32.store8'", "'i32.store16'", 
      "'i64.store'", "'i64.store8'", "'i64.store16'", "'i64.store32'", "'f32.store'", 
      "'f64.store'", "'i32.eqz'", "'i32.eq'", "'i32.ne'", "'i32.lt_s'", 
      "'i32.lt_u'", "'i32.gt_s'", "'i32.gt_u'", "'i32.le_s'", "'i32.le_u'", 
      "'i32.ge_s'", "'i32.ge_u'", "'i64.eqz'", "'i64.eq'", "'i64.ne'", "'i64.lt_s'", 
      "'i64.lt_u'", "'i64.gt_s'", "'i64.gt_u'", "'i64.le_s'", "'i64.le_u'", 
      "'i64.ge_s'", "'i64.ge_u'", "'f32.eq'", "'f32.ne'", "'f32.lt'", "'f32.gt'", 
      "'f32.le'", "'f32.ge'", "'f64.eq'", "'f64.ne'", "'f64.lt'", "'f64.gt'", 
      "'f64.le'", "'f64.ge'", "'i32.clz'", "'i32.ctz'", "'i32.popcnt'", 
      "'i32.add'", "'i32.sub'", "'i32.mul'", "'i32.div_s'", "'i32.div_u'", 
      "'i32.rem_s'", "'i32.rem_u'", "'i32.and'", "'i32.or'", "'i32.xor'", 
      "'i32.shl'", "'i32.shr_s'", "'i32.shr_u'", "'i32.rotl'", "'i32.rotr'", 
      "'i64.clz'", "'i64.ctz'", "'i64.popcnt'", "'i64.add'", "'i64.sub'", 
      "'i64.mul'", "'i64.div_s'", "'i64.div_u'", "'i64.rem_s'", "'i64.rem_u'", 
      "'i64.and'", "'i64.or'", "'i64.xor'", "'i64.shl'", "'i64.shr_s'", 
      "'i64.shr_u'", "'i64.rotl'", "'i64.rotr'", "'f32.abs'", "'f32.neg'", 
      "'f32.ceil'", "'f32.floor'", "'f32.trunc'", "'f32.nearest'", "'f32.sqrt'", 
      "'f32.add'", "'f32.sub'", "'f32.mul'", "'f32.div'", "'f32.min'", "'f32.max'", 
      "'f32.copysign'", "'f64.abs'", "'f64.neg'", "'f64.ceil'", "'f64.floor'", 
      "'f64.trunc'", "'f64.nearest'", "'f64.sqrt'", "'f64.add'", "'f64.sub'", 
      "'f64.mul'", "'f64.div'", "'f64.min'", "'f64.max'", "'f64.copysign'", 
      "'i32.wrap_i64'", "'i32.trunc_s_f32'", "'i32.trunc_u_f32'", "'i32.trunc_s_f64'", 
      "'i32.trunc_u_f64'", "'i64.extend_s_i32'", "'i64.extend_u_i32'", "'i64.trunc_s_f32'", 
      "'i64.trunc_u_f32'", "'i64.trunc_s_f64'", "'i64.trunc_u_f64'", "'f32.convert_s_i32'", 
      "'f32.convert_u_i32'", "'f32.convert_s_i64'", "'f32.convert_u_i64'", 
      "'f32.demote_f64'", "'f64.convert_s_i32'", "'f64.convert_u_i32'", 
      "'f64.convert_s_i64'", "'f64.convert_u_i64'", "'f64.promote_f32'", 
      "'i32.reinterpret_f32'", "'i64.reinterpret_f64'", "'f32.reinterpret_i32'", 
      "'f64.reinterpret_i64'", "'i32.extend8_s'", "'i32.extend16_s'", "'i64.extend8_s'", 
      "'i64.extend16_s'", "'i64.extend32_s'", "'i32.trunc_sat_f32_s'", "'i32.trunc_sat_f32_u'", 
      "'i32.trunc_sat_f64_s'", "'i32.trunc_sat_f64_u'", "'i64.trunc_sat_f32_s'", 
      "'i64.trunc_sat_f32_u'", "'i64.trunc_sat_f64_s'", "'i64.trunc_sat_f64_u'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "BlockComment", "LineComment", "WhiteSpace", "Integer", "Unsigned", 
      "Float", "String", "Id", "NumType", "RefType", "HeapType", "Offset", 
      "Align"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,234,1117,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,1,0,1,0,1,0,3,0,124,8,0,1,0,5,0,127,
  	8,0,10,0,12,0,130,9,0,3,0,132,8,0,1,0,1,0,5,0,136,8,0,10,0,12,0,139,9,
  	0,3,0,141,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,153,8,1,1,2,
  	1,2,1,2,3,2,158,8,2,1,2,1,2,1,2,1,3,1,3,1,3,3,3,166,8,3,1,3,1,3,1,3,1,
  	3,1,3,1,3,3,3,174,8,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,182,8,3,1,3,1,3,1,3,
  	1,3,1,3,1,3,3,3,190,8,3,1,3,1,3,1,3,3,3,195,8,3,1,4,1,4,1,4,1,4,1,4,1,
  	4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,3,6,211,8,6,1,6,1,6,1,6,1,6,1,6,1,6,
  	5,6,219,8,6,10,6,12,6,222,9,6,1,6,5,6,225,8,6,10,6,12,6,228,9,6,3,6,230,
  	8,6,1,6,1,6,1,7,1,7,1,7,3,7,237,8,7,1,7,1,7,4,7,241,8,7,11,7,12,7,242,
  	3,7,245,8,7,1,7,1,7,1,8,1,8,1,8,3,8,252,8,8,1,8,1,8,3,8,256,8,8,1,8,1,
  	8,1,8,1,8,1,8,5,8,263,8,8,10,8,12,8,266,9,8,1,8,5,8,269,8,8,10,8,12,8,
  	272,9,8,3,8,274,8,8,1,8,3,8,277,8,8,1,8,1,8,1,9,1,9,1,9,3,9,284,8,9,1,
  	9,1,9,3,9,288,8,9,1,9,1,9,1,9,1,9,5,9,294,8,9,10,9,12,9,297,9,9,1,9,3,
  	9,300,8,9,1,9,1,9,1,10,1,10,1,10,3,10,307,8,10,1,10,1,10,1,10,1,10,1,
  	10,1,10,1,10,3,10,316,8,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,
  	12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
  	12,1,12,1,12,1,12,1,12,1,12,3,12,346,8,12,1,13,1,13,1,13,1,13,1,13,1,
  	14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,3,15,361,8,15,1,15,3,15,364,8,15,
  	1,15,1,15,3,15,368,8,15,1,15,1,15,1,15,1,15,3,15,374,8,15,1,15,1,15,1,
  	15,3,15,379,8,15,1,15,1,15,1,15,5,15,384,8,15,10,15,12,15,387,9,15,3,
  	15,389,8,15,1,15,1,15,1,16,1,16,5,16,395,8,16,10,16,12,16,398,9,16,1,
  	16,1,16,5,16,402,8,16,10,16,12,16,405,9,16,3,16,407,8,16,1,17,1,17,1,
  	17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,418,8,17,1,18,1,18,1,18,1,18,1,
  	18,1,19,1,19,1,19,3,19,428,8,19,1,19,3,19,431,8,19,1,19,1,19,3,19,435,
  	8,19,1,19,1,19,1,19,3,19,440,8,19,1,19,5,19,443,8,19,10,19,12,19,446,
  	9,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,
  	1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,28,1,28,5,28,
  	474,8,28,10,28,12,28,477,9,28,3,28,479,8,28,1,28,1,28,1,29,1,29,1,29,
  	5,29,486,8,29,10,29,12,29,489,9,29,1,29,1,29,1,30,1,30,1,30,5,30,496,
  	8,30,10,30,12,30,499,9,30,1,30,5,30,502,8,30,10,30,12,30,505,9,30,1,30,
  	1,30,1,31,1,31,3,31,511,8,31,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,
  	1,34,1,34,1,34,3,34,524,8,34,1,35,1,35,3,35,528,8,35,1,36,1,36,3,36,532,
  	8,36,1,37,1,37,3,37,536,8,37,1,38,1,38,3,38,540,8,38,1,39,1,39,3,39,544,
  	8,39,1,40,1,40,3,40,548,8,40,1,41,1,41,3,41,552,8,41,1,42,1,42,3,42,556,
  	8,42,1,43,1,43,3,43,560,8,43,1,44,1,44,1,44,1,44,1,44,3,44,567,8,44,1,
  	44,5,44,570,8,44,10,44,12,44,573,9,44,1,44,5,44,576,8,44,10,44,12,44,
  	579,9,44,1,45,1,45,1,45,3,45,584,8,45,1,46,3,46,587,8,46,1,47,3,47,590,
  	8,47,1,47,3,47,593,8,47,1,48,1,48,1,48,1,48,5,48,599,8,48,10,48,12,48,
  	602,9,48,1,48,1,48,3,48,606,8,48,1,48,1,48,1,48,1,48,5,48,612,8,48,10,
  	48,12,48,615,9,48,1,48,1,48,3,48,619,8,48,1,48,1,48,1,48,1,48,5,48,625,
  	8,48,10,48,12,48,628,9,48,1,48,1,48,3,48,632,8,48,1,48,5,48,635,8,48,
  	10,48,12,48,638,9,48,1,48,1,48,3,48,642,8,48,3,48,644,8,48,1,49,1,49,
  	1,49,5,49,649,8,49,10,49,12,49,652,9,49,1,49,1,49,1,49,1,49,1,49,1,49,
  	1,49,5,49,661,8,49,10,49,12,49,664,9,49,1,49,1,49,1,49,1,49,1,49,1,49,
  	1,49,5,49,673,8,49,10,49,12,49,676,9,49,1,49,1,49,1,49,1,49,1,49,1,49,
  	1,49,5,49,685,8,49,10,49,12,49,688,9,49,1,49,1,49,1,49,5,49,693,8,49,
  	10,49,12,49,696,9,49,1,49,1,49,1,49,1,49,5,49,702,8,49,10,49,12,49,705,
  	9,49,1,49,3,49,708,8,49,1,49,1,49,3,49,712,8,49,1,50,1,50,1,50,1,50,1,
  	50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,728,8,50,1,51,1,
  	51,1,51,1,51,1,51,1,51,3,51,736,8,51,1,52,1,52,1,52,1,52,1,52,1,52,1,
  	52,1,52,4,52,746,8,52,11,52,12,52,747,1,52,1,52,1,52,1,52,1,52,1,52,1,
  	52,3,52,757,8,52,1,53,1,53,1,53,1,53,1,53,3,53,764,8,53,1,54,1,54,1,54,
  	5,54,769,8,54,10,54,12,54,772,9,54,3,54,774,8,54,1,55,1,55,1,55,1,55,
  	1,55,1,55,1,55,1,55,1,55,1,55,3,55,786,8,55,1,56,1,56,3,56,790,8,56,1,
  	56,1,56,3,56,794,8,56,1,56,1,56,3,56,798,8,56,1,56,1,56,3,56,802,8,56,
  	1,56,1,56,3,56,806,8,56,1,56,1,56,1,56,1,56,3,56,812,8,56,1,56,1,56,3,
  	56,816,8,56,1,56,1,56,1,56,3,56,821,8,56,1,57,3,57,824,8,57,1,57,3,57,
  	827,8,57,1,58,1,58,3,58,831,8,58,1,58,1,58,3,58,835,8,58,1,58,1,58,3,
  	58,839,8,58,1,58,1,58,1,58,1,58,3,58,845,8,58,1,58,1,58,3,58,849,8,58,
  	1,58,1,58,1,58,1,58,1,58,3,58,856,8,58,1,58,1,58,1,58,3,58,861,8,58,1,
  	58,1,58,1,58,3,58,866,8,58,1,58,1,58,1,58,3,58,871,8,58,1,58,1,58,1,58,
  	3,58,876,8,58,1,58,1,58,1,58,3,58,881,8,58,1,58,1,58,1,58,3,58,886,8,
  	58,1,58,1,58,1,58,3,58,891,8,58,1,58,1,58,1,58,3,58,896,8,58,1,58,1,58,
  	1,58,3,58,901,8,58,1,58,1,58,1,58,3,58,906,8,58,1,58,1,58,1,58,3,58,911,
  	8,58,1,58,1,58,1,58,3,58,916,8,58,1,58,1,58,1,58,3,58,921,8,58,1,58,1,
  	58,1,58,3,58,926,8,58,1,58,1,58,1,58,3,58,931,8,58,1,58,1,58,1,58,3,58,
  	936,8,58,1,58,1,58,1,58,3,58,941,8,58,1,58,1,58,1,58,3,58,946,8,58,1,
  	58,1,58,1,58,3,58,951,8,58,1,58,1,58,1,58,3,58,956,8,58,1,58,1,58,1,58,
  	3,58,961,8,58,1,58,1,58,1,58,3,58,966,8,58,1,58,3,58,969,8,58,1,59,1,
  	59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,
  	59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,
  	59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,
  	59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,
  	59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,
  	59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,
  	59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,
  	59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,
  	59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,
  	59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,
  	59,1,59,1,59,3,59,1115,8,59,1,59,0,0,60,0,2,4,6,8,10,12,14,16,18,20,22,
  	24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
  	70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
  	112,114,116,118,0,1,1,0,230,231,1399,0,140,1,0,0,0,2,152,1,0,0,0,4,154,
  	1,0,0,0,6,194,1,0,0,0,8,196,1,0,0,0,10,202,1,0,0,0,12,207,1,0,0,0,14,
  	233,1,0,0,0,16,248,1,0,0,0,18,280,1,0,0,0,20,303,1,0,0,0,22,319,1,0,0,
  	0,24,345,1,0,0,0,26,347,1,0,0,0,28,352,1,0,0,0,30,357,1,0,0,0,32,406,
  	1,0,0,0,34,417,1,0,0,0,36,419,1,0,0,0,38,424,1,0,0,0,40,449,1,0,0,0,42,
  	454,1,0,0,0,44,456,1,0,0,0,46,458,1,0,0,0,48,460,1,0,0,0,50,462,1,0,0,
  	0,52,464,1,0,0,0,54,466,1,0,0,0,56,468,1,0,0,0,58,482,1,0,0,0,60,492,
  	1,0,0,0,62,508,1,0,0,0,64,512,1,0,0,0,66,514,1,0,0,0,68,523,1,0,0,0,70,
  	527,1,0,0,0,72,531,1,0,0,0,74,535,1,0,0,0,76,539,1,0,0,0,78,543,1,0,0,
  	0,80,547,1,0,0,0,82,551,1,0,0,0,84,555,1,0,0,0,86,559,1,0,0,0,88,566,
  	1,0,0,0,90,583,1,0,0,0,92,586,1,0,0,0,94,592,1,0,0,0,96,643,1,0,0,0,98,
  	711,1,0,0,0,100,727,1,0,0,0,102,735,1,0,0,0,104,756,1,0,0,0,106,763,1,
  	0,0,0,108,773,1,0,0,0,110,785,1,0,0,0,112,820,1,0,0,0,114,823,1,0,0,0,
  	116,968,1,0,0,0,118,1114,1,0,0,0,120,131,5,1,0,0,121,123,5,2,0,0,122,
  	124,5,229,0,0,123,122,1,0,0,0,123,124,1,0,0,0,124,128,1,0,0,0,125,127,
  	3,2,1,0,126,125,1,0,0,0,127,130,1,0,0,0,128,126,1,0,0,0,128,129,1,0,0,
  	0,129,132,1,0,0,0,130,128,1,0,0,0,131,121,1,0,0,0,131,132,1,0,0,0,132,
  	133,1,0,0,0,133,141,5,3,0,0,134,136,3,2,1,0,135,134,1,0,0,0,136,139,1,
  	0,0,0,137,135,1,0,0,0,137,138,1,0,0,0,138,141,1,0,0,0,139,137,1,0,0,0,
  	140,120,1,0,0,0,140,137,1,0,0,0,141,1,1,0,0,0,142,153,3,4,2,0,143,153,
  	3,10,5,0,144,153,3,12,6,0,145,153,3,16,8,0,146,153,3,18,9,0,147,153,3,
  	20,10,0,148,153,3,22,11,0,149,153,3,28,14,0,150,153,3,30,15,0,151,153,
  	3,38,19,0,152,142,1,0,0,0,152,143,1,0,0,0,152,144,1,0,0,0,152,145,1,0,
  	0,0,152,146,1,0,0,0,152,147,1,0,0,0,152,148,1,0,0,0,152,149,1,0,0,0,152,
  	150,1,0,0,0,152,151,1,0,0,0,153,3,1,0,0,0,154,155,5,1,0,0,155,157,5,4,
  	0,0,156,158,5,229,0,0,157,156,1,0,0,0,157,158,1,0,0,0,158,159,1,0,0,0,
  	159,160,3,60,30,0,160,161,5,3,0,0,161,5,1,0,0,0,162,163,5,1,0,0,163,165,
  	5,5,0,0,164,166,5,229,0,0,165,164,1,0,0,0,165,166,1,0,0,0,166,167,1,0,
  	0,0,167,168,3,88,44,0,168,169,5,3,0,0,169,195,1,0,0,0,170,171,5,1,0,0,
  	171,173,5,6,0,0,172,174,5,229,0,0,173,172,1,0,0,0,173,174,1,0,0,0,174,
  	175,1,0,0,0,175,176,3,66,33,0,176,177,5,3,0,0,177,195,1,0,0,0,178,179,
  	5,1,0,0,179,181,5,7,0,0,180,182,5,229,0,0,181,180,1,0,0,0,181,182,1,0,
  	0,0,182,183,1,0,0,0,183,184,3,64,32,0,184,185,5,3,0,0,185,195,1,0,0,0,
  	186,187,5,1,0,0,187,189,5,8,0,0,188,190,5,229,0,0,189,188,1,0,0,0,189,
  	190,1,0,0,0,190,191,1,0,0,0,191,192,3,68,34,0,192,193,5,3,0,0,193,195,
  	1,0,0,0,194,162,1,0,0,0,194,170,1,0,0,0,194,178,1,0,0,0,194,186,1,0,0,
  	0,195,7,1,0,0,0,196,197,5,1,0,0,197,198,5,9,0,0,198,199,5,228,0,0,199,
  	200,5,228,0,0,200,201,5,3,0,0,201,9,1,0,0,0,202,203,5,1,0,0,203,204,3,
  	8,4,0,204,205,3,6,3,0,205,206,5,3,0,0,206,11,1,0,0,0,207,208,5,1,0,0,
  	208,210,5,5,0,0,209,211,5,229,0,0,210,209,1,0,0,0,210,211,1,0,0,0,211,
  	212,1,0,0,0,212,229,3,26,13,0,213,214,3,8,4,0,214,215,3,88,44,0,215,230,
  	1,0,0,0,216,220,3,88,44,0,217,219,3,14,7,0,218,217,1,0,0,0,219,222,1,
  	0,0,0,220,218,1,0,0,0,220,221,1,0,0,0,221,226,1,0,0,0,222,220,1,0,0,0,
  	223,225,3,90,45,0,224,223,1,0,0,0,225,228,1,0,0,0,226,224,1,0,0,0,226,
  	227,1,0,0,0,227,230,1,0,0,0,228,226,1,0,0,0,229,213,1,0,0,0,229,216,1,
  	0,0,0,230,231,1,0,0,0,231,232,5,3,0,0,232,13,1,0,0,0,233,234,5,1,0,0,
  	234,244,5,10,0,0,235,237,5,229,0,0,236,235,1,0,0,0,236,237,1,0,0,0,237,
  	238,1,0,0,0,238,245,3,54,27,0,239,241,3,54,27,0,240,239,1,0,0,0,241,242,
  	1,0,0,0,242,240,1,0,0,0,242,243,1,0,0,0,243,245,1,0,0,0,244,236,1,0,0,
  	0,244,240,1,0,0,0,245,246,1,0,0,0,246,247,5,3,0,0,247,15,1,0,0,0,248,
  	249,5,1,0,0,249,251,5,6,0,0,250,252,5,229,0,0,251,250,1,0,0,0,251,252,
  	1,0,0,0,252,253,1,0,0,0,253,276,3,26,13,0,254,256,3,8,4,0,255,254,1,0,
  	0,0,255,256,1,0,0,0,256,257,1,0,0,0,257,277,3,66,33,0,258,259,5,231,0,
  	0,259,260,5,1,0,0,260,273,5,11,0,0,261,263,3,34,17,0,262,261,1,0,0,0,
  	263,266,1,0,0,0,264,262,1,0,0,0,264,265,1,0,0,0,265,274,1,0,0,0,266,264,
  	1,0,0,0,267,269,3,72,36,0,268,267,1,0,0,0,269,272,1,0,0,0,270,268,1,0,
  	0,0,270,271,1,0,0,0,271,274,1,0,0,0,272,270,1,0,0,0,273,264,1,0,0,0,273,
  	270,1,0,0,0,274,275,1,0,0,0,275,277,5,3,0,0,276,255,1,0,0,0,276,258,1,
  	0,0,0,277,278,1,0,0,0,278,279,5,3,0,0,279,17,1,0,0,0,280,281,5,1,0,0,
  	281,283,5,7,0,0,282,284,5,229,0,0,283,282,1,0,0,0,283,284,1,0,0,0,284,
  	285,1,0,0,0,285,299,3,26,13,0,286,288,3,8,4,0,287,286,1,0,0,0,287,288,
  	1,0,0,0,288,289,1,0,0,0,289,300,3,64,32,0,290,291,5,1,0,0,291,295,5,12,
  	0,0,292,294,5,228,0,0,293,292,1,0,0,0,294,297,1,0,0,0,295,293,1,0,0,0,
  	295,296,1,0,0,0,296,298,1,0,0,0,297,295,1,0,0,0,298,300,5,3,0,0,299,287,
  	1,0,0,0,299,290,1,0,0,0,300,301,1,0,0,0,301,302,5,3,0,0,302,19,1,0,0,
  	0,303,304,5,1,0,0,304,306,5,8,0,0,305,307,5,229,0,0,306,305,1,0,0,0,306,
  	307,1,0,0,0,307,308,1,0,0,0,308,315,3,26,13,0,309,310,3,8,4,0,310,311,
  	3,68,34,0,311,316,1,0,0,0,312,313,3,68,34,0,313,314,3,100,50,0,314,316,
  	1,0,0,0,315,309,1,0,0,0,315,312,1,0,0,0,316,317,1,0,0,0,317,318,5,3,0,
  	0,318,21,1,0,0,0,319,320,5,1,0,0,320,321,5,13,0,0,321,322,5,228,0,0,322,
  	323,3,24,12,0,323,324,5,3,0,0,324,23,1,0,0,0,325,326,5,1,0,0,326,327,
  	5,5,0,0,327,328,3,72,36,0,328,329,5,3,0,0,329,346,1,0,0,0,330,331,5,1,
  	0,0,331,332,5,6,0,0,332,333,3,74,37,0,333,334,5,3,0,0,334,346,1,0,0,0,
  	335,336,5,1,0,0,336,337,5,7,0,0,337,338,3,76,38,0,338,339,5,3,0,0,339,
  	346,1,0,0,0,340,341,5,1,0,0,341,342,5,8,0,0,342,343,3,78,39,0,343,344,
  	5,3,0,0,344,346,1,0,0,0,345,325,1,0,0,0,345,330,1,0,0,0,345,335,1,0,0,
  	0,345,340,1,0,0,0,346,25,1,0,0,0,347,348,5,1,0,0,348,349,5,13,0,0,349,
  	350,5,228,0,0,350,351,5,3,0,0,351,27,1,0,0,0,352,353,5,1,0,0,353,354,
  	5,14,0,0,354,355,3,72,36,0,355,356,5,3,0,0,356,29,1,0,0,0,357,358,5,1,
  	0,0,358,360,5,11,0,0,359,361,5,229,0,0,360,359,1,0,0,0,360,361,1,0,0,
  	0,361,388,1,0,0,0,362,364,3,36,18,0,363,362,1,0,0,0,363,364,1,0,0,0,364,
  	365,1,0,0,0,365,367,5,1,0,0,366,368,5,15,0,0,367,366,1,0,0,0,367,368,
  	1,0,0,0,368,369,1,0,0,0,369,370,3,100,50,0,370,371,5,3,0,0,371,374,1,
  	0,0,0,372,374,5,16,0,0,373,363,1,0,0,0,373,372,1,0,0,0,373,374,1,0,0,
  	0,374,375,1,0,0,0,375,389,3,32,16,0,376,378,5,1,0,0,377,379,5,15,0,0,
  	378,377,1,0,0,0,378,379,1,0,0,0,379,380,1,0,0,0,380,381,3,100,50,0,381,
  	385,5,3,0,0,382,384,3,72,36,0,383,382,1,0,0,0,384,387,1,0,0,0,385,383,
  	1,0,0,0,385,386,1,0,0,0,386,389,1,0,0,0,387,385,1,0,0,0,388,373,1,0,0,
  	0,388,376,1,0,0,0,389,390,1,0,0,0,390,391,5,3,0,0,391,31,1,0,0,0,392,
  	396,5,231,0,0,393,395,3,34,17,0,394,393,1,0,0,0,395,398,1,0,0,0,396,394,
  	1,0,0,0,396,397,1,0,0,0,397,407,1,0,0,0,398,396,1,0,0,0,399,403,5,5,0,
  	0,400,402,3,72,36,0,401,400,1,0,0,0,402,405,1,0,0,0,403,401,1,0,0,0,403,
  	404,1,0,0,0,404,407,1,0,0,0,405,403,1,0,0,0,406,392,1,0,0,0,406,399,1,
  	0,0,0,407,33,1,0,0,0,408,409,5,1,0,0,409,410,5,17,0,0,410,411,3,100,50,
  	0,411,412,5,3,0,0,412,418,1,0,0,0,413,414,5,1,0,0,414,415,3,100,50,0,
  	415,416,5,3,0,0,416,418,1,0,0,0,417,408,1,0,0,0,417,413,1,0,0,0,418,35,
  	1,0,0,0,419,420,5,1,0,0,420,421,5,6,0,0,421,422,3,74,37,0,422,423,5,3,
  	0,0,423,37,1,0,0,0,424,425,5,1,0,0,425,427,5,12,0,0,426,428,5,229,0,0,
  	427,426,1,0,0,0,427,428,1,0,0,0,428,439,1,0,0,0,429,431,3,40,20,0,430,
  	429,1,0,0,0,430,431,1,0,0,0,431,432,1,0,0,0,432,434,5,1,0,0,433,435,5,
  	15,0,0,434,433,1,0,0,0,434,435,1,0,0,0,435,436,1,0,0,0,436,437,3,100,
  	50,0,437,438,5,3,0,0,438,440,1,0,0,0,439,430,1,0,0,0,439,440,1,0,0,0,
  	440,444,1,0,0,0,441,443,5,228,0,0,442,441,1,0,0,0,443,446,1,0,0,0,444,
  	442,1,0,0,0,444,445,1,0,0,0,445,447,1,0,0,0,446,444,1,0,0,0,447,448,5,
  	3,0,0,448,39,1,0,0,0,449,450,5,1,0,0,450,451,5,7,0,0,451,452,3,76,38,
  	0,452,453,5,3,0,0,453,41,1,0,0,0,454,455,5,225,0,0,455,43,1,0,0,0,456,
  	457,5,225,0,0,457,45,1,0,0,0,458,459,5,226,0,0,459,47,1,0,0,0,460,461,
  	5,226,0,0,461,49,1,0,0,0,462,463,5,227,0,0,463,51,1,0,0,0,464,465,5,227,
  	0,0,465,53,1,0,0,0,466,467,7,0,0,0,467,55,1,0,0,0,468,469,5,1,0,0,469,
  	478,5,18,0,0,470,471,5,229,0,0,471,479,3,54,27,0,472,474,3,54,27,0,473,
  	472,1,0,0,0,474,477,1,0,0,0,475,473,1,0,0,0,475,476,1,0,0,0,476,479,1,
  	0,0,0,477,475,1,0,0,0,478,470,1,0,0,0,478,475,1,0,0,0,479,480,1,0,0,0,
  	480,481,5,3,0,0,481,57,1,0,0,0,482,483,5,1,0,0,483,487,5,19,0,0,484,486,
  	3,54,27,0,485,484,1,0,0,0,486,489,1,0,0,0,487,485,1,0,0,0,487,488,1,0,
  	0,0,488,490,1,0,0,0,489,487,1,0,0,0,490,491,5,3,0,0,491,59,1,0,0,0,492,
  	493,5,1,0,0,493,497,5,5,0,0,494,496,3,56,28,0,495,494,1,0,0,0,496,499,
  	1,0,0,0,497,495,1,0,0,0,497,498,1,0,0,0,498,503,1,0,0,0,499,497,1,0,0,
  	0,500,502,3,58,29,0,501,500,1,0,0,0,502,505,1,0,0,0,503,501,1,0,0,0,503,
  	504,1,0,0,0,504,506,1,0,0,0,505,503,1,0,0,0,506,507,5,3,0,0,507,61,1,
  	0,0,0,508,510,3,44,22,0,509,511,3,44,22,0,510,509,1,0,0,0,510,511,1,0,
  	0,0,511,63,1,0,0,0,512,513,3,62,31,0,513,65,1,0,0,0,514,515,3,62,31,0,
  	515,516,5,231,0,0,516,67,1,0,0,0,517,524,3,54,27,0,518,519,5,1,0,0,519,
  	520,5,20,0,0,520,521,3,54,27,0,521,522,5,3,0,0,522,524,1,0,0,0,523,517,
  	1,0,0,0,523,518,1,0,0,0,524,69,1,0,0,0,525,528,3,46,23,0,526,528,5,229,
  	0,0,527,525,1,0,0,0,527,526,1,0,0,0,528,71,1,0,0,0,529,532,3,46,23,0,
  	530,532,5,229,0,0,531,529,1,0,0,0,531,530,1,0,0,0,532,73,1,0,0,0,533,
  	536,3,46,23,0,534,536,5,229,0,0,535,533,1,0,0,0,535,534,1,0,0,0,536,75,
  	1,0,0,0,537,540,3,46,23,0,538,540,5,229,0,0,539,537,1,0,0,0,539,538,1,
  	0,0,0,540,77,1,0,0,0,541,544,3,46,23,0,542,544,5,229,0,0,543,541,1,0,
  	0,0,543,542,1,0,0,0,544,79,1,0,0,0,545,548,3,46,23,0,546,548,5,229,0,
  	0,547,545,1,0,0,0,547,546,1,0,0,0,548,81,1,0,0,0,549,552,3,46,23,0,550,
  	552,5,229,0,0,551,549,1,0,0,0,551,550,1,0,0,0,552,83,1,0,0,0,553,556,
  	3,46,23,0,554,556,5,229,0,0,555,553,1,0,0,0,555,554,1,0,0,0,556,85,1,
  	0,0,0,557,560,3,46,23,0,558,560,5,229,0,0,559,557,1,0,0,0,559,558,1,0,
  	0,0,560,87,1,0,0,0,561,562,5,1,0,0,562,563,5,4,0,0,563,564,3,70,35,0,
  	564,565,5,3,0,0,565,567,1,0,0,0,566,561,1,0,0,0,566,567,1,0,0,0,567,571,
  	1,0,0,0,568,570,3,56,28,0,569,568,1,0,0,0,570,573,1,0,0,0,571,569,1,0,
  	0,0,571,572,1,0,0,0,572,577,1,0,0,0,573,571,1,0,0,0,574,576,3,58,29,0,
  	575,574,1,0,0,0,576,579,1,0,0,0,577,575,1,0,0,0,577,578,1,0,0,0,578,89,
  	1,0,0,0,579,577,1,0,0,0,580,584,3,102,51,0,581,584,3,96,48,0,582,584,
  	3,98,49,0,583,580,1,0,0,0,583,581,1,0,0,0,583,582,1,0,0,0,584,91,1,0,
  	0,0,585,587,5,229,0,0,586,585,1,0,0,0,586,587,1,0,0,0,587,93,1,0,0,0,
  	588,590,3,58,29,0,589,588,1,0,0,0,589,590,1,0,0,0,590,593,1,0,0,0,591,
  	593,3,88,44,0,592,589,1,0,0,0,592,591,1,0,0,0,593,95,1,0,0,0,594,595,
  	5,21,0,0,595,596,3,92,46,0,596,600,3,94,47,0,597,599,3,90,45,0,598,597,
  	1,0,0,0,599,602,1,0,0,0,600,598,1,0,0,0,600,601,1,0,0,0,601,603,1,0,0,
  	0,602,600,1,0,0,0,603,605,5,22,0,0,604,606,5,229,0,0,605,604,1,0,0,0,
  	605,606,1,0,0,0,606,644,1,0,0,0,607,608,5,23,0,0,608,609,3,92,46,0,609,
  	613,3,94,47,0,610,612,3,90,45,0,611,610,1,0,0,0,612,615,1,0,0,0,613,611,
  	1,0,0,0,613,614,1,0,0,0,614,616,1,0,0,0,615,613,1,0,0,0,616,618,5,22,
  	0,0,617,619,5,229,0,0,618,617,1,0,0,0,618,619,1,0,0,0,619,644,1,0,0,0,
  	620,621,5,24,0,0,621,622,3,92,46,0,622,626,3,94,47,0,623,625,3,90,45,
  	0,624,623,1,0,0,0,625,628,1,0,0,0,626,624,1,0,0,0,626,627,1,0,0,0,627,
  	629,1,0,0,0,628,626,1,0,0,0,629,631,5,25,0,0,630,632,5,229,0,0,631,630,
  	1,0,0,0,631,632,1,0,0,0,632,636,1,0,0,0,633,635,3,90,45,0,634,633,1,0,
  	0,0,635,638,1,0,0,0,636,634,1,0,0,0,636,637,1,0,0,0,637,639,1,0,0,0,638,
  	636,1,0,0,0,639,641,5,22,0,0,640,642,5,229,0,0,641,640,1,0,0,0,641,642,
  	1,0,0,0,642,644,1,0,0,0,643,594,1,0,0,0,643,607,1,0,0,0,643,620,1,0,0,
  	0,644,97,1,0,0,0,645,646,5,1,0,0,646,650,3,102,51,0,647,649,3,98,49,0,
  	648,647,1,0,0,0,649,652,1,0,0,0,650,648,1,0,0,0,650,651,1,0,0,0,651,653,
  	1,0,0,0,652,650,1,0,0,0,653,654,5,3,0,0,654,712,1,0,0,0,655,656,5,1,0,
  	0,656,657,5,21,0,0,657,658,3,92,46,0,658,662,3,94,47,0,659,661,3,90,45,
  	0,660,659,1,0,0,0,661,664,1,0,0,0,662,660,1,0,0,0,662,663,1,0,0,0,663,
  	665,1,0,0,0,664,662,1,0,0,0,665,666,5,3,0,0,666,712,1,0,0,0,667,668,5,
  	1,0,0,668,669,5,23,0,0,669,670,3,92,46,0,670,674,3,94,47,0,671,673,3,
  	90,45,0,672,671,1,0,0,0,673,676,1,0,0,0,674,672,1,0,0,0,674,675,1,0,0,
  	0,675,677,1,0,0,0,676,674,1,0,0,0,677,678,5,3,0,0,678,712,1,0,0,0,679,
  	680,5,1,0,0,680,681,5,24,0,0,681,682,3,92,46,0,682,686,3,94,47,0,683,
  	685,3,98,49,0,684,683,1,0,0,0,685,688,1,0,0,0,686,684,1,0,0,0,686,687,
  	1,0,0,0,687,689,1,0,0,0,688,686,1,0,0,0,689,690,5,1,0,0,690,694,5,26,
  	0,0,691,693,3,90,45,0,692,691,1,0,0,0,693,696,1,0,0,0,694,692,1,0,0,0,
  	694,695,1,0,0,0,695,697,1,0,0,0,696,694,1,0,0,0,697,707,5,3,0,0,698,699,
  	5,1,0,0,699,703,5,25,0,0,700,702,3,90,45,0,701,700,1,0,0,0,702,705,1,
  	0,0,0,703,701,1,0,0,0,703,704,1,0,0,0,704,706,1,0,0,0,705,703,1,0,0,0,
  	706,708,5,3,0,0,707,698,1,0,0,0,707,708,1,0,0,0,708,709,1,0,0,0,709,710,
  	5,3,0,0,710,712,1,0,0,0,711,645,1,0,0,0,711,655,1,0,0,0,711,667,1,0,0,
  	0,711,679,1,0,0,0,712,99,1,0,0,0,713,714,5,27,0,0,714,728,3,42,21,0,715,
  	716,5,28,0,0,716,728,3,44,22,0,717,718,5,29,0,0,718,728,3,50,25,0,719,
  	720,5,30,0,0,720,728,3,52,26,0,721,722,5,31,0,0,722,728,5,232,0,0,723,
  	724,5,32,0,0,724,728,3,72,36,0,725,726,5,33,0,0,726,728,3,78,39,0,727,
  	713,1,0,0,0,727,715,1,0,0,0,727,717,1,0,0,0,727,719,1,0,0,0,727,721,1,
  	0,0,0,727,723,1,0,0,0,727,725,1,0,0,0,728,101,1,0,0,0,729,736,3,104,52,
  	0,730,736,3,106,53,0,731,736,3,108,54,0,732,736,3,110,55,0,733,736,3,
  	112,56,0,734,736,3,116,58,0,735,729,1,0,0,0,735,730,1,0,0,0,735,731,1,
  	0,0,0,735,732,1,0,0,0,735,733,1,0,0,0,735,734,1,0,0,0,736,103,1,0,0,0,
  	737,757,5,34,0,0,738,757,5,35,0,0,739,740,5,36,0,0,740,757,3,86,43,0,
  	741,742,5,37,0,0,742,757,3,86,43,0,743,745,5,38,0,0,744,746,3,86,43,0,
  	745,744,1,0,0,0,746,747,1,0,0,0,747,745,1,0,0,0,747,748,1,0,0,0,748,757,
  	1,0,0,0,749,757,5,39,0,0,750,751,5,40,0,0,751,757,3,72,36,0,752,753,5,
  	41,0,0,753,754,3,74,37,0,754,755,3,88,44,0,755,757,1,0,0,0,756,737,1,
  	0,0,0,756,738,1,0,0,0,756,739,1,0,0,0,756,741,1,0,0,0,756,743,1,0,0,0,
  	756,749,1,0,0,0,756,750,1,0,0,0,756,752,1,0,0,0,757,105,1,0,0,0,758,759,
  	5,31,0,0,759,764,5,232,0,0,760,764,5,42,0,0,761,762,5,32,0,0,762,764,
  	3,72,36,0,763,758,1,0,0,0,763,760,1,0,0,0,763,761,1,0,0,0,764,107,1,0,
  	0,0,765,774,5,43,0,0,766,770,5,44,0,0,767,769,3,58,29,0,768,767,1,0,0,
  	0,769,772,1,0,0,0,770,768,1,0,0,0,770,771,1,0,0,0,771,774,1,0,0,0,772,
  	770,1,0,0,0,773,765,1,0,0,0,773,766,1,0,0,0,774,109,1,0,0,0,775,776,5,
  	45,0,0,776,786,3,84,42,0,777,778,5,46,0,0,778,786,3,84,42,0,779,780,5,
  	47,0,0,780,786,3,84,42,0,781,782,5,33,0,0,782,786,3,78,39,0,783,784,5,
  	48,0,0,784,786,3,78,39,0,785,775,1,0,0,0,785,777,1,0,0,0,785,779,1,0,
  	0,0,785,781,1,0,0,0,785,783,1,0,0,0,786,111,1,0,0,0,787,789,5,49,0,0,
  	788,790,3,74,37,0,789,788,1,0,0,0,789,790,1,0,0,0,790,821,1,0,0,0,791,
  	793,5,50,0,0,792,794,3,74,37,0,793,792,1,0,0,0,793,794,1,0,0,0,794,821,
  	1,0,0,0,795,797,5,51,0,0,796,798,3,74,37,0,797,796,1,0,0,0,797,798,1,
  	0,0,0,798,821,1,0,0,0,799,801,5,52,0,0,800,802,3,74,37,0,801,800,1,0,
  	0,0,801,802,1,0,0,0,802,821,1,0,0,0,803,805,5,53,0,0,804,806,3,74,37,
  	0,805,804,1,0,0,0,805,806,1,0,0,0,806,821,1,0,0,0,807,811,5,54,0,0,808,
  	809,3,74,37,0,809,810,3,74,37,0,810,812,1,0,0,0,811,808,1,0,0,0,811,812,
  	1,0,0,0,812,821,1,0,0,0,813,815,5,55,0,0,814,816,3,74,37,0,815,814,1,
  	0,0,0,815,816,1,0,0,0,816,817,1,0,0,0,817,821,3,80,40,0,818,819,5,56,
  	0,0,819,821,3,80,40,0,820,787,1,0,0,0,820,791,1,0,0,0,820,795,1,0,0,0,
  	820,799,1,0,0,0,820,803,1,0,0,0,820,807,1,0,0,0,820,813,1,0,0,0,820,818,
  	1,0,0,0,821,113,1,0,0,0,822,824,5,233,0,0,823,822,1,0,0,0,823,824,1,0,
  	0,0,824,826,1,0,0,0,825,827,5,234,0,0,826,825,1,0,0,0,826,827,1,0,0,0,
  	827,115,1,0,0,0,828,830,5,57,0,0,829,831,3,76,38,0,830,829,1,0,0,0,830,
  	831,1,0,0,0,831,969,1,0,0,0,832,834,5,58,0,0,833,835,3,76,38,0,834,833,
  	1,0,0,0,834,835,1,0,0,0,835,969,1,0,0,0,836,838,5,59,0,0,837,839,3,76,
  	38,0,838,837,1,0,0,0,838,839,1,0,0,0,839,969,1,0,0,0,840,844,5,60,0,0,
  	841,842,3,76,38,0,842,843,3,76,38,0,843,845,1,0,0,0,844,841,1,0,0,0,844,
  	845,1,0,0,0,845,969,1,0,0,0,846,848,5,61,0,0,847,849,3,76,38,0,848,847,
  	1,0,0,0,848,849,1,0,0,0,849,850,1,0,0,0,850,969,3,82,41,0,851,852,5,62,
  	0,0,852,969,3,82,41,0,853,855,5,63,0,0,854,856,3,76,38,0,855,854,1,0,
  	0,0,855,856,1,0,0,0,856,857,1,0,0,0,857,969,3,114,57,0,858,860,5,64,0,
  	0,859,861,3,76,38,0,860,859,1,0,0,0,860,861,1,0,0,0,861,862,1,0,0,0,862,
  	969,3,114,57,0,863,865,5,65,0,0,864,866,3,76,38,0,865,864,1,0,0,0,865,
  	866,1,0,0,0,866,867,1,0,0,0,867,969,3,114,57,0,868,870,5,66,0,0,869,871,
  	3,76,38,0,870,869,1,0,0,0,870,871,1,0,0,0,871,872,1,0,0,0,872,969,3,114,
  	57,0,873,875,5,67,0,0,874,876,3,76,38,0,875,874,1,0,0,0,875,876,1,0,0,
  	0,876,877,1,0,0,0,877,969,3,114,57,0,878,880,5,68,0,0,879,881,3,76,38,
  	0,880,879,1,0,0,0,880,881,1,0,0,0,881,882,1,0,0,0,882,969,3,114,57,0,
  	883,885,5,69,0,0,884,886,3,76,38,0,885,884,1,0,0,0,885,886,1,0,0,0,886,
  	887,1,0,0,0,887,969,3,114,57,0,888,890,5,70,0,0,889,891,3,76,38,0,890,
  	889,1,0,0,0,890,891,1,0,0,0,891,892,1,0,0,0,892,969,3,114,57,0,893,895,
  	5,71,0,0,894,896,3,76,38,0,895,894,1,0,0,0,895,896,1,0,0,0,896,897,1,
  	0,0,0,897,969,3,114,57,0,898,900,5,72,0,0,899,901,3,76,38,0,900,899,1,
  	0,0,0,900,901,1,0,0,0,901,902,1,0,0,0,902,969,3,114,57,0,903,905,5,73,
  	0,0,904,906,3,76,38,0,905,904,1,0,0,0,905,906,1,0,0,0,906,907,1,0,0,0,
  	907,969,3,114,57,0,908,910,5,74,0,0,909,911,3,76,38,0,910,909,1,0,0,0,
  	910,911,1,0,0,0,911,912,1,0,0,0,912,969,3,114,57,0,913,915,5,75,0,0,914,
  	916,3,76,38,0,915,914,1,0,0,0,915,916,1,0,0,0,916,917,1,0,0,0,917,969,
  	3,114,57,0,918,920,5,76,0,0,919,921,3,76,38,0,920,919,1,0,0,0,920,921,
  	1,0,0,0,921,922,1,0,0,0,922,969,3,114,57,0,923,925,5,77,0,0,924,926,3,
  	76,38,0,925,924,1,0,0,0,925,926,1,0,0,0,926,927,1,0,0,0,927,969,3,114,
  	57,0,928,930,5,78,0,0,929,931,3,76,38,0,930,929,1,0,0,0,930,931,1,0,0,
  	0,931,932,1,0,0,0,932,969,3,114,57,0,933,935,5,79,0,0,934,936,3,76,38,
  	0,935,934,1,0,0,0,935,936,1,0,0,0,936,937,1,0,0,0,937,969,3,114,57,0,
  	938,940,5,80,0,0,939,941,3,76,38,0,940,939,1,0,0,0,940,941,1,0,0,0,941,
  	942,1,0,0,0,942,969,3,114,57,0,943,945,5,81,0,0,944,946,3,76,38,0,945,
  	944,1,0,0,0,945,946,1,0,0,0,946,947,1,0,0,0,947,969,3,114,57,0,948,950,
  	5,82,0,0,949,951,3,76,38,0,950,949,1,0,0,0,950,951,1,0,0,0,951,952,1,
  	0,0,0,952,969,3,114,57,0,953,955,5,83,0,0,954,956,3,76,38,0,955,954,1,
  	0,0,0,955,956,1,0,0,0,956,957,1,0,0,0,957,969,3,114,57,0,958,960,5,84,
  	0,0,959,961,3,76,38,0,960,959,1,0,0,0,960,961,1,0,0,0,961,962,1,0,0,0,
  	962,969,3,114,57,0,963,965,5,85,0,0,964,966,3,76,38,0,965,964,1,0,0,0,
  	965,966,1,0,0,0,966,967,1,0,0,0,967,969,3,114,57,0,968,828,1,0,0,0,968,
  	832,1,0,0,0,968,836,1,0,0,0,968,840,1,0,0,0,968,846,1,0,0,0,968,851,1,
  	0,0,0,968,853,1,0,0,0,968,858,1,0,0,0,968,863,1,0,0,0,968,868,1,0,0,0,
  	968,873,1,0,0,0,968,878,1,0,0,0,968,883,1,0,0,0,968,888,1,0,0,0,968,893,
  	1,0,0,0,968,898,1,0,0,0,968,903,1,0,0,0,968,908,1,0,0,0,968,913,1,0,0,
  	0,968,918,1,0,0,0,968,923,1,0,0,0,968,928,1,0,0,0,968,933,1,0,0,0,968,
  	938,1,0,0,0,968,943,1,0,0,0,968,948,1,0,0,0,968,953,1,0,0,0,968,958,1,
  	0,0,0,968,963,1,0,0,0,969,117,1,0,0,0,970,971,5,27,0,0,971,1115,3,42,
  	21,0,972,973,5,28,0,0,973,1115,3,44,22,0,974,975,5,29,0,0,975,1115,3,
  	50,25,0,976,977,5,30,0,0,977,1115,3,52,26,0,978,1115,5,86,0,0,979,1115,
  	5,87,0,0,980,1115,5,88,0,0,981,1115,5,89,0,0,982,1115,5,90,0,0,983,1115,
  	5,91,0,0,984,1115,5,92,0,0,985,1115,5,93,0,0,986,1115,5,94,0,0,987,1115,
  	5,95,0,0,988,1115,5,96,0,0,989,1115,5,97,0,0,990,1115,5,98,0,0,991,1115,
  	5,99,0,0,992,1115,5,100,0,0,993,1115,5,101,0,0,994,1115,5,102,0,0,995,
  	1115,5,103,0,0,996,1115,5,104,0,0,997,1115,5,105,0,0,998,1115,5,106,0,
  	0,999,1115,5,107,0,0,1000,1115,5,108,0,0,1001,1115,5,109,0,0,1002,1115,
  	5,110,0,0,1003,1115,5,111,0,0,1004,1115,5,112,0,0,1005,1115,5,113,0,0,
  	1006,1115,5,114,0,0,1007,1115,5,115,0,0,1008,1115,5,116,0,0,1009,1115,
  	5,117,0,0,1010,1115,5,118,0,0,1011,1115,5,119,0,0,1012,1115,5,120,0,0,
  	1013,1115,5,121,0,0,1014,1115,5,122,0,0,1015,1115,5,123,0,0,1016,1115,
  	5,124,0,0,1017,1115,5,125,0,0,1018,1115,5,126,0,0,1019,1115,5,127,0,0,
  	1020,1115,5,128,0,0,1021,1115,5,129,0,0,1022,1115,5,130,0,0,1023,1115,
  	5,131,0,0,1024,1115,5,132,0,0,1025,1115,5,133,0,0,1026,1115,5,134,0,0,
  	1027,1115,5,135,0,0,1028,1115,5,136,0,0,1029,1115,5,137,0,0,1030,1115,
  	5,138,0,0,1031,1115,5,139,0,0,1032,1115,5,140,0,0,1033,1115,5,141,0,0,
  	1034,1115,5,142,0,0,1035,1115,5,143,0,0,1036,1115,5,144,0,0,1037,1115,
  	5,145,0,0,1038,1115,5,146,0,0,1039,1115,5,147,0,0,1040,1115,5,148,0,0,
  	1041,1115,5,149,0,0,1042,1115,5,150,0,0,1043,1115,5,151,0,0,1044,1115,
  	5,152,0,0,1045,1115,5,153,0,0,1046,1115,5,154,0,0,1047,1115,5,155,0,0,
  	1048,1115,5,156,0,0,1049,1115,5,157,0,0,1050,1115,5,158,0,0,1051,1115,
  	5,159,0,0,1052,1115,5,160,0,0,1053,1115,5,161,0,0,1054,1115,5,162,0,0,
  	1055,1115,5,163,0,0,1056,1115,5,164,0,0,1057,1115,5,165,0,0,1058,1115,
  	5,166,0,0,1059,1115,5,167,0,0,1060,1115,5,168,0,0,1061,1115,5,169,0,0,
  	1062,1115,5,170,0,0,1063,1115,5,171,0,0,1064,1115,5,172,0,0,1065,1115,
  	5,173,0,0,1066,1115,5,174,0,0,1067,1115,5,175,0,0,1068,1115,5,176,0,0,
  	1069,1115,5,177,0,0,1070,1115,5,178,0,0,1071,1115,5,179,0,0,1072,1115,
  	5,180,0,0,1073,1115,5,181,0,0,1074,1115,5,182,0,0,1075,1115,5,183,0,0,
  	1076,1115,5,184,0,0,1077,1115,5,185,0,0,1078,1115,5,186,0,0,1079,1115,
  	5,187,0,0,1080,1115,5,188,0,0,1081,1115,5,189,0,0,1082,1115,5,190,0,0,
  	1083,1115,5,191,0,0,1084,1115,5,192,0,0,1085,1115,5,193,0,0,1086,1115,
  	5,194,0,0,1087,1115,5,195,0,0,1088,1115,5,196,0,0,1089,1115,5,197,0,0,
  	1090,1115,5,198,0,0,1091,1115,5,199,0,0,1092,1115,5,200,0,0,1093,1115,
  	5,201,0,0,1094,1115,5,202,0,0,1095,1115,5,203,0,0,1096,1115,5,204,0,0,
  	1097,1115,5,205,0,0,1098,1115,5,206,0,0,1099,1115,5,207,0,0,1100,1115,
  	5,208,0,0,1101,1115,5,209,0,0,1102,1115,5,210,0,0,1103,1115,5,211,0,0,
  	1104,1115,5,212,0,0,1105,1115,5,213,0,0,1106,1115,5,214,0,0,1107,1115,
  	5,215,0,0,1108,1115,5,216,0,0,1109,1115,5,217,0,0,1110,1115,5,218,0,0,
  	1111,1115,5,219,0,0,1112,1115,5,220,0,0,1113,1115,5,221,0,0,1114,970,
  	1,0,0,0,1114,972,1,0,0,0,1114,974,1,0,0,0,1114,976,1,0,0,0,1114,978,1,
  	0,0,0,1114,979,1,0,0,0,1114,980,1,0,0,0,1114,981,1,0,0,0,1114,982,1,0,
  	0,0,1114,983,1,0,0,0,1114,984,1,0,0,0,1114,985,1,0,0,0,1114,986,1,0,0,
  	0,1114,987,1,0,0,0,1114,988,1,0,0,0,1114,989,1,0,0,0,1114,990,1,0,0,0,
  	1114,991,1,0,0,0,1114,992,1,0,0,0,1114,993,1,0,0,0,1114,994,1,0,0,0,1114,
  	995,1,0,0,0,1114,996,1,0,0,0,1114,997,1,0,0,0,1114,998,1,0,0,0,1114,999,
  	1,0,0,0,1114,1000,1,0,0,0,1114,1001,1,0,0,0,1114,1002,1,0,0,0,1114,1003,
  	1,0,0,0,1114,1004,1,0,0,0,1114,1005,1,0,0,0,1114,1006,1,0,0,0,1114,1007,
  	1,0,0,0,1114,1008,1,0,0,0,1114,1009,1,0,0,0,1114,1010,1,0,0,0,1114,1011,
  	1,0,0,0,1114,1012,1,0,0,0,1114,1013,1,0,0,0,1114,1014,1,0,0,0,1114,1015,
  	1,0,0,0,1114,1016,1,0,0,0,1114,1017,1,0,0,0,1114,1018,1,0,0,0,1114,1019,
  	1,0,0,0,1114,1020,1,0,0,0,1114,1021,1,0,0,0,1114,1022,1,0,0,0,1114,1023,
  	1,0,0,0,1114,1024,1,0,0,0,1114,1025,1,0,0,0,1114,1026,1,0,0,0,1114,1027,
  	1,0,0,0,1114,1028,1,0,0,0,1114,1029,1,0,0,0,1114,1030,1,0,0,0,1114,1031,
  	1,0,0,0,1114,1032,1,0,0,0,1114,1033,1,0,0,0,1114,1034,1,0,0,0,1114,1035,
  	1,0,0,0,1114,1036,1,0,0,0,1114,1037,1,0,0,0,1114,1038,1,0,0,0,1114,1039,
  	1,0,0,0,1114,1040,1,0,0,0,1114,1041,1,0,0,0,1114,1042,1,0,0,0,1114,1043,
  	1,0,0,0,1114,1044,1,0,0,0,1114,1045,1,0,0,0,1114,1046,1,0,0,0,1114,1047,
  	1,0,0,0,1114,1048,1,0,0,0,1114,1049,1,0,0,0,1114,1050,1,0,0,0,1114,1051,
  	1,0,0,0,1114,1052,1,0,0,0,1114,1053,1,0,0,0,1114,1054,1,0,0,0,1114,1055,
  	1,0,0,0,1114,1056,1,0,0,0,1114,1057,1,0,0,0,1114,1058,1,0,0,0,1114,1059,
  	1,0,0,0,1114,1060,1,0,0,0,1114,1061,1,0,0,0,1114,1062,1,0,0,0,1114,1063,
  	1,0,0,0,1114,1064,1,0,0,0,1114,1065,1,0,0,0,1114,1066,1,0,0,0,1114,1067,
  	1,0,0,0,1114,1068,1,0,0,0,1114,1069,1,0,0,0,1114,1070,1,0,0,0,1114,1071,
  	1,0,0,0,1114,1072,1,0,0,0,1114,1073,1,0,0,0,1114,1074,1,0,0,0,1114,1075,
  	1,0,0,0,1114,1076,1,0,0,0,1114,1077,1,0,0,0,1114,1078,1,0,0,0,1114,1079,
  	1,0,0,0,1114,1080,1,0,0,0,1114,1081,1,0,0,0,1114,1082,1,0,0,0,1114,1083,
  	1,0,0,0,1114,1084,1,0,0,0,1114,1085,1,0,0,0,1114,1086,1,0,0,0,1114,1087,
  	1,0,0,0,1114,1088,1,0,0,0,1114,1089,1,0,0,0,1114,1090,1,0,0,0,1114,1091,
  	1,0,0,0,1114,1092,1,0,0,0,1114,1093,1,0,0,0,1114,1094,1,0,0,0,1114,1095,
  	1,0,0,0,1114,1096,1,0,0,0,1114,1097,1,0,0,0,1114,1098,1,0,0,0,1114,1099,
  	1,0,0,0,1114,1100,1,0,0,0,1114,1101,1,0,0,0,1114,1102,1,0,0,0,1114,1103,
  	1,0,0,0,1114,1104,1,0,0,0,1114,1105,1,0,0,0,1114,1106,1,0,0,0,1114,1107,
  	1,0,0,0,1114,1108,1,0,0,0,1114,1109,1,0,0,0,1114,1110,1,0,0,0,1114,1111,
  	1,0,0,0,1114,1112,1,0,0,0,1114,1113,1,0,0,0,1115,119,1,0,0,0,136,123,
  	128,131,137,140,152,157,165,173,181,189,194,210,220,226,229,236,242,244,
  	251,255,264,270,273,276,283,287,295,299,306,315,345,360,363,367,373,378,
  	385,388,396,403,406,417,427,430,434,439,444,475,478,487,497,503,510,523,
  	527,531,535,539,543,547,551,555,559,566,571,577,583,586,589,592,600,605,
  	613,618,626,631,636,641,643,650,662,674,686,694,703,707,711,727,735,747,
  	756,763,770,773,785,789,793,797,801,805,811,815,820,823,826,830,834,838,
  	844,848,855,860,865,870,875,880,885,890,895,900,905,910,915,920,925,930,
  	935,940,945,950,955,960,965,968,1114
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  watParserStaticData = std::move(staticData);
}

}

WatParser::WatParser(TokenStream *input) : WatParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

WatParser::WatParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  WatParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *watParserStaticData->atn, watParserStaticData->decisionToDFA, watParserStaticData->sharedContextCache, options);
}

WatParser::~WatParser() {
  delete _interpreter;
}

const atn::ATN& WatParser::getATN() const {
  return *watParserStaticData->atn;
}

std::string WatParser::getGrammarFileName() const {
  return "Wat.g4";
}

const std::vector<std::string>& WatParser::getRuleNames() const {
  return watParserStaticData->ruleNames;
}

const dfa::Vocabulary& WatParser::getVocabulary() const {
  return watParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView WatParser::getSerializedATN() const {
  return watParserStaticData->serializedATN;
}


//----------------- ModuleContext ------------------------------------------------------------------

WatParser::ModuleContext::ModuleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::ModuleContext::Id() {
  return getToken(WatParser::Id, 0);
}

std::vector<WatParser::ModulefieldContext *> WatParser::ModuleContext::modulefield() {
  return getRuleContexts<WatParser::ModulefieldContext>();
}

WatParser::ModulefieldContext* WatParser::ModuleContext::modulefield(size_t i) {
  return getRuleContext<WatParser::ModulefieldContext>(i);
}


size_t WatParser::ModuleContext::getRuleIndex() const {
  return WatParser::RuleModule;
}


std::any WatParser::ModuleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitModule(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ModuleContext* WatParser::module() {
  ModuleContext *_localctx = _tracker.createInstance<ModuleContext>(_ctx, getState());
  enterRule(_localctx, 0, WatParser::RuleModule);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(140);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(120);
      match(WatParser::T__0);
      setState(131);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::T__1) {
        setState(121);
        match(WatParser::T__1);
        setState(123);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Id) {
          setState(122);
          match(WatParser::Id);
        }
        setState(128);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == WatParser::T__0) {
          setState(125);
          modulefield();
          setState(130);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(133);
      match(WatParser::T__2);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(137);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::T__0) {
        setState(134);
        modulefield();
        setState(139);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModulefieldContext ------------------------------------------------------------------

WatParser::ModulefieldContext::ModulefieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::TypesectionContext* WatParser::ModulefieldContext::typesection() {
  return getRuleContext<WatParser::TypesectionContext>(0);
}

WatParser::ImportsectionContext* WatParser::ModulefieldContext::importsection() {
  return getRuleContext<WatParser::ImportsectionContext>(0);
}

WatParser::FuncsectionContext* WatParser::ModulefieldContext::funcsection() {
  return getRuleContext<WatParser::FuncsectionContext>(0);
}

WatParser::TablesectionContext* WatParser::ModulefieldContext::tablesection() {
  return getRuleContext<WatParser::TablesectionContext>(0);
}

WatParser::MemorysectionContext* WatParser::ModulefieldContext::memorysection() {
  return getRuleContext<WatParser::MemorysectionContext>(0);
}

WatParser::GlobalsectionContext* WatParser::ModulefieldContext::globalsection() {
  return getRuleContext<WatParser::GlobalsectionContext>(0);
}

WatParser::ExportsectionContext* WatParser::ModulefieldContext::exportsection() {
  return getRuleContext<WatParser::ExportsectionContext>(0);
}

WatParser::StartsectionContext* WatParser::ModulefieldContext::startsection() {
  return getRuleContext<WatParser::StartsectionContext>(0);
}

WatParser::ElemsectionContext* WatParser::ModulefieldContext::elemsection() {
  return getRuleContext<WatParser::ElemsectionContext>(0);
}

WatParser::DatasectionContext* WatParser::ModulefieldContext::datasection() {
  return getRuleContext<WatParser::DatasectionContext>(0);
}


size_t WatParser::ModulefieldContext::getRuleIndex() const {
  return WatParser::RuleModulefield;
}


std::any WatParser::ModulefieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitModulefield(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ModulefieldContext* WatParser::modulefield() {
  ModulefieldContext *_localctx = _tracker.createInstance<ModulefieldContext>(_ctx, getState());
  enterRule(_localctx, 2, WatParser::RuleModulefield);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(152);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(142);
      typesection();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(143);
      importsection();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(144);
      funcsection();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(145);
      tablesection();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(146);
      memorysection();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(147);
      globalsection();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(148);
      exportsection();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(149);
      startsection();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(150);
      elemsection();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(151);
      datasection();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypesectionContext ------------------------------------------------------------------

WatParser::TypesectionContext::TypesectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::FunctypeContext* WatParser::TypesectionContext::functype() {
  return getRuleContext<WatParser::FunctypeContext>(0);
}

tree::TerminalNode* WatParser::TypesectionContext::Id() {
  return getToken(WatParser::Id, 0);
}


size_t WatParser::TypesectionContext::getRuleIndex() const {
  return WatParser::RuleTypesection;
}


std::any WatParser::TypesectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitTypesection(this);
  else
    return visitor->visitChildren(this);
}

WatParser::TypesectionContext* WatParser::typesection() {
  TypesectionContext *_localctx = _tracker.createInstance<TypesectionContext>(_ctx, getState());
  enterRule(_localctx, 4, WatParser::RuleTypesection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(154);
    match(WatParser::T__0);
    setState(155);
    match(WatParser::T__3);
    setState(157);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::Id) {
      setState(156);
      match(WatParser::Id);
    }
    setState(159);
    functype();
    setState(160);
    match(WatParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportdescContext ------------------------------------------------------------------

WatParser::ImportdescContext::ImportdescContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::TypeuseContext* WatParser::ImportdescContext::typeuse() {
  return getRuleContext<WatParser::TypeuseContext>(0);
}

tree::TerminalNode* WatParser::ImportdescContext::Id() {
  return getToken(WatParser::Id, 0);
}

WatParser::TabletypeContext* WatParser::ImportdescContext::tabletype() {
  return getRuleContext<WatParser::TabletypeContext>(0);
}

WatParser::MemtypeContext* WatParser::ImportdescContext::memtype() {
  return getRuleContext<WatParser::MemtypeContext>(0);
}

WatParser::GlobaltypeContext* WatParser::ImportdescContext::globaltype() {
  return getRuleContext<WatParser::GlobaltypeContext>(0);
}


size_t WatParser::ImportdescContext::getRuleIndex() const {
  return WatParser::RuleImportdesc;
}


std::any WatParser::ImportdescContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitImportdesc(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ImportdescContext* WatParser::importdesc() {
  ImportdescContext *_localctx = _tracker.createInstance<ImportdescContext>(_ctx, getState());
  enterRule(_localctx, 6, WatParser::RuleImportdesc);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(194);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(162);
      match(WatParser::T__0);
      setState(163);
      match(WatParser::T__4);
      setState(165);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::Id) {
        setState(164);
        match(WatParser::Id);
      }
      setState(167);
      typeuse();
      setState(168);
      match(WatParser::T__2);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(170);
      match(WatParser::T__0);
      setState(171);
      match(WatParser::T__5);
      setState(173);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::Id) {
        setState(172);
        match(WatParser::Id);
      }
      setState(175);
      tabletype();
      setState(176);
      match(WatParser::T__2);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(178);
      match(WatParser::T__0);
      setState(179);
      match(WatParser::T__6);
      setState(181);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::Id) {
        setState(180);
        match(WatParser::Id);
      }
      setState(183);
      memtype();
      setState(184);
      match(WatParser::T__2);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(186);
      match(WatParser::T__0);
      setState(187);
      match(WatParser::T__7);
      setState(189);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::Id) {
        setState(188);
        match(WatParser::Id);
      }
      setState(191);
      globaltype();
      setState(192);
      match(WatParser::T__2);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportabbrContext ------------------------------------------------------------------

WatParser::ImportabbrContext::ImportabbrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> WatParser::ImportabbrContext::String() {
  return getTokens(WatParser::String);
}

tree::TerminalNode* WatParser::ImportabbrContext::String(size_t i) {
  return getToken(WatParser::String, i);
}


size_t WatParser::ImportabbrContext::getRuleIndex() const {
  return WatParser::RuleImportabbr;
}


std::any WatParser::ImportabbrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitImportabbr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ImportabbrContext* WatParser::importabbr() {
  ImportabbrContext *_localctx = _tracker.createInstance<ImportabbrContext>(_ctx, getState());
  enterRule(_localctx, 8, WatParser::RuleImportabbr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(196);
    match(WatParser::T__0);
    setState(197);
    match(WatParser::T__8);
    setState(198);
    match(WatParser::String);
    setState(199);
    match(WatParser::String);
    setState(200);
    match(WatParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportsectionContext ------------------------------------------------------------------

WatParser::ImportsectionContext::ImportsectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::ImportabbrContext* WatParser::ImportsectionContext::importabbr() {
  return getRuleContext<WatParser::ImportabbrContext>(0);
}

WatParser::ImportdescContext* WatParser::ImportsectionContext::importdesc() {
  return getRuleContext<WatParser::ImportdescContext>(0);
}


size_t WatParser::ImportsectionContext::getRuleIndex() const {
  return WatParser::RuleImportsection;
}


std::any WatParser::ImportsectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitImportsection(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ImportsectionContext* WatParser::importsection() {
  ImportsectionContext *_localctx = _tracker.createInstance<ImportsectionContext>(_ctx, getState());
  enterRule(_localctx, 10, WatParser::RuleImportsection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(202);
    match(WatParser::T__0);
    setState(203);
    importabbr();
    setState(204);
    importdesc();
    setState(205);
    match(WatParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FuncsectionContext ------------------------------------------------------------------

WatParser::FuncsectionContext::FuncsectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::ExportabbrContext* WatParser::FuncsectionContext::exportabbr() {
  return getRuleContext<WatParser::ExportabbrContext>(0);
}

WatParser::ImportabbrContext* WatParser::FuncsectionContext::importabbr() {
  return getRuleContext<WatParser::ImportabbrContext>(0);
}

WatParser::TypeuseContext* WatParser::FuncsectionContext::typeuse() {
  return getRuleContext<WatParser::TypeuseContext>(0);
}

tree::TerminalNode* WatParser::FuncsectionContext::Id() {
  return getToken(WatParser::Id, 0);
}

std::vector<WatParser::LocalContext *> WatParser::FuncsectionContext::local() {
  return getRuleContexts<WatParser::LocalContext>();
}

WatParser::LocalContext* WatParser::FuncsectionContext::local(size_t i) {
  return getRuleContext<WatParser::LocalContext>(i);
}

std::vector<WatParser::InstrContext *> WatParser::FuncsectionContext::instr() {
  return getRuleContexts<WatParser::InstrContext>();
}

WatParser::InstrContext* WatParser::FuncsectionContext::instr(size_t i) {
  return getRuleContext<WatParser::InstrContext>(i);
}


size_t WatParser::FuncsectionContext::getRuleIndex() const {
  return WatParser::RuleFuncsection;
}


std::any WatParser::FuncsectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitFuncsection(this);
  else
    return visitor->visitChildren(this);
}

WatParser::FuncsectionContext* WatParser::funcsection() {
  FuncsectionContext *_localctx = _tracker.createInstance<FuncsectionContext>(_ctx, getState());
  enterRule(_localctx, 12, WatParser::RuleFuncsection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(207);
    match(WatParser::T__0);
    setState(208);
    match(WatParser::T__4);
    setState(210);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::Id) {
      setState(209);
      match(WatParser::Id);
    }
    setState(212);
    exportabbr();
    setState(229);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 15, _ctx)) {
    case 1: {
      setState(213);
      importabbr();
      setState(214);
      typeuse();
      break;
    }

    case 2: {
      setState(216);
      typeuse();
      setState(220);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(217);
          local(); 
        }
        setState(222);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx);
      }
      setState(226);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -2120220670) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 4194303) != 0)) {
        setState(223);
        instr();
        setState(228);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    default:
      break;
    }
    setState(231);
    match(WatParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocalContext ------------------------------------------------------------------

WatParser::LocalContext::LocalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<WatParser::ValtypeContext *> WatParser::LocalContext::valtype() {
  return getRuleContexts<WatParser::ValtypeContext>();
}

WatParser::ValtypeContext* WatParser::LocalContext::valtype(size_t i) {
  return getRuleContext<WatParser::ValtypeContext>(i);
}

tree::TerminalNode* WatParser::LocalContext::Id() {
  return getToken(WatParser::Id, 0);
}


size_t WatParser::LocalContext::getRuleIndex() const {
  return WatParser::RuleLocal;
}


std::any WatParser::LocalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitLocal(this);
  else
    return visitor->visitChildren(this);
}

WatParser::LocalContext* WatParser::local() {
  LocalContext *_localctx = _tracker.createInstance<LocalContext>(_ctx, getState());
  enterRule(_localctx, 14, WatParser::RuleLocal);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(233);
    match(WatParser::T__0);
    setState(234);
    match(WatParser::T__9);
    setState(244);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx)) {
    case 1: {
      setState(236);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::Id) {
        setState(235);
        match(WatParser::Id);
      }
      setState(238);
      valtype();
      break;
    }

    case 2: {
      setState(240); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(239);
        valtype();
        setState(242); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == WatParser::NumType

      || _la == WatParser::RefType);
      break;
    }

    default:
      break;
    }
    setState(246);
    match(WatParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TablesectionContext ------------------------------------------------------------------

WatParser::TablesectionContext::TablesectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::ExportabbrContext* WatParser::TablesectionContext::exportabbr() {
  return getRuleContext<WatParser::ExportabbrContext>(0);
}

WatParser::TabletypeContext* WatParser::TablesectionContext::tabletype() {
  return getRuleContext<WatParser::TabletypeContext>(0);
}

tree::TerminalNode* WatParser::TablesectionContext::RefType() {
  return getToken(WatParser::RefType, 0);
}

tree::TerminalNode* WatParser::TablesectionContext::Id() {
  return getToken(WatParser::Id, 0);
}

WatParser::ImportabbrContext* WatParser::TablesectionContext::importabbr() {
  return getRuleContext<WatParser::ImportabbrContext>(0);
}

std::vector<WatParser::ElemexprContext *> WatParser::TablesectionContext::elemexpr() {
  return getRuleContexts<WatParser::ElemexprContext>();
}

WatParser::ElemexprContext* WatParser::TablesectionContext::elemexpr(size_t i) {
  return getRuleContext<WatParser::ElemexprContext>(i);
}

std::vector<WatParser::FuncidxContext *> WatParser::TablesectionContext::funcidx() {
  return getRuleContexts<WatParser::FuncidxContext>();
}

WatParser::FuncidxContext* WatParser::TablesectionContext::funcidx(size_t i) {
  return getRuleContext<WatParser::FuncidxContext>(i);
}


size_t WatParser::TablesectionContext::getRuleIndex() const {
  return WatParser::RuleTablesection;
}


std::any WatParser::TablesectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitTablesection(this);
  else
    return visitor->visitChildren(this);
}

WatParser::TablesectionContext* WatParser::tablesection() {
  TablesectionContext *_localctx = _tracker.createInstance<TablesectionContext>(_ctx, getState());
  enterRule(_localctx, 16, WatParser::RuleTablesection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(248);
    match(WatParser::T__0);
    setState(249);
    match(WatParser::T__5);
    setState(251);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::Id) {
      setState(250);
      match(WatParser::Id);
    }
    setState(253);
    exportabbr();
    setState(276);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::T__0:
      case WatParser::Integer: {
        setState(255);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::T__0) {
          setState(254);
          importabbr();
        }
        setState(257);
        tabletype();
        break;
      }

      case WatParser::RefType: {
        setState(258);
        match(WatParser::RefType);
        setState(259);
        match(WatParser::T__0);
        setState(260);
        match(WatParser::T__10);
        setState(273);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx)) {
        case 1: {
          setState(264);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == WatParser::T__0) {
            setState(261);
            elemexpr();
            setState(266);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
          break;
        }

        case 2: {
          setState(270);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == WatParser::Unsigned

          || _la == WatParser::Id) {
            setState(267);
            funcidx();
            setState(272);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
          break;
        }

        default:
          break;
        }
        setState(275);
        match(WatParser::T__2);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(278);
    match(WatParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MemorysectionContext ------------------------------------------------------------------

WatParser::MemorysectionContext::MemorysectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::ExportabbrContext* WatParser::MemorysectionContext::exportabbr() {
  return getRuleContext<WatParser::ExportabbrContext>(0);
}

WatParser::MemtypeContext* WatParser::MemorysectionContext::memtype() {
  return getRuleContext<WatParser::MemtypeContext>(0);
}

tree::TerminalNode* WatParser::MemorysectionContext::Id() {
  return getToken(WatParser::Id, 0);
}

WatParser::ImportabbrContext* WatParser::MemorysectionContext::importabbr() {
  return getRuleContext<WatParser::ImportabbrContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::MemorysectionContext::String() {
  return getTokens(WatParser::String);
}

tree::TerminalNode* WatParser::MemorysectionContext::String(size_t i) {
  return getToken(WatParser::String, i);
}


size_t WatParser::MemorysectionContext::getRuleIndex() const {
  return WatParser::RuleMemorysection;
}


std::any WatParser::MemorysectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitMemorysection(this);
  else
    return visitor->visitChildren(this);
}

WatParser::MemorysectionContext* WatParser::memorysection() {
  MemorysectionContext *_localctx = _tracker.createInstance<MemorysectionContext>(_ctx, getState());
  enterRule(_localctx, 18, WatParser::RuleMemorysection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(280);
    match(WatParser::T__0);
    setState(281);
    match(WatParser::T__6);
    setState(283);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::Id) {
      setState(282);
      match(WatParser::Id);
    }
    setState(285);
    exportabbr();
    setState(299);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx)) {
    case 1: {
      setState(287);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::T__0) {
        setState(286);
        importabbr();
      }
      setState(289);
      memtype();
      break;
    }

    case 2: {
      setState(290);
      match(WatParser::T__0);
      setState(291);
      match(WatParser::T__11);
      setState(295);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::String) {
        setState(292);
        match(WatParser::String);
        setState(297);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(298);
      match(WatParser::T__2);
      break;
    }

    default:
      break;
    }
    setState(301);
    match(WatParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GlobalsectionContext ------------------------------------------------------------------

WatParser::GlobalsectionContext::GlobalsectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::ExportabbrContext* WatParser::GlobalsectionContext::exportabbr() {
  return getRuleContext<WatParser::ExportabbrContext>(0);
}

WatParser::ImportabbrContext* WatParser::GlobalsectionContext::importabbr() {
  return getRuleContext<WatParser::ImportabbrContext>(0);
}

WatParser::GlobaltypeContext* WatParser::GlobalsectionContext::globaltype() {
  return getRuleContext<WatParser::GlobaltypeContext>(0);
}

WatParser::ConstexprContext* WatParser::GlobalsectionContext::constexpr_() {
  return getRuleContext<WatParser::ConstexprContext>(0);
}

tree::TerminalNode* WatParser::GlobalsectionContext::Id() {
  return getToken(WatParser::Id, 0);
}


size_t WatParser::GlobalsectionContext::getRuleIndex() const {
  return WatParser::RuleGlobalsection;
}


std::any WatParser::GlobalsectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitGlobalsection(this);
  else
    return visitor->visitChildren(this);
}

WatParser::GlobalsectionContext* WatParser::globalsection() {
  GlobalsectionContext *_localctx = _tracker.createInstance<GlobalsectionContext>(_ctx, getState());
  enterRule(_localctx, 20, WatParser::RuleGlobalsection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(303);
    match(WatParser::T__0);
    setState(304);
    match(WatParser::T__7);
    setState(306);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::Id) {
      setState(305);
      match(WatParser::Id);
    }
    setState(308);
    exportabbr();
    setState(315);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx)) {
    case 1: {
      setState(309);
      importabbr();
      setState(310);
      globaltype();
      break;
    }

    case 2: {
      setState(312);
      globaltype();
      setState(313);
      constexpr_();
      break;
    }

    default:
      break;
    }
    setState(317);
    match(WatParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExportsectionContext ------------------------------------------------------------------

WatParser::ExportsectionContext::ExportsectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::ExportsectionContext::String() {
  return getToken(WatParser::String, 0);
}

WatParser::ExportdescContext* WatParser::ExportsectionContext::exportdesc() {
  return getRuleContext<WatParser::ExportdescContext>(0);
}


size_t WatParser::ExportsectionContext::getRuleIndex() const {
  return WatParser::RuleExportsection;
}


std::any WatParser::ExportsectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitExportsection(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ExportsectionContext* WatParser::exportsection() {
  ExportsectionContext *_localctx = _tracker.createInstance<ExportsectionContext>(_ctx, getState());
  enterRule(_localctx, 22, WatParser::RuleExportsection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(319);
    match(WatParser::T__0);
    setState(320);
    match(WatParser::T__12);
    setState(321);
    match(WatParser::String);
    setState(322);
    exportdesc();
    setState(323);
    match(WatParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExportdescContext ------------------------------------------------------------------

WatParser::ExportdescContext::ExportdescContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::FuncidxContext* WatParser::ExportdescContext::funcidx() {
  return getRuleContext<WatParser::FuncidxContext>(0);
}

WatParser::TableidxContext* WatParser::ExportdescContext::tableidx() {
  return getRuleContext<WatParser::TableidxContext>(0);
}

WatParser::MemidxContext* WatParser::ExportdescContext::memidx() {
  return getRuleContext<WatParser::MemidxContext>(0);
}

WatParser::GlobalidxContext* WatParser::ExportdescContext::globalidx() {
  return getRuleContext<WatParser::GlobalidxContext>(0);
}


size_t WatParser::ExportdescContext::getRuleIndex() const {
  return WatParser::RuleExportdesc;
}


std::any WatParser::ExportdescContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitExportdesc(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ExportdescContext* WatParser::exportdesc() {
  ExportdescContext *_localctx = _tracker.createInstance<ExportdescContext>(_ctx, getState());
  enterRule(_localctx, 24, WatParser::RuleExportdesc);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(345);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(325);
      match(WatParser::T__0);
      setState(326);
      match(WatParser::T__4);
      setState(327);
      funcidx();
      setState(328);
      match(WatParser::T__2);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(330);
      match(WatParser::T__0);
      setState(331);
      match(WatParser::T__5);
      setState(332);
      tableidx();
      setState(333);
      match(WatParser::T__2);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(335);
      match(WatParser::T__0);
      setState(336);
      match(WatParser::T__6);
      setState(337);
      memidx();
      setState(338);
      match(WatParser::T__2);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(340);
      match(WatParser::T__0);
      setState(341);
      match(WatParser::T__7);
      setState(342);
      globalidx();
      setState(343);
      match(WatParser::T__2);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExportabbrContext ------------------------------------------------------------------

WatParser::ExportabbrContext::ExportabbrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::ExportabbrContext::String() {
  return getToken(WatParser::String, 0);
}


size_t WatParser::ExportabbrContext::getRuleIndex() const {
  return WatParser::RuleExportabbr;
}


std::any WatParser::ExportabbrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitExportabbr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ExportabbrContext* WatParser::exportabbr() {
  ExportabbrContext *_localctx = _tracker.createInstance<ExportabbrContext>(_ctx, getState());
  enterRule(_localctx, 26, WatParser::RuleExportabbr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(347);
    match(WatParser::T__0);
    setState(348);
    match(WatParser::T__12);
    setState(349);
    match(WatParser::String);
    setState(350);
    match(WatParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StartsectionContext ------------------------------------------------------------------

WatParser::StartsectionContext::StartsectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::FuncidxContext* WatParser::StartsectionContext::funcidx() {
  return getRuleContext<WatParser::FuncidxContext>(0);
}


size_t WatParser::StartsectionContext::getRuleIndex() const {
  return WatParser::RuleStartsection;
}


std::any WatParser::StartsectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitStartsection(this);
  else
    return visitor->visitChildren(this);
}

WatParser::StartsectionContext* WatParser::startsection() {
  StartsectionContext *_localctx = _tracker.createInstance<StartsectionContext>(_ctx, getState());
  enterRule(_localctx, 28, WatParser::RuleStartsection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(352);
    match(WatParser::T__0);
    setState(353);
    match(WatParser::T__13);
    setState(354);
    funcidx();
    setState(355);
    match(WatParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElemsectionContext ------------------------------------------------------------------

WatParser::ElemsectionContext::ElemsectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::ElemlistContext* WatParser::ElemsectionContext::elemlist() {
  return getRuleContext<WatParser::ElemlistContext>(0);
}

WatParser::ConstexprContext* WatParser::ElemsectionContext::constexpr_() {
  return getRuleContext<WatParser::ConstexprContext>(0);
}

tree::TerminalNode* WatParser::ElemsectionContext::Id() {
  return getToken(WatParser::Id, 0);
}

std::vector<WatParser::FuncidxContext *> WatParser::ElemsectionContext::funcidx() {
  return getRuleContexts<WatParser::FuncidxContext>();
}

WatParser::FuncidxContext* WatParser::ElemsectionContext::funcidx(size_t i) {
  return getRuleContext<WatParser::FuncidxContext>(i);
}

WatParser::TableuseContext* WatParser::ElemsectionContext::tableuse() {
  return getRuleContext<WatParser::TableuseContext>(0);
}


size_t WatParser::ElemsectionContext::getRuleIndex() const {
  return WatParser::RuleElemsection;
}


std::any WatParser::ElemsectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitElemsection(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ElemsectionContext* WatParser::elemsection() {
  ElemsectionContext *_localctx = _tracker.createInstance<ElemsectionContext>(_ctx, getState());
  enterRule(_localctx, 30, WatParser::RuleElemsection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(357);
    match(WatParser::T__0);
    setState(358);
    match(WatParser::T__10);
    setState(360);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::Id) {
      setState(359);
      match(WatParser::Id);
    }
    setState(388);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx)) {
    case 1: {
      setState(373);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case WatParser::T__0: {
          setState(363);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
          case 1: {
            setState(362);
            tableuse();
            break;
          }

          default:
            break;
          }
          setState(365);
          match(WatParser::T__0);
          setState(367);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == WatParser::T__14) {
            setState(366);
            match(WatParser::T__14);
          }
          setState(369);
          constexpr_();
          setState(370);
          match(WatParser::T__2);
          break;
        }

        case WatParser::T__15: {
          setState(372);
          match(WatParser::T__15);
          break;
        }

        case WatParser::T__4:
        case WatParser::RefType: {
          break;
        }

      default:
        break;
      }
      setState(375);
      elemlist();
      break;
    }

    case 2: {
      setState(376);
      match(WatParser::T__0);
      setState(378);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::T__14) {
        setState(377);
        match(WatParser::T__14);
      }
      setState(380);
      constexpr_();
      setState(381);
      match(WatParser::T__2);
      setState(385);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::Unsigned

      || _la == WatParser::Id) {
        setState(382);
        funcidx();
        setState(387);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    default:
      break;
    }
    setState(390);
    match(WatParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElemlistContext ------------------------------------------------------------------

WatParser::ElemlistContext::ElemlistContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::ElemlistContext::RefType() {
  return getToken(WatParser::RefType, 0);
}

std::vector<WatParser::ElemexprContext *> WatParser::ElemlistContext::elemexpr() {
  return getRuleContexts<WatParser::ElemexprContext>();
}

WatParser::ElemexprContext* WatParser::ElemlistContext::elemexpr(size_t i) {
  return getRuleContext<WatParser::ElemexprContext>(i);
}

std::vector<WatParser::FuncidxContext *> WatParser::ElemlistContext::funcidx() {
  return getRuleContexts<WatParser::FuncidxContext>();
}

WatParser::FuncidxContext* WatParser::ElemlistContext::funcidx(size_t i) {
  return getRuleContext<WatParser::FuncidxContext>(i);
}


size_t WatParser::ElemlistContext::getRuleIndex() const {
  return WatParser::RuleElemlist;
}


std::any WatParser::ElemlistContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitElemlist(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ElemlistContext* WatParser::elemlist() {
  ElemlistContext *_localctx = _tracker.createInstance<ElemlistContext>(_ctx, getState());
  enterRule(_localctx, 32, WatParser::RuleElemlist);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(406);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::RefType: {
        enterOuterAlt(_localctx, 1);
        setState(392);
        match(WatParser::RefType);
        setState(396);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == WatParser::T__0) {
          setState(393);
          elemexpr();
          setState(398);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case WatParser::T__4: {
        enterOuterAlt(_localctx, 2);
        setState(399);
        match(WatParser::T__4);
        setState(403);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == WatParser::Unsigned

        || _la == WatParser::Id) {
          setState(400);
          funcidx();
          setState(405);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElemexprContext ------------------------------------------------------------------

WatParser::ElemexprContext::ElemexprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::ConstexprContext* WatParser::ElemexprContext::constexpr_() {
  return getRuleContext<WatParser::ConstexprContext>(0);
}


size_t WatParser::ElemexprContext::getRuleIndex() const {
  return WatParser::RuleElemexpr;
}


std::any WatParser::ElemexprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitElemexpr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ElemexprContext* WatParser::elemexpr() {
  ElemexprContext *_localctx = _tracker.createInstance<ElemexprContext>(_ctx, getState());
  enterRule(_localctx, 34, WatParser::RuleElemexpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(417);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(408);
      match(WatParser::T__0);
      setState(409);
      match(WatParser::T__16);
      setState(410);
      constexpr_();
      setState(411);
      match(WatParser::T__2);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(413);
      match(WatParser::T__0);
      setState(414);
      constexpr_();
      setState(415);
      match(WatParser::T__2);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableuseContext ------------------------------------------------------------------

WatParser::TableuseContext::TableuseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::TableidxContext* WatParser::TableuseContext::tableidx() {
  return getRuleContext<WatParser::TableidxContext>(0);
}


size_t WatParser::TableuseContext::getRuleIndex() const {
  return WatParser::RuleTableuse;
}


std::any WatParser::TableuseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitTableuse(this);
  else
    return visitor->visitChildren(this);
}

WatParser::TableuseContext* WatParser::tableuse() {
  TableuseContext *_localctx = _tracker.createInstance<TableuseContext>(_ctx, getState());
  enterRule(_localctx, 36, WatParser::RuleTableuse);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(419);
    match(WatParser::T__0);
    setState(420);
    match(WatParser::T__5);
    setState(421);
    tableidx();
    setState(422);
    match(WatParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DatasectionContext ------------------------------------------------------------------

WatParser::DatasectionContext::DatasectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::DatasectionContext::Id() {
  return getToken(WatParser::Id, 0);
}

WatParser::ConstexprContext* WatParser::DatasectionContext::constexpr_() {
  return getRuleContext<WatParser::ConstexprContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::DatasectionContext::String() {
  return getTokens(WatParser::String);
}

tree::TerminalNode* WatParser::DatasectionContext::String(size_t i) {
  return getToken(WatParser::String, i);
}

WatParser::MemuseContext* WatParser::DatasectionContext::memuse() {
  return getRuleContext<WatParser::MemuseContext>(0);
}


size_t WatParser::DatasectionContext::getRuleIndex() const {
  return WatParser::RuleDatasection;
}


std::any WatParser::DatasectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitDatasection(this);
  else
    return visitor->visitChildren(this);
}

WatParser::DatasectionContext* WatParser::datasection() {
  DatasectionContext *_localctx = _tracker.createInstance<DatasectionContext>(_ctx, getState());
  enterRule(_localctx, 38, WatParser::RuleDatasection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(424);
    match(WatParser::T__0);
    setState(425);
    match(WatParser::T__11);
    setState(427);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::Id) {
      setState(426);
      match(WatParser::Id);
    }
    setState(439);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::T__0) {
      setState(430);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx)) {
      case 1: {
        setState(429);
        memuse();
        break;
      }

      default:
        break;
      }
      setState(432);
      match(WatParser::T__0);
      setState(434);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::T__14) {
        setState(433);
        match(WatParser::T__14);
      }
      setState(436);
      constexpr_();
      setState(437);
      match(WatParser::T__2);
    }
    setState(444);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == WatParser::String) {
      setState(441);
      match(WatParser::String);
      setState(446);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(447);
    match(WatParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MemuseContext ------------------------------------------------------------------

WatParser::MemuseContext::MemuseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::MemidxContext* WatParser::MemuseContext::memidx() {
  return getRuleContext<WatParser::MemidxContext>(0);
}


size_t WatParser::MemuseContext::getRuleIndex() const {
  return WatParser::RuleMemuse;
}


std::any WatParser::MemuseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitMemuse(this);
  else
    return visitor->visitChildren(this);
}

WatParser::MemuseContext* WatParser::memuse() {
  MemuseContext *_localctx = _tracker.createInstance<MemuseContext>(_ctx, getState());
  enterRule(_localctx, 40, WatParser::RuleMemuse);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(449);
    match(WatParser::T__0);
    setState(450);
    match(WatParser::T__6);
    setState(451);
    memidx();
    setState(452);
    match(WatParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- I32Context ------------------------------------------------------------------

WatParser::I32Context::I32Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::I32Context::Integer() {
  return getToken(WatParser::Integer, 0);
}


size_t WatParser::I32Context::getRuleIndex() const {
  return WatParser::RuleI32;
}


std::any WatParser::I32Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitI32(this);
  else
    return visitor->visitChildren(this);
}

WatParser::I32Context* WatParser::i32() {
  I32Context *_localctx = _tracker.createInstance<I32Context>(_ctx, getState());
  enterRule(_localctx, 42, WatParser::RuleI32);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(454);
    match(WatParser::Integer);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- I64Context ------------------------------------------------------------------

WatParser::I64Context::I64Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::I64Context::Integer() {
  return getToken(WatParser::Integer, 0);
}


size_t WatParser::I64Context::getRuleIndex() const {
  return WatParser::RuleI64;
}


std::any WatParser::I64Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitI64(this);
  else
    return visitor->visitChildren(this);
}

WatParser::I64Context* WatParser::i64() {
  I64Context *_localctx = _tracker.createInstance<I64Context>(_ctx, getState());
  enterRule(_localctx, 44, WatParser::RuleI64);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(456);
    match(WatParser::Integer);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- U32Context ------------------------------------------------------------------

WatParser::U32Context::U32Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::U32Context::Unsigned() {
  return getToken(WatParser::Unsigned, 0);
}


size_t WatParser::U32Context::getRuleIndex() const {
  return WatParser::RuleU32;
}


std::any WatParser::U32Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitU32(this);
  else
    return visitor->visitChildren(this);
}

WatParser::U32Context* WatParser::u32() {
  U32Context *_localctx = _tracker.createInstance<U32Context>(_ctx, getState());
  enterRule(_localctx, 46, WatParser::RuleU32);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(458);
    match(WatParser::Unsigned);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- U64Context ------------------------------------------------------------------

WatParser::U64Context::U64Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::U64Context::Unsigned() {
  return getToken(WatParser::Unsigned, 0);
}


size_t WatParser::U64Context::getRuleIndex() const {
  return WatParser::RuleU64;
}


std::any WatParser::U64Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitU64(this);
  else
    return visitor->visitChildren(this);
}

WatParser::U64Context* WatParser::u64() {
  U64Context *_localctx = _tracker.createInstance<U64Context>(_ctx, getState());
  enterRule(_localctx, 48, WatParser::RuleU64);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(460);
    match(WatParser::Unsigned);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- F32Context ------------------------------------------------------------------

WatParser::F32Context::F32Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::F32Context::Float() {
  return getToken(WatParser::Float, 0);
}


size_t WatParser::F32Context::getRuleIndex() const {
  return WatParser::RuleF32;
}


std::any WatParser::F32Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitF32(this);
  else
    return visitor->visitChildren(this);
}

WatParser::F32Context* WatParser::f32() {
  F32Context *_localctx = _tracker.createInstance<F32Context>(_ctx, getState());
  enterRule(_localctx, 50, WatParser::RuleF32);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(462);
    match(WatParser::Float);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- F64Context ------------------------------------------------------------------

WatParser::F64Context::F64Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::F64Context::Float() {
  return getToken(WatParser::Float, 0);
}


size_t WatParser::F64Context::getRuleIndex() const {
  return WatParser::RuleF64;
}


std::any WatParser::F64Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitF64(this);
  else
    return visitor->visitChildren(this);
}

WatParser::F64Context* WatParser::f64() {
  F64Context *_localctx = _tracker.createInstance<F64Context>(_ctx, getState());
  enterRule(_localctx, 52, WatParser::RuleF64);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(464);
    match(WatParser::Float);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValtypeContext ------------------------------------------------------------------

WatParser::ValtypeContext::ValtypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::ValtypeContext::NumType() {
  return getToken(WatParser::NumType, 0);
}

tree::TerminalNode* WatParser::ValtypeContext::RefType() {
  return getToken(WatParser::RefType, 0);
}


size_t WatParser::ValtypeContext::getRuleIndex() const {
  return WatParser::RuleValtype;
}


std::any WatParser::ValtypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitValtype(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ValtypeContext* WatParser::valtype() {
  ValtypeContext *_localctx = _tracker.createInstance<ValtypeContext>(_ctx, getState());
  enterRule(_localctx, 54, WatParser::RuleValtype);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(466);
    _la = _input->LA(1);
    if (!(_la == WatParser::NumType

    || _la == WatParser::RefType)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParamContext ------------------------------------------------------------------

WatParser::ParamContext::ParamContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::ParamContext::Id() {
  return getToken(WatParser::Id, 0);
}

std::vector<WatParser::ValtypeContext *> WatParser::ParamContext::valtype() {
  return getRuleContexts<WatParser::ValtypeContext>();
}

WatParser::ValtypeContext* WatParser::ParamContext::valtype(size_t i) {
  return getRuleContext<WatParser::ValtypeContext>(i);
}


size_t WatParser::ParamContext::getRuleIndex() const {
  return WatParser::RuleParam;
}


std::any WatParser::ParamContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitParam(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ParamContext* WatParser::param() {
  ParamContext *_localctx = _tracker.createInstance<ParamContext>(_ctx, getState());
  enterRule(_localctx, 56, WatParser::RuleParam);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(468);
    match(WatParser::T__0);
    setState(469);
    match(WatParser::T__17);
    setState(478);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::Id: {
        setState(470);
        match(WatParser::Id);
        setState(471);
        valtype();
        break;
      }

      case WatParser::T__2:
      case WatParser::NumType:
      case WatParser::RefType: {
        setState(475);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == WatParser::NumType

        || _la == WatParser::RefType) {
          setState(472);
          valtype();
          setState(477);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(480);
    match(WatParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResultContext ------------------------------------------------------------------

WatParser::ResultContext::ResultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<WatParser::ValtypeContext *> WatParser::ResultContext::valtype() {
  return getRuleContexts<WatParser::ValtypeContext>();
}

WatParser::ValtypeContext* WatParser::ResultContext::valtype(size_t i) {
  return getRuleContext<WatParser::ValtypeContext>(i);
}


size_t WatParser::ResultContext::getRuleIndex() const {
  return WatParser::RuleResult;
}


std::any WatParser::ResultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitResult(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ResultContext* WatParser::result() {
  ResultContext *_localctx = _tracker.createInstance<ResultContext>(_ctx, getState());
  enterRule(_localctx, 58, WatParser::RuleResult);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(482);
    match(WatParser::T__0);
    setState(483);
    match(WatParser::T__18);
    setState(487);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == WatParser::NumType

    || _la == WatParser::RefType) {
      setState(484);
      valtype();
      setState(489);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(490);
    match(WatParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctypeContext ------------------------------------------------------------------

WatParser::FunctypeContext::FunctypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<WatParser::ParamContext *> WatParser::FunctypeContext::param() {
  return getRuleContexts<WatParser::ParamContext>();
}

WatParser::ParamContext* WatParser::FunctypeContext::param(size_t i) {
  return getRuleContext<WatParser::ParamContext>(i);
}

std::vector<WatParser::ResultContext *> WatParser::FunctypeContext::result() {
  return getRuleContexts<WatParser::ResultContext>();
}

WatParser::ResultContext* WatParser::FunctypeContext::result(size_t i) {
  return getRuleContext<WatParser::ResultContext>(i);
}


size_t WatParser::FunctypeContext::getRuleIndex() const {
  return WatParser::RuleFunctype;
}


std::any WatParser::FunctypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitFunctype(this);
  else
    return visitor->visitChildren(this);
}

WatParser::FunctypeContext* WatParser::functype() {
  FunctypeContext *_localctx = _tracker.createInstance<FunctypeContext>(_ctx, getState());
  enterRule(_localctx, 60, WatParser::RuleFunctype);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(492);
    match(WatParser::T__0);
    setState(493);
    match(WatParser::T__4);
    setState(497);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 51, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(494);
        param(); 
      }
      setState(499);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 51, _ctx);
    }
    setState(503);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == WatParser::T__0) {
      setState(500);
      result();
      setState(505);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(506);
    match(WatParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LimitsContext ------------------------------------------------------------------

WatParser::LimitsContext::LimitsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<WatParser::I64Context *> WatParser::LimitsContext::i64() {
  return getRuleContexts<WatParser::I64Context>();
}

WatParser::I64Context* WatParser::LimitsContext::i64(size_t i) {
  return getRuleContext<WatParser::I64Context>(i);
}


size_t WatParser::LimitsContext::getRuleIndex() const {
  return WatParser::RuleLimits;
}


std::any WatParser::LimitsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitLimits(this);
  else
    return visitor->visitChildren(this);
}

WatParser::LimitsContext* WatParser::limits() {
  LimitsContext *_localctx = _tracker.createInstance<LimitsContext>(_ctx, getState());
  enterRule(_localctx, 62, WatParser::RuleLimits);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(508);
    i64();
    setState(510);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::Integer) {
      setState(509);
      i64();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MemtypeContext ------------------------------------------------------------------

WatParser::MemtypeContext::MemtypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::LimitsContext* WatParser::MemtypeContext::limits() {
  return getRuleContext<WatParser::LimitsContext>(0);
}


size_t WatParser::MemtypeContext::getRuleIndex() const {
  return WatParser::RuleMemtype;
}


std::any WatParser::MemtypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitMemtype(this);
  else
    return visitor->visitChildren(this);
}

WatParser::MemtypeContext* WatParser::memtype() {
  MemtypeContext *_localctx = _tracker.createInstance<MemtypeContext>(_ctx, getState());
  enterRule(_localctx, 64, WatParser::RuleMemtype);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(512);
    limits();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TabletypeContext ------------------------------------------------------------------

WatParser::TabletypeContext::TabletypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::LimitsContext* WatParser::TabletypeContext::limits() {
  return getRuleContext<WatParser::LimitsContext>(0);
}

tree::TerminalNode* WatParser::TabletypeContext::RefType() {
  return getToken(WatParser::RefType, 0);
}


size_t WatParser::TabletypeContext::getRuleIndex() const {
  return WatParser::RuleTabletype;
}


std::any WatParser::TabletypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitTabletype(this);
  else
    return visitor->visitChildren(this);
}

WatParser::TabletypeContext* WatParser::tabletype() {
  TabletypeContext *_localctx = _tracker.createInstance<TabletypeContext>(_ctx, getState());
  enterRule(_localctx, 66, WatParser::RuleTabletype);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(514);
    limits();
    setState(515);
    match(WatParser::RefType);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GlobaltypeContext ------------------------------------------------------------------

WatParser::GlobaltypeContext::GlobaltypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::ValtypeContext* WatParser::GlobaltypeContext::valtype() {
  return getRuleContext<WatParser::ValtypeContext>(0);
}


size_t WatParser::GlobaltypeContext::getRuleIndex() const {
  return WatParser::RuleGlobaltype;
}


std::any WatParser::GlobaltypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitGlobaltype(this);
  else
    return visitor->visitChildren(this);
}

WatParser::GlobaltypeContext* WatParser::globaltype() {
  GlobaltypeContext *_localctx = _tracker.createInstance<GlobaltypeContext>(_ctx, getState());
  enterRule(_localctx, 68, WatParser::RuleGlobaltype);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(523);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::NumType:
      case WatParser::RefType: {
        enterOuterAlt(_localctx, 1);
        setState(517);
        valtype();
        break;
      }

      case WatParser::T__0: {
        enterOuterAlt(_localctx, 2);
        setState(518);
        match(WatParser::T__0);
        setState(519);
        match(WatParser::T__19);
        setState(520);
        valtype();
        setState(521);
        match(WatParser::T__2);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeidxContext ------------------------------------------------------------------

WatParser::TypeidxContext::TypeidxContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::U32Context* WatParser::TypeidxContext::u32() {
  return getRuleContext<WatParser::U32Context>(0);
}

tree::TerminalNode* WatParser::TypeidxContext::Id() {
  return getToken(WatParser::Id, 0);
}


size_t WatParser::TypeidxContext::getRuleIndex() const {
  return WatParser::RuleTypeidx;
}


std::any WatParser::TypeidxContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitTypeidx(this);
  else
    return visitor->visitChildren(this);
}

WatParser::TypeidxContext* WatParser::typeidx() {
  TypeidxContext *_localctx = _tracker.createInstance<TypeidxContext>(_ctx, getState());
  enterRule(_localctx, 70, WatParser::RuleTypeidx);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(527);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::Unsigned: {
        enterOuterAlt(_localctx, 1);
        setState(525);
        u32();
        break;
      }

      case WatParser::Id: {
        enterOuterAlt(_localctx, 2);
        setState(526);
        match(WatParser::Id);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FuncidxContext ------------------------------------------------------------------

WatParser::FuncidxContext::FuncidxContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::U32Context* WatParser::FuncidxContext::u32() {
  return getRuleContext<WatParser::U32Context>(0);
}

tree::TerminalNode* WatParser::FuncidxContext::Id() {
  return getToken(WatParser::Id, 0);
}


size_t WatParser::FuncidxContext::getRuleIndex() const {
  return WatParser::RuleFuncidx;
}


std::any WatParser::FuncidxContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitFuncidx(this);
  else
    return visitor->visitChildren(this);
}

WatParser::FuncidxContext* WatParser::funcidx() {
  FuncidxContext *_localctx = _tracker.createInstance<FuncidxContext>(_ctx, getState());
  enterRule(_localctx, 72, WatParser::RuleFuncidx);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(531);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::Unsigned: {
        enterOuterAlt(_localctx, 1);
        setState(529);
        u32();
        break;
      }

      case WatParser::Id: {
        enterOuterAlt(_localctx, 2);
        setState(530);
        match(WatParser::Id);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableidxContext ------------------------------------------------------------------

WatParser::TableidxContext::TableidxContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::U32Context* WatParser::TableidxContext::u32() {
  return getRuleContext<WatParser::U32Context>(0);
}

tree::TerminalNode* WatParser::TableidxContext::Id() {
  return getToken(WatParser::Id, 0);
}


size_t WatParser::TableidxContext::getRuleIndex() const {
  return WatParser::RuleTableidx;
}


std::any WatParser::TableidxContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitTableidx(this);
  else
    return visitor->visitChildren(this);
}

WatParser::TableidxContext* WatParser::tableidx() {
  TableidxContext *_localctx = _tracker.createInstance<TableidxContext>(_ctx, getState());
  enterRule(_localctx, 74, WatParser::RuleTableidx);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(535);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::Unsigned: {
        enterOuterAlt(_localctx, 1);
        setState(533);
        u32();
        break;
      }

      case WatParser::Id: {
        enterOuterAlt(_localctx, 2);
        setState(534);
        match(WatParser::Id);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MemidxContext ------------------------------------------------------------------

WatParser::MemidxContext::MemidxContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::U32Context* WatParser::MemidxContext::u32() {
  return getRuleContext<WatParser::U32Context>(0);
}

tree::TerminalNode* WatParser::MemidxContext::Id() {
  return getToken(WatParser::Id, 0);
}


size_t WatParser::MemidxContext::getRuleIndex() const {
  return WatParser::RuleMemidx;
}


std::any WatParser::MemidxContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitMemidx(this);
  else
    return visitor->visitChildren(this);
}

WatParser::MemidxContext* WatParser::memidx() {
  MemidxContext *_localctx = _tracker.createInstance<MemidxContext>(_ctx, getState());
  enterRule(_localctx, 76, WatParser::RuleMemidx);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(539);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::Unsigned: {
        enterOuterAlt(_localctx, 1);
        setState(537);
        u32();
        break;
      }

      case WatParser::Id: {
        enterOuterAlt(_localctx, 2);
        setState(538);
        match(WatParser::Id);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GlobalidxContext ------------------------------------------------------------------

WatParser::GlobalidxContext::GlobalidxContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::U32Context* WatParser::GlobalidxContext::u32() {
  return getRuleContext<WatParser::U32Context>(0);
}

tree::TerminalNode* WatParser::GlobalidxContext::Id() {
  return getToken(WatParser::Id, 0);
}


size_t WatParser::GlobalidxContext::getRuleIndex() const {
  return WatParser::RuleGlobalidx;
}


std::any WatParser::GlobalidxContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitGlobalidx(this);
  else
    return visitor->visitChildren(this);
}

WatParser::GlobalidxContext* WatParser::globalidx() {
  GlobalidxContext *_localctx = _tracker.createInstance<GlobalidxContext>(_ctx, getState());
  enterRule(_localctx, 78, WatParser::RuleGlobalidx);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(543);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::Unsigned: {
        enterOuterAlt(_localctx, 1);
        setState(541);
        u32();
        break;
      }

      case WatParser::Id: {
        enterOuterAlt(_localctx, 2);
        setState(542);
        match(WatParser::Id);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElemidxContext ------------------------------------------------------------------

WatParser::ElemidxContext::ElemidxContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::U32Context* WatParser::ElemidxContext::u32() {
  return getRuleContext<WatParser::U32Context>(0);
}

tree::TerminalNode* WatParser::ElemidxContext::Id() {
  return getToken(WatParser::Id, 0);
}


size_t WatParser::ElemidxContext::getRuleIndex() const {
  return WatParser::RuleElemidx;
}


std::any WatParser::ElemidxContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitElemidx(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ElemidxContext* WatParser::elemidx() {
  ElemidxContext *_localctx = _tracker.createInstance<ElemidxContext>(_ctx, getState());
  enterRule(_localctx, 80, WatParser::RuleElemidx);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(547);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::Unsigned: {
        enterOuterAlt(_localctx, 1);
        setState(545);
        u32();
        break;
      }

      case WatParser::Id: {
        enterOuterAlt(_localctx, 2);
        setState(546);
        match(WatParser::Id);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataidxContext ------------------------------------------------------------------

WatParser::DataidxContext::DataidxContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::U32Context* WatParser::DataidxContext::u32() {
  return getRuleContext<WatParser::U32Context>(0);
}

tree::TerminalNode* WatParser::DataidxContext::Id() {
  return getToken(WatParser::Id, 0);
}


size_t WatParser::DataidxContext::getRuleIndex() const {
  return WatParser::RuleDataidx;
}


std::any WatParser::DataidxContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitDataidx(this);
  else
    return visitor->visitChildren(this);
}

WatParser::DataidxContext* WatParser::dataidx() {
  DataidxContext *_localctx = _tracker.createInstance<DataidxContext>(_ctx, getState());
  enterRule(_localctx, 82, WatParser::RuleDataidx);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(551);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::Unsigned: {
        enterOuterAlt(_localctx, 1);
        setState(549);
        u32();
        break;
      }

      case WatParser::Id: {
        enterOuterAlt(_localctx, 2);
        setState(550);
        match(WatParser::Id);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocalidxContext ------------------------------------------------------------------

WatParser::LocalidxContext::LocalidxContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::U32Context* WatParser::LocalidxContext::u32() {
  return getRuleContext<WatParser::U32Context>(0);
}

tree::TerminalNode* WatParser::LocalidxContext::Id() {
  return getToken(WatParser::Id, 0);
}


size_t WatParser::LocalidxContext::getRuleIndex() const {
  return WatParser::RuleLocalidx;
}


std::any WatParser::LocalidxContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitLocalidx(this);
  else
    return visitor->visitChildren(this);
}

WatParser::LocalidxContext* WatParser::localidx() {
  LocalidxContext *_localctx = _tracker.createInstance<LocalidxContext>(_ctx, getState());
  enterRule(_localctx, 84, WatParser::RuleLocalidx);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(555);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::Unsigned: {
        enterOuterAlt(_localctx, 1);
        setState(553);
        u32();
        break;
      }

      case WatParser::Id: {
        enterOuterAlt(_localctx, 2);
        setState(554);
        match(WatParser::Id);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelidxContext ------------------------------------------------------------------

WatParser::LabelidxContext::LabelidxContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::U32Context* WatParser::LabelidxContext::u32() {
  return getRuleContext<WatParser::U32Context>(0);
}

tree::TerminalNode* WatParser::LabelidxContext::Id() {
  return getToken(WatParser::Id, 0);
}


size_t WatParser::LabelidxContext::getRuleIndex() const {
  return WatParser::RuleLabelidx;
}


std::any WatParser::LabelidxContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitLabelidx(this);
  else
    return visitor->visitChildren(this);
}

WatParser::LabelidxContext* WatParser::labelidx() {
  LabelidxContext *_localctx = _tracker.createInstance<LabelidxContext>(_ctx, getState());
  enterRule(_localctx, 86, WatParser::RuleLabelidx);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(559);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::Unsigned: {
        enterOuterAlt(_localctx, 1);
        setState(557);
        u32();
        break;
      }

      case WatParser::Id: {
        enterOuterAlt(_localctx, 2);
        setState(558);
        match(WatParser::Id);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeuseContext ------------------------------------------------------------------

WatParser::TypeuseContext::TypeuseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::TypeidxContext* WatParser::TypeuseContext::typeidx() {
  return getRuleContext<WatParser::TypeidxContext>(0);
}

std::vector<WatParser::ParamContext *> WatParser::TypeuseContext::param() {
  return getRuleContexts<WatParser::ParamContext>();
}

WatParser::ParamContext* WatParser::TypeuseContext::param(size_t i) {
  return getRuleContext<WatParser::ParamContext>(i);
}

std::vector<WatParser::ResultContext *> WatParser::TypeuseContext::result() {
  return getRuleContexts<WatParser::ResultContext>();
}

WatParser::ResultContext* WatParser::TypeuseContext::result(size_t i) {
  return getRuleContext<WatParser::ResultContext>(i);
}


size_t WatParser::TypeuseContext::getRuleIndex() const {
  return WatParser::RuleTypeuse;
}


std::any WatParser::TypeuseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitTypeuse(this);
  else
    return visitor->visitChildren(this);
}

WatParser::TypeuseContext* WatParser::typeuse() {
  TypeuseContext *_localctx = _tracker.createInstance<TypeuseContext>(_ctx, getState());
  enterRule(_localctx, 88, WatParser::RuleTypeuse);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(566);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx)) {
    case 1: {
      setState(561);
      match(WatParser::T__0);
      setState(562);
      match(WatParser::T__3);
      setState(563);
      typeidx();
      setState(564);
      match(WatParser::T__2);
      break;
    }

    default:
      break;
    }
    setState(571);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 65, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(568);
        param(); 
      }
      setState(573);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 65, _ctx);
    }
    setState(577);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(574);
        result(); 
      }
      setState(579);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InstrContext ------------------------------------------------------------------

WatParser::InstrContext::InstrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::PlaininstrContext* WatParser::InstrContext::plaininstr() {
  return getRuleContext<WatParser::PlaininstrContext>(0);
}

WatParser::BlockinstrContext* WatParser::InstrContext::blockinstr() {
  return getRuleContext<WatParser::BlockinstrContext>(0);
}

WatParser::FoldedinstrContext* WatParser::InstrContext::foldedinstr() {
  return getRuleContext<WatParser::FoldedinstrContext>(0);
}


size_t WatParser::InstrContext::getRuleIndex() const {
  return WatParser::RuleInstr;
}


std::any WatParser::InstrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitInstr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::InstrContext* WatParser::instr() {
  InstrContext *_localctx = _tracker.createInstance<InstrContext>(_ctx, getState());
  enterRule(_localctx, 90, WatParser::RuleInstr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(583);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::T__30:
      case WatParser::T__31:
      case WatParser::T__32:
      case WatParser::T__33:
      case WatParser::T__34:
      case WatParser::T__35:
      case WatParser::T__36:
      case WatParser::T__37:
      case WatParser::T__38:
      case WatParser::T__39:
      case WatParser::T__40:
      case WatParser::T__41:
      case WatParser::T__42:
      case WatParser::T__43:
      case WatParser::T__44:
      case WatParser::T__45:
      case WatParser::T__46:
      case WatParser::T__47:
      case WatParser::T__48:
      case WatParser::T__49:
      case WatParser::T__50:
      case WatParser::T__51:
      case WatParser::T__52:
      case WatParser::T__53:
      case WatParser::T__54:
      case WatParser::T__55:
      case WatParser::T__56:
      case WatParser::T__57:
      case WatParser::T__58:
      case WatParser::T__59:
      case WatParser::T__60:
      case WatParser::T__61:
      case WatParser::T__62:
      case WatParser::T__63:
      case WatParser::T__64:
      case WatParser::T__65:
      case WatParser::T__66:
      case WatParser::T__67:
      case WatParser::T__68:
      case WatParser::T__69:
      case WatParser::T__70:
      case WatParser::T__71:
      case WatParser::T__72:
      case WatParser::T__73:
      case WatParser::T__74:
      case WatParser::T__75:
      case WatParser::T__76:
      case WatParser::T__77:
      case WatParser::T__78:
      case WatParser::T__79:
      case WatParser::T__80:
      case WatParser::T__81:
      case WatParser::T__82:
      case WatParser::T__83:
      case WatParser::T__84: {
        enterOuterAlt(_localctx, 1);
        setState(580);
        plaininstr();
        break;
      }

      case WatParser::T__20:
      case WatParser::T__22:
      case WatParser::T__23: {
        enterOuterAlt(_localctx, 2);
        setState(581);
        blockinstr();
        break;
      }

      case WatParser::T__0: {
        enterOuterAlt(_localctx, 3);
        setState(582);
        foldedinstr();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelContext ------------------------------------------------------------------

WatParser::LabelContext::LabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::LabelContext::Id() {
  return getToken(WatParser::Id, 0);
}


size_t WatParser::LabelContext::getRuleIndex() const {
  return WatParser::RuleLabel;
}


std::any WatParser::LabelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitLabel(this);
  else
    return visitor->visitChildren(this);
}

WatParser::LabelContext* WatParser::label() {
  LabelContext *_localctx = _tracker.createInstance<LabelContext>(_ctx, getState());
  enterRule(_localctx, 92, WatParser::RuleLabel);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(586);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::Id) {
      setState(585);
      match(WatParser::Id);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlocktypeContext ------------------------------------------------------------------

WatParser::BlocktypeContext::BlocktypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::ResultContext* WatParser::BlocktypeContext::result() {
  return getRuleContext<WatParser::ResultContext>(0);
}

WatParser::TypeuseContext* WatParser::BlocktypeContext::typeuse() {
  return getRuleContext<WatParser::TypeuseContext>(0);
}


size_t WatParser::BlocktypeContext::getRuleIndex() const {
  return WatParser::RuleBlocktype;
}


std::any WatParser::BlocktypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitBlocktype(this);
  else
    return visitor->visitChildren(this);
}

WatParser::BlocktypeContext* WatParser::blocktype() {
  BlocktypeContext *_localctx = _tracker.createInstance<BlocktypeContext>(_ctx, getState());
  enterRule(_localctx, 94, WatParser::RuleBlocktype);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(592);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(589);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx)) {
      case 1: {
        setState(588);
        result();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(591);
      typeuse();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockinstrContext ------------------------------------------------------------------

WatParser::BlockinstrContext::BlockinstrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::LabelContext* WatParser::BlockinstrContext::label() {
  return getRuleContext<WatParser::LabelContext>(0);
}

WatParser::BlocktypeContext* WatParser::BlockinstrContext::blocktype() {
  return getRuleContext<WatParser::BlocktypeContext>(0);
}

std::vector<WatParser::InstrContext *> WatParser::BlockinstrContext::instr() {
  return getRuleContexts<WatParser::InstrContext>();
}

WatParser::InstrContext* WatParser::BlockinstrContext::instr(size_t i) {
  return getRuleContext<WatParser::InstrContext>(i);
}

std::vector<tree::TerminalNode *> WatParser::BlockinstrContext::Id() {
  return getTokens(WatParser::Id);
}

tree::TerminalNode* WatParser::BlockinstrContext::Id(size_t i) {
  return getToken(WatParser::Id, i);
}


size_t WatParser::BlockinstrContext::getRuleIndex() const {
  return WatParser::RuleBlockinstr;
}


std::any WatParser::BlockinstrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitBlockinstr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::BlockinstrContext* WatParser::blockinstr() {
  BlockinstrContext *_localctx = _tracker.createInstance<BlockinstrContext>(_ctx, getState());
  enterRule(_localctx, 96, WatParser::RuleBlockinstr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(643);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::T__20: {
        enterOuterAlt(_localctx, 1);
        setState(594);
        match(WatParser::T__20);
        setState(595);
        label();
        setState(596);
        blocktype();
        setState(600);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -2120220670) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 4194303) != 0)) {
          setState(597);
          instr();
          setState(602);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(603);
        match(WatParser::T__21);
        setState(605);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Id) {
          setState(604);
          match(WatParser::Id);
        }
        break;
      }

      case WatParser::T__22: {
        enterOuterAlt(_localctx, 2);
        setState(607);
        match(WatParser::T__22);
        setState(608);
        label();
        setState(609);
        blocktype();
        setState(613);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -2120220670) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 4194303) != 0)) {
          setState(610);
          instr();
          setState(615);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(616);
        match(WatParser::T__21);
        setState(618);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Id) {
          setState(617);
          match(WatParser::Id);
        }
        break;
      }

      case WatParser::T__23: {
        enterOuterAlt(_localctx, 3);
        setState(620);
        match(WatParser::T__23);
        setState(621);
        label();
        setState(622);
        blocktype();
        setState(626);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -2120220670) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 4194303) != 0)) {
          setState(623);
          instr();
          setState(628);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }

        setState(629);
        match(WatParser::T__24);
        setState(631);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Id) {
          setState(630);
          match(WatParser::Id);
        }
        setState(636);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -2120220670) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 4194303) != 0)) {
          setState(633);
          instr();
          setState(638);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(639);
        match(WatParser::T__21);
        setState(641);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Id) {
          setState(640);
          match(WatParser::Id);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FoldedinstrContext ------------------------------------------------------------------

WatParser::FoldedinstrContext::FoldedinstrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::PlaininstrContext* WatParser::FoldedinstrContext::plaininstr() {
  return getRuleContext<WatParser::PlaininstrContext>(0);
}

std::vector<WatParser::FoldedinstrContext *> WatParser::FoldedinstrContext::foldedinstr() {
  return getRuleContexts<WatParser::FoldedinstrContext>();
}

WatParser::FoldedinstrContext* WatParser::FoldedinstrContext::foldedinstr(size_t i) {
  return getRuleContext<WatParser::FoldedinstrContext>(i);
}

WatParser::LabelContext* WatParser::FoldedinstrContext::label() {
  return getRuleContext<WatParser::LabelContext>(0);
}

WatParser::BlocktypeContext* WatParser::FoldedinstrContext::blocktype() {
  return getRuleContext<WatParser::BlocktypeContext>(0);
}

std::vector<WatParser::InstrContext *> WatParser::FoldedinstrContext::instr() {
  return getRuleContexts<WatParser::InstrContext>();
}

WatParser::InstrContext* WatParser::FoldedinstrContext::instr(size_t i) {
  return getRuleContext<WatParser::InstrContext>(i);
}


size_t WatParser::FoldedinstrContext::getRuleIndex() const {
  return WatParser::RuleFoldedinstr;
}


std::any WatParser::FoldedinstrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitFoldedinstr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::FoldedinstrContext* WatParser::foldedinstr() {
  FoldedinstrContext *_localctx = _tracker.createInstance<FoldedinstrContext>(_ctx, getState());
  enterRule(_localctx, 98, WatParser::RuleFoldedinstr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(711);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(645);
      match(WatParser::T__0);
      setState(646);
      plaininstr();
      setState(650);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::T__0) {
        setState(647);
        foldedinstr();
        setState(652);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(653);
      match(WatParser::T__2);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(655);
      match(WatParser::T__0);
      setState(656);
      match(WatParser::T__20);
      setState(657);
      label();
      setState(658);
      blocktype();
      setState(662);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -2120220670) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 4194303) != 0)) {
        setState(659);
        instr();
        setState(664);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(665);
      match(WatParser::T__2);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(667);
      match(WatParser::T__0);
      setState(668);
      match(WatParser::T__22);
      setState(669);
      label();
      setState(670);
      blocktype();
      setState(674);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -2120220670) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 4194303) != 0)) {
        setState(671);
        instr();
        setState(676);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(677);
      match(WatParser::T__2);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(679);
      match(WatParser::T__0);
      setState(680);
      match(WatParser::T__23);
      setState(681);
      label();
      setState(682);
      blocktype();
      setState(686);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(683);
          foldedinstr(); 
        }
        setState(688);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx);
      }
      setState(689);
      match(WatParser::T__0);
      setState(690);
      match(WatParser::T__25);
      setState(694);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -2120220670) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 4194303) != 0)) {
        setState(691);
        instr();
        setState(696);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(697);
      match(WatParser::T__2);
      setState(707);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::T__0) {
        setState(698);
        match(WatParser::T__0);
        setState(699);
        match(WatParser::T__24);
        setState(703);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -2120220670) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 4194303) != 0)) {
          setState(700);
          instr();
          setState(705);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(706);
        match(WatParser::T__2);
      }
      setState(709);
      match(WatParser::T__2);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstexprContext ------------------------------------------------------------------

WatParser::ConstexprContext::ConstexprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::I32Context* WatParser::ConstexprContext::i32() {
  return getRuleContext<WatParser::I32Context>(0);
}

WatParser::I64Context* WatParser::ConstexprContext::i64() {
  return getRuleContext<WatParser::I64Context>(0);
}

WatParser::F32Context* WatParser::ConstexprContext::f32() {
  return getRuleContext<WatParser::F32Context>(0);
}

WatParser::F64Context* WatParser::ConstexprContext::f64() {
  return getRuleContext<WatParser::F64Context>(0);
}

tree::TerminalNode* WatParser::ConstexprContext::HeapType() {
  return getToken(WatParser::HeapType, 0);
}

WatParser::FuncidxContext* WatParser::ConstexprContext::funcidx() {
  return getRuleContext<WatParser::FuncidxContext>(0);
}

WatParser::GlobalidxContext* WatParser::ConstexprContext::globalidx() {
  return getRuleContext<WatParser::GlobalidxContext>(0);
}


size_t WatParser::ConstexprContext::getRuleIndex() const {
  return WatParser::RuleConstexpr;
}


std::any WatParser::ConstexprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitConstexpr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ConstexprContext* WatParser::constexpr_() {
  ConstexprContext *_localctx = _tracker.createInstance<ConstexprContext>(_ctx, getState());
  enterRule(_localctx, 100, WatParser::RuleConstexpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(727);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::T__26: {
        enterOuterAlt(_localctx, 1);
        setState(713);
        match(WatParser::T__26);
        setState(714);
        i32();
        break;
      }

      case WatParser::T__27: {
        enterOuterAlt(_localctx, 2);
        setState(715);
        match(WatParser::T__27);
        setState(716);
        i64();
        break;
      }

      case WatParser::T__28: {
        enterOuterAlt(_localctx, 3);
        setState(717);
        match(WatParser::T__28);
        setState(718);
        f32();
        break;
      }

      case WatParser::T__29: {
        enterOuterAlt(_localctx, 4);
        setState(719);
        match(WatParser::T__29);
        setState(720);
        f64();
        break;
      }

      case WatParser::T__30: {
        enterOuterAlt(_localctx, 5);
        setState(721);
        match(WatParser::T__30);
        setState(722);
        match(WatParser::HeapType);
        break;
      }

      case WatParser::T__31: {
        enterOuterAlt(_localctx, 6);
        setState(723);
        match(WatParser::T__31);
        setState(724);
        funcidx();
        break;
      }

      case WatParser::T__32: {
        enterOuterAlt(_localctx, 7);
        setState(725);
        match(WatParser::T__32);
        setState(726);
        globalidx();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PlaininstrContext ------------------------------------------------------------------

WatParser::PlaininstrContext::PlaininstrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::ControlinstrContext* WatParser::PlaininstrContext::controlinstr() {
  return getRuleContext<WatParser::ControlinstrContext>(0);
}

WatParser::ReferenceinstrContext* WatParser::PlaininstrContext::referenceinstr() {
  return getRuleContext<WatParser::ReferenceinstrContext>(0);
}

WatParser::ParametricinstrContext* WatParser::PlaininstrContext::parametricinstr() {
  return getRuleContext<WatParser::ParametricinstrContext>(0);
}

WatParser::VariableinstrContext* WatParser::PlaininstrContext::variableinstr() {
  return getRuleContext<WatParser::VariableinstrContext>(0);
}

WatParser::TableinstrContext* WatParser::PlaininstrContext::tableinstr() {
  return getRuleContext<WatParser::TableinstrContext>(0);
}

WatParser::MemoryinstrContext* WatParser::PlaininstrContext::memoryinstr() {
  return getRuleContext<WatParser::MemoryinstrContext>(0);
}


size_t WatParser::PlaininstrContext::getRuleIndex() const {
  return WatParser::RulePlaininstr;
}


std::any WatParser::PlaininstrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitPlaininstr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::PlaininstrContext* WatParser::plaininstr() {
  PlaininstrContext *_localctx = _tracker.createInstance<PlaininstrContext>(_ctx, getState());
  enterRule(_localctx, 102, WatParser::RulePlaininstr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(735);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::T__33:
      case WatParser::T__34:
      case WatParser::T__35:
      case WatParser::T__36:
      case WatParser::T__37:
      case WatParser::T__38:
      case WatParser::T__39:
      case WatParser::T__40: {
        enterOuterAlt(_localctx, 1);
        setState(729);
        controlinstr();
        break;
      }

      case WatParser::T__30:
      case WatParser::T__31:
      case WatParser::T__41: {
        enterOuterAlt(_localctx, 2);
        setState(730);
        referenceinstr();
        break;
      }

      case WatParser::T__42:
      case WatParser::T__43: {
        enterOuterAlt(_localctx, 3);
        setState(731);
        parametricinstr();
        break;
      }

      case WatParser::T__32:
      case WatParser::T__44:
      case WatParser::T__45:
      case WatParser::T__46:
      case WatParser::T__47: {
        enterOuterAlt(_localctx, 4);
        setState(732);
        variableinstr();
        break;
      }

      case WatParser::T__48:
      case WatParser::T__49:
      case WatParser::T__50:
      case WatParser::T__51:
      case WatParser::T__52:
      case WatParser::T__53:
      case WatParser::T__54:
      case WatParser::T__55: {
        enterOuterAlt(_localctx, 5);
        setState(733);
        tableinstr();
        break;
      }

      case WatParser::T__56:
      case WatParser::T__57:
      case WatParser::T__58:
      case WatParser::T__59:
      case WatParser::T__60:
      case WatParser::T__61:
      case WatParser::T__62:
      case WatParser::T__63:
      case WatParser::T__64:
      case WatParser::T__65:
      case WatParser::T__66:
      case WatParser::T__67:
      case WatParser::T__68:
      case WatParser::T__69:
      case WatParser::T__70:
      case WatParser::T__71:
      case WatParser::T__72:
      case WatParser::T__73:
      case WatParser::T__74:
      case WatParser::T__75:
      case WatParser::T__76:
      case WatParser::T__77:
      case WatParser::T__78:
      case WatParser::T__79:
      case WatParser::T__80:
      case WatParser::T__81:
      case WatParser::T__82:
      case WatParser::T__83:
      case WatParser::T__84: {
        enterOuterAlt(_localctx, 6);
        setState(734);
        memoryinstr();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ControlinstrContext ------------------------------------------------------------------

WatParser::ControlinstrContext::ControlinstrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<WatParser::LabelidxContext *> WatParser::ControlinstrContext::labelidx() {
  return getRuleContexts<WatParser::LabelidxContext>();
}

WatParser::LabelidxContext* WatParser::ControlinstrContext::labelidx(size_t i) {
  return getRuleContext<WatParser::LabelidxContext>(i);
}

WatParser::FuncidxContext* WatParser::ControlinstrContext::funcidx() {
  return getRuleContext<WatParser::FuncidxContext>(0);
}

WatParser::TableidxContext* WatParser::ControlinstrContext::tableidx() {
  return getRuleContext<WatParser::TableidxContext>(0);
}

WatParser::TypeuseContext* WatParser::ControlinstrContext::typeuse() {
  return getRuleContext<WatParser::TypeuseContext>(0);
}


size_t WatParser::ControlinstrContext::getRuleIndex() const {
  return WatParser::RuleControlinstr;
}


std::any WatParser::ControlinstrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitControlinstr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ControlinstrContext* WatParser::controlinstr() {
  ControlinstrContext *_localctx = _tracker.createInstance<ControlinstrContext>(_ctx, getState());
  enterRule(_localctx, 104, WatParser::RuleControlinstr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(756);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::T__33: {
        enterOuterAlt(_localctx, 1);
        setState(737);
        match(WatParser::T__33);
        break;
      }

      case WatParser::T__34: {
        enterOuterAlt(_localctx, 2);
        setState(738);
        match(WatParser::T__34);
        break;
      }

      case WatParser::T__35: {
        enterOuterAlt(_localctx, 3);
        setState(739);
        match(WatParser::T__35);
        setState(740);
        labelidx();
        break;
      }

      case WatParser::T__36: {
        enterOuterAlt(_localctx, 4);
        setState(741);
        match(WatParser::T__36);
        setState(742);
        labelidx();
        break;
      }

      case WatParser::T__37: {
        enterOuterAlt(_localctx, 5);
        setState(743);
        match(WatParser::T__37);
        setState(745); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(744);
          labelidx();
          setState(747); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == WatParser::Unsigned

        || _la == WatParser::Id);
        break;
      }

      case WatParser::T__38: {
        enterOuterAlt(_localctx, 6);
        setState(749);
        match(WatParser::T__38);
        break;
      }

      case WatParser::T__39: {
        enterOuterAlt(_localctx, 7);
        setState(750);
        match(WatParser::T__39);
        setState(751);
        funcidx();
        break;
      }

      case WatParser::T__40: {
        enterOuterAlt(_localctx, 8);
        setState(752);
        match(WatParser::T__40);
        setState(753);
        tableidx();
        setState(754);
        typeuse();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReferenceinstrContext ------------------------------------------------------------------

WatParser::ReferenceinstrContext::ReferenceinstrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::ReferenceinstrContext::HeapType() {
  return getToken(WatParser::HeapType, 0);
}

WatParser::FuncidxContext* WatParser::ReferenceinstrContext::funcidx() {
  return getRuleContext<WatParser::FuncidxContext>(0);
}


size_t WatParser::ReferenceinstrContext::getRuleIndex() const {
  return WatParser::RuleReferenceinstr;
}


std::any WatParser::ReferenceinstrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitReferenceinstr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ReferenceinstrContext* WatParser::referenceinstr() {
  ReferenceinstrContext *_localctx = _tracker.createInstance<ReferenceinstrContext>(_ctx, getState());
  enterRule(_localctx, 106, WatParser::RuleReferenceinstr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(763);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::T__30: {
        enterOuterAlt(_localctx, 1);
        setState(758);
        match(WatParser::T__30);
        setState(759);
        match(WatParser::HeapType);
        break;
      }

      case WatParser::T__41: {
        enterOuterAlt(_localctx, 2);
        setState(760);
        match(WatParser::T__41);
        break;
      }

      case WatParser::T__31: {
        enterOuterAlt(_localctx, 3);
        setState(761);
        match(WatParser::T__31);
        setState(762);
        funcidx();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParametricinstrContext ------------------------------------------------------------------

WatParser::ParametricinstrContext::ParametricinstrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<WatParser::ResultContext *> WatParser::ParametricinstrContext::result() {
  return getRuleContexts<WatParser::ResultContext>();
}

WatParser::ResultContext* WatParser::ParametricinstrContext::result(size_t i) {
  return getRuleContext<WatParser::ResultContext>(i);
}


size_t WatParser::ParametricinstrContext::getRuleIndex() const {
  return WatParser::RuleParametricinstr;
}


std::any WatParser::ParametricinstrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitParametricinstr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ParametricinstrContext* WatParser::parametricinstr() {
  ParametricinstrContext *_localctx = _tracker.createInstance<ParametricinstrContext>(_ctx, getState());
  enterRule(_localctx, 108, WatParser::RuleParametricinstr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(773);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::T__42: {
        enterOuterAlt(_localctx, 1);
        setState(765);
        match(WatParser::T__42);
        break;
      }

      case WatParser::T__43: {
        enterOuterAlt(_localctx, 2);
        setState(766);
        match(WatParser::T__43);
        setState(770);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 93, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(767);
            result(); 
          }
          setState(772);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 93, _ctx);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableinstrContext ------------------------------------------------------------------

WatParser::VariableinstrContext::VariableinstrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::LocalidxContext* WatParser::VariableinstrContext::localidx() {
  return getRuleContext<WatParser::LocalidxContext>(0);
}

WatParser::GlobalidxContext* WatParser::VariableinstrContext::globalidx() {
  return getRuleContext<WatParser::GlobalidxContext>(0);
}


size_t WatParser::VariableinstrContext::getRuleIndex() const {
  return WatParser::RuleVariableinstr;
}


std::any WatParser::VariableinstrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitVariableinstr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::VariableinstrContext* WatParser::variableinstr() {
  VariableinstrContext *_localctx = _tracker.createInstance<VariableinstrContext>(_ctx, getState());
  enterRule(_localctx, 110, WatParser::RuleVariableinstr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(785);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::T__44: {
        enterOuterAlt(_localctx, 1);
        setState(775);
        match(WatParser::T__44);
        setState(776);
        localidx();
        break;
      }

      case WatParser::T__45: {
        enterOuterAlt(_localctx, 2);
        setState(777);
        match(WatParser::T__45);
        setState(778);
        localidx();
        break;
      }

      case WatParser::T__46: {
        enterOuterAlt(_localctx, 3);
        setState(779);
        match(WatParser::T__46);
        setState(780);
        localidx();
        break;
      }

      case WatParser::T__32: {
        enterOuterAlt(_localctx, 4);
        setState(781);
        match(WatParser::T__32);
        setState(782);
        globalidx();
        break;
      }

      case WatParser::T__47: {
        enterOuterAlt(_localctx, 5);
        setState(783);
        match(WatParser::T__47);
        setState(784);
        globalidx();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableinstrContext ------------------------------------------------------------------

WatParser::TableinstrContext::TableinstrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<WatParser::TableidxContext *> WatParser::TableinstrContext::tableidx() {
  return getRuleContexts<WatParser::TableidxContext>();
}

WatParser::TableidxContext* WatParser::TableinstrContext::tableidx(size_t i) {
  return getRuleContext<WatParser::TableidxContext>(i);
}

WatParser::ElemidxContext* WatParser::TableinstrContext::elemidx() {
  return getRuleContext<WatParser::ElemidxContext>(0);
}


size_t WatParser::TableinstrContext::getRuleIndex() const {
  return WatParser::RuleTableinstr;
}


std::any WatParser::TableinstrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitTableinstr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::TableinstrContext* WatParser::tableinstr() {
  TableinstrContext *_localctx = _tracker.createInstance<TableinstrContext>(_ctx, getState());
  enterRule(_localctx, 112, WatParser::RuleTableinstr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(820);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::T__48: {
        enterOuterAlt(_localctx, 1);
        setState(787);
        match(WatParser::T__48);
        setState(789);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Unsigned

        || _la == WatParser::Id) {
          setState(788);
          tableidx();
        }
        break;
      }

      case WatParser::T__49: {
        enterOuterAlt(_localctx, 2);
        setState(791);
        match(WatParser::T__49);
        setState(793);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Unsigned

        || _la == WatParser::Id) {
          setState(792);
          tableidx();
        }
        break;
      }

      case WatParser::T__50: {
        enterOuterAlt(_localctx, 3);
        setState(795);
        match(WatParser::T__50);
        setState(797);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Unsigned

        || _la == WatParser::Id) {
          setState(796);
          tableidx();
        }
        break;
      }

      case WatParser::T__51: {
        enterOuterAlt(_localctx, 4);
        setState(799);
        match(WatParser::T__51);
        setState(801);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Unsigned

        || _la == WatParser::Id) {
          setState(800);
          tableidx();
        }
        break;
      }

      case WatParser::T__52: {
        enterOuterAlt(_localctx, 5);
        setState(803);
        match(WatParser::T__52);
        setState(805);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Unsigned

        || _la == WatParser::Id) {
          setState(804);
          tableidx();
        }
        break;
      }

      case WatParser::T__53: {
        enterOuterAlt(_localctx, 6);
        setState(807);
        match(WatParser::T__53);
        setState(811);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Unsigned

        || _la == WatParser::Id) {
          setState(808);
          tableidx();
          setState(809);
          tableidx();
        }
        break;
      }

      case WatParser::T__54: {
        enterOuterAlt(_localctx, 7);
        setState(813);
        match(WatParser::T__54);
        setState(815);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx)) {
        case 1: {
          setState(814);
          tableidx();
          break;
        }

        default:
          break;
        }
        setState(817);
        elemidx();
        break;
      }

      case WatParser::T__55: {
        enterOuterAlt(_localctx, 8);
        setState(818);
        match(WatParser::T__55);
        setState(819);
        elemidx();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MemargContext ------------------------------------------------------------------

WatParser::MemargContext::MemargContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::MemargContext::Offset() {
  return getToken(WatParser::Offset, 0);
}

tree::TerminalNode* WatParser::MemargContext::Align() {
  return getToken(WatParser::Align, 0);
}


size_t WatParser::MemargContext::getRuleIndex() const {
  return WatParser::RuleMemarg;
}


std::any WatParser::MemargContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitMemarg(this);
  else
    return visitor->visitChildren(this);
}

WatParser::MemargContext* WatParser::memarg() {
  MemargContext *_localctx = _tracker.createInstance<MemargContext>(_ctx, getState());
  enterRule(_localctx, 114, WatParser::RuleMemarg);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(823);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::Offset) {
      setState(822);
      match(WatParser::Offset);
    }
    setState(826);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::Align) {
      setState(825);
      match(WatParser::Align);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MemoryinstrContext ------------------------------------------------------------------

WatParser::MemoryinstrContext::MemoryinstrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<WatParser::MemidxContext *> WatParser::MemoryinstrContext::memidx() {
  return getRuleContexts<WatParser::MemidxContext>();
}

WatParser::MemidxContext* WatParser::MemoryinstrContext::memidx(size_t i) {
  return getRuleContext<WatParser::MemidxContext>(i);
}

WatParser::DataidxContext* WatParser::MemoryinstrContext::dataidx() {
  return getRuleContext<WatParser::DataidxContext>(0);
}

WatParser::MemargContext* WatParser::MemoryinstrContext::memarg() {
  return getRuleContext<WatParser::MemargContext>(0);
}


size_t WatParser::MemoryinstrContext::getRuleIndex() const {
  return WatParser::RuleMemoryinstr;
}


std::any WatParser::MemoryinstrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitMemoryinstr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::MemoryinstrContext* WatParser::memoryinstr() {
  MemoryinstrContext *_localctx = _tracker.createInstance<MemoryinstrContext>(_ctx, getState());
  enterRule(_localctx, 116, WatParser::RuleMemoryinstr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(968);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::T__56: {
        enterOuterAlt(_localctx, 1);
        setState(828);
        match(WatParser::T__56);
        setState(830);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Unsigned

        || _la == WatParser::Id) {
          setState(829);
          memidx();
        }
        break;
      }

      case WatParser::T__57: {
        enterOuterAlt(_localctx, 2);
        setState(832);
        match(WatParser::T__57);
        setState(834);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Unsigned

        || _la == WatParser::Id) {
          setState(833);
          memidx();
        }
        break;
      }

      case WatParser::T__58: {
        enterOuterAlt(_localctx, 3);
        setState(836);
        match(WatParser::T__58);
        setState(838);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Unsigned

        || _la == WatParser::Id) {
          setState(837);
          memidx();
        }
        break;
      }

      case WatParser::T__59: {
        enterOuterAlt(_localctx, 4);
        setState(840);
        match(WatParser::T__59);
        setState(844);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Unsigned

        || _la == WatParser::Id) {
          setState(841);
          memidx();
          setState(842);
          memidx();
        }
        break;
      }

      case WatParser::T__60: {
        enterOuterAlt(_localctx, 5);
        setState(846);
        match(WatParser::T__60);
        setState(848);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 110, _ctx)) {
        case 1: {
          setState(847);
          memidx();
          break;
        }

        default:
          break;
        }
        setState(850);
        dataidx();
        break;
      }

      case WatParser::T__61: {
        enterOuterAlt(_localctx, 6);
        setState(851);
        match(WatParser::T__61);
        setState(852);
        dataidx();
        break;
      }

      case WatParser::T__62: {
        enterOuterAlt(_localctx, 7);
        setState(853);
        match(WatParser::T__62);
        setState(855);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Unsigned

        || _la == WatParser::Id) {
          setState(854);
          memidx();
        }
        setState(857);
        memarg();
        break;
      }

      case WatParser::T__63: {
        enterOuterAlt(_localctx, 8);
        setState(858);
        match(WatParser::T__63);
        setState(860);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Unsigned

        || _la == WatParser::Id) {
          setState(859);
          memidx();
        }
        setState(862);
        memarg();
        break;
      }

      case WatParser::T__64: {
        enterOuterAlt(_localctx, 9);
        setState(863);
        match(WatParser::T__64);
        setState(865);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Unsigned

        || _la == WatParser::Id) {
          setState(864);
          memidx();
        }
        setState(867);
        memarg();
        break;
      }

      case WatParser::T__65: {
        enterOuterAlt(_localctx, 10);
        setState(868);
        match(WatParser::T__65);
        setState(870);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Unsigned

        || _la == WatParser::Id) {
          setState(869);
          memidx();
        }
        setState(872);
        memarg();
        break;
      }

      case WatParser::T__66: {
        enterOuterAlt(_localctx, 11);
        setState(873);
        match(WatParser::T__66);
        setState(875);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Unsigned

        || _la == WatParser::Id) {
          setState(874);
          memidx();
        }
        setState(877);
        memarg();
        break;
      }

      case WatParser::T__67: {
        enterOuterAlt(_localctx, 12);
        setState(878);
        match(WatParser::T__67);
        setState(880);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Unsigned

        || _la == WatParser::Id) {
          setState(879);
          memidx();
        }
        setState(882);
        memarg();
        break;
      }

      case WatParser::T__68: {
        enterOuterAlt(_localctx, 13);
        setState(883);
        match(WatParser::T__68);
        setState(885);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Unsigned

        || _la == WatParser::Id) {
          setState(884);
          memidx();
        }
        setState(887);
        memarg();
        break;
      }

      case WatParser::T__69: {
        enterOuterAlt(_localctx, 14);
        setState(888);
        match(WatParser::T__69);
        setState(890);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Unsigned

        || _la == WatParser::Id) {
          setState(889);
          memidx();
        }
        setState(892);
        memarg();
        break;
      }

      case WatParser::T__70: {
        enterOuterAlt(_localctx, 15);
        setState(893);
        match(WatParser::T__70);
        setState(895);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Unsigned

        || _la == WatParser::Id) {
          setState(894);
          memidx();
        }
        setState(897);
        memarg();
        break;
      }

      case WatParser::T__71: {
        enterOuterAlt(_localctx, 16);
        setState(898);
        match(WatParser::T__71);
        setState(900);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Unsigned

        || _la == WatParser::Id) {
          setState(899);
          memidx();
        }
        setState(902);
        memarg();
        break;
      }

      case WatParser::T__72: {
        enterOuterAlt(_localctx, 17);
        setState(903);
        match(WatParser::T__72);
        setState(905);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Unsigned

        || _la == WatParser::Id) {
          setState(904);
          memidx();
        }
        setState(907);
        memarg();
        break;
      }

      case WatParser::T__73: {
        enterOuterAlt(_localctx, 18);
        setState(908);
        match(WatParser::T__73);
        setState(910);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Unsigned

        || _la == WatParser::Id) {
          setState(909);
          memidx();
        }
        setState(912);
        memarg();
        break;
      }

      case WatParser::T__74: {
        enterOuterAlt(_localctx, 19);
        setState(913);
        match(WatParser::T__74);
        setState(915);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Unsigned

        || _la == WatParser::Id) {
          setState(914);
          memidx();
        }
        setState(917);
        memarg();
        break;
      }

      case WatParser::T__75: {
        enterOuterAlt(_localctx, 20);
        setState(918);
        match(WatParser::T__75);
        setState(920);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Unsigned

        || _la == WatParser::Id) {
          setState(919);
          memidx();
        }
        setState(922);
        memarg();
        break;
      }

      case WatParser::T__76: {
        enterOuterAlt(_localctx, 21);
        setState(923);
        match(WatParser::T__76);
        setState(925);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Unsigned

        || _la == WatParser::Id) {
          setState(924);
          memidx();
        }
        setState(927);
        memarg();
        break;
      }

      case WatParser::T__77: {
        enterOuterAlt(_localctx, 22);
        setState(928);
        match(WatParser::T__77);
        setState(930);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Unsigned

        || _la == WatParser::Id) {
          setState(929);
          memidx();
        }
        setState(932);
        memarg();
        break;
      }

      case WatParser::T__78: {
        enterOuterAlt(_localctx, 23);
        setState(933);
        match(WatParser::T__78);
        setState(935);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Unsigned

        || _la == WatParser::Id) {
          setState(934);
          memidx();
        }
        setState(937);
        memarg();
        break;
      }

      case WatParser::T__79: {
        enterOuterAlt(_localctx, 24);
        setState(938);
        match(WatParser::T__79);
        setState(940);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Unsigned

        || _la == WatParser::Id) {
          setState(939);
          memidx();
        }
        setState(942);
        memarg();
        break;
      }

      case WatParser::T__80: {
        enterOuterAlt(_localctx, 25);
        setState(943);
        match(WatParser::T__80);
        setState(945);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Unsigned

        || _la == WatParser::Id) {
          setState(944);
          memidx();
        }
        setState(947);
        memarg();
        break;
      }

      case WatParser::T__81: {
        enterOuterAlt(_localctx, 26);
        setState(948);
        match(WatParser::T__81);
        setState(950);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Unsigned

        || _la == WatParser::Id) {
          setState(949);
          memidx();
        }
        setState(952);
        memarg();
        break;
      }

      case WatParser::T__82: {
        enterOuterAlt(_localctx, 27);
        setState(953);
        match(WatParser::T__82);
        setState(955);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Unsigned

        || _la == WatParser::Id) {
          setState(954);
          memidx();
        }
        setState(957);
        memarg();
        break;
      }

      case WatParser::T__83: {
        enterOuterAlt(_localctx, 28);
        setState(958);
        match(WatParser::T__83);
        setState(960);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Unsigned

        || _la == WatParser::Id) {
          setState(959);
          memidx();
        }
        setState(962);
        memarg();
        break;
      }

      case WatParser::T__84: {
        enterOuterAlt(_localctx, 29);
        setState(963);
        match(WatParser::T__84);
        setState(965);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::Unsigned

        || _la == WatParser::Id) {
          setState(964);
          memidx();
        }
        setState(967);
        memarg();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumericinstrContext ------------------------------------------------------------------

WatParser::NumericinstrContext::NumericinstrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::I32Context* WatParser::NumericinstrContext::i32() {
  return getRuleContext<WatParser::I32Context>(0);
}

WatParser::I64Context* WatParser::NumericinstrContext::i64() {
  return getRuleContext<WatParser::I64Context>(0);
}

WatParser::F32Context* WatParser::NumericinstrContext::f32() {
  return getRuleContext<WatParser::F32Context>(0);
}

WatParser::F64Context* WatParser::NumericinstrContext::f64() {
  return getRuleContext<WatParser::F64Context>(0);
}


size_t WatParser::NumericinstrContext::getRuleIndex() const {
  return WatParser::RuleNumericinstr;
}


std::any WatParser::NumericinstrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatVisitor*>(visitor))
    return parserVisitor->visitNumericinstr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::NumericinstrContext* WatParser::numericinstr() {
  NumericinstrContext *_localctx = _tracker.createInstance<NumericinstrContext>(_ctx, getState());
  enterRule(_localctx, 118, WatParser::RuleNumericinstr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1114);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::T__26: {
        enterOuterAlt(_localctx, 1);
        setState(970);
        match(WatParser::T__26);
        setState(971);
        i32();
        break;
      }

      case WatParser::T__27: {
        enterOuterAlt(_localctx, 2);
        setState(972);
        match(WatParser::T__27);
        setState(973);
        i64();
        break;
      }

      case WatParser::T__28: {
        enterOuterAlt(_localctx, 3);
        setState(974);
        match(WatParser::T__28);
        setState(975);
        f32();
        break;
      }

      case WatParser::T__29: {
        enterOuterAlt(_localctx, 4);
        setState(976);
        match(WatParser::T__29);
        setState(977);
        f64();
        break;
      }

      case WatParser::T__85: {
        enterOuterAlt(_localctx, 5);
        setState(978);
        match(WatParser::T__85);
        break;
      }

      case WatParser::T__86: {
        enterOuterAlt(_localctx, 6);
        setState(979);
        match(WatParser::T__86);
        break;
      }

      case WatParser::T__87: {
        enterOuterAlt(_localctx, 7);
        setState(980);
        match(WatParser::T__87);
        break;
      }

      case WatParser::T__88: {
        enterOuterAlt(_localctx, 8);
        setState(981);
        match(WatParser::T__88);
        break;
      }

      case WatParser::T__89: {
        enterOuterAlt(_localctx, 9);
        setState(982);
        match(WatParser::T__89);
        break;
      }

      case WatParser::T__90: {
        enterOuterAlt(_localctx, 10);
        setState(983);
        match(WatParser::T__90);
        break;
      }

      case WatParser::T__91: {
        enterOuterAlt(_localctx, 11);
        setState(984);
        match(WatParser::T__91);
        break;
      }

      case WatParser::T__92: {
        enterOuterAlt(_localctx, 12);
        setState(985);
        match(WatParser::T__92);
        break;
      }

      case WatParser::T__93: {
        enterOuterAlt(_localctx, 13);
        setState(986);
        match(WatParser::T__93);
        break;
      }

      case WatParser::T__94: {
        enterOuterAlt(_localctx, 14);
        setState(987);
        match(WatParser::T__94);
        break;
      }

      case WatParser::T__95: {
        enterOuterAlt(_localctx, 15);
        setState(988);
        match(WatParser::T__95);
        break;
      }

      case WatParser::T__96: {
        enterOuterAlt(_localctx, 16);
        setState(989);
        match(WatParser::T__96);
        break;
      }

      case WatParser::T__97: {
        enterOuterAlt(_localctx, 17);
        setState(990);
        match(WatParser::T__97);
        break;
      }

      case WatParser::T__98: {
        enterOuterAlt(_localctx, 18);
        setState(991);
        match(WatParser::T__98);
        break;
      }

      case WatParser::T__99: {
        enterOuterAlt(_localctx, 19);
        setState(992);
        match(WatParser::T__99);
        break;
      }

      case WatParser::T__100: {
        enterOuterAlt(_localctx, 20);
        setState(993);
        match(WatParser::T__100);
        break;
      }

      case WatParser::T__101: {
        enterOuterAlt(_localctx, 21);
        setState(994);
        match(WatParser::T__101);
        break;
      }

      case WatParser::T__102: {
        enterOuterAlt(_localctx, 22);
        setState(995);
        match(WatParser::T__102);
        break;
      }

      case WatParser::T__103: {
        enterOuterAlt(_localctx, 23);
        setState(996);
        match(WatParser::T__103);
        break;
      }

      case WatParser::T__104: {
        enterOuterAlt(_localctx, 24);
        setState(997);
        match(WatParser::T__104);
        break;
      }

      case WatParser::T__105: {
        enterOuterAlt(_localctx, 25);
        setState(998);
        match(WatParser::T__105);
        break;
      }

      case WatParser::T__106: {
        enterOuterAlt(_localctx, 26);
        setState(999);
        match(WatParser::T__106);
        break;
      }

      case WatParser::T__107: {
        enterOuterAlt(_localctx, 27);
        setState(1000);
        match(WatParser::T__107);
        break;
      }

      case WatParser::T__108: {
        enterOuterAlt(_localctx, 28);
        setState(1001);
        match(WatParser::T__108);
        break;
      }

      case WatParser::T__109: {
        enterOuterAlt(_localctx, 29);
        setState(1002);
        match(WatParser::T__109);
        break;
      }

      case WatParser::T__110: {
        enterOuterAlt(_localctx, 30);
        setState(1003);
        match(WatParser::T__110);
        break;
      }

      case WatParser::T__111: {
        enterOuterAlt(_localctx, 31);
        setState(1004);
        match(WatParser::T__111);
        break;
      }

      case WatParser::T__112: {
        enterOuterAlt(_localctx, 32);
        setState(1005);
        match(WatParser::T__112);
        break;
      }

      case WatParser::T__113: {
        enterOuterAlt(_localctx, 33);
        setState(1006);
        match(WatParser::T__113);
        break;
      }

      case WatParser::T__114: {
        enterOuterAlt(_localctx, 34);
        setState(1007);
        match(WatParser::T__114);
        break;
      }

      case WatParser::T__115: {
        enterOuterAlt(_localctx, 35);
        setState(1008);
        match(WatParser::T__115);
        break;
      }

      case WatParser::T__116: {
        enterOuterAlt(_localctx, 36);
        setState(1009);
        match(WatParser::T__116);
        break;
      }

      case WatParser::T__117: {
        enterOuterAlt(_localctx, 37);
        setState(1010);
        match(WatParser::T__117);
        break;
      }

      case WatParser::T__118: {
        enterOuterAlt(_localctx, 38);
        setState(1011);
        match(WatParser::T__118);
        break;
      }

      case WatParser::T__119: {
        enterOuterAlt(_localctx, 39);
        setState(1012);
        match(WatParser::T__119);
        break;
      }

      case WatParser::T__120: {
        enterOuterAlt(_localctx, 40);
        setState(1013);
        match(WatParser::T__120);
        break;
      }

      case WatParser::T__121: {
        enterOuterAlt(_localctx, 41);
        setState(1014);
        match(WatParser::T__121);
        break;
      }

      case WatParser::T__122: {
        enterOuterAlt(_localctx, 42);
        setState(1015);
        match(WatParser::T__122);
        break;
      }

      case WatParser::T__123: {
        enterOuterAlt(_localctx, 43);
        setState(1016);
        match(WatParser::T__123);
        break;
      }

      case WatParser::T__124: {
        enterOuterAlt(_localctx, 44);
        setState(1017);
        match(WatParser::T__124);
        break;
      }

      case WatParser::T__125: {
        enterOuterAlt(_localctx, 45);
        setState(1018);
        match(WatParser::T__125);
        break;
      }

      case WatParser::T__126: {
        enterOuterAlt(_localctx, 46);
        setState(1019);
        match(WatParser::T__126);
        break;
      }

      case WatParser::T__127: {
        enterOuterAlt(_localctx, 47);
        setState(1020);
        match(WatParser::T__127);
        break;
      }

      case WatParser::T__128: {
        enterOuterAlt(_localctx, 48);
        setState(1021);
        match(WatParser::T__128);
        break;
      }

      case WatParser::T__129: {
        enterOuterAlt(_localctx, 49);
        setState(1022);
        match(WatParser::T__129);
        break;
      }

      case WatParser::T__130: {
        enterOuterAlt(_localctx, 50);
        setState(1023);
        match(WatParser::T__130);
        break;
      }

      case WatParser::T__131: {
        enterOuterAlt(_localctx, 51);
        setState(1024);
        match(WatParser::T__131);
        break;
      }

      case WatParser::T__132: {
        enterOuterAlt(_localctx, 52);
        setState(1025);
        match(WatParser::T__132);
        break;
      }

      case WatParser::T__133: {
        enterOuterAlt(_localctx, 53);
        setState(1026);
        match(WatParser::T__133);
        break;
      }

      case WatParser::T__134: {
        enterOuterAlt(_localctx, 54);
        setState(1027);
        match(WatParser::T__134);
        break;
      }

      case WatParser::T__135: {
        enterOuterAlt(_localctx, 55);
        setState(1028);
        match(WatParser::T__135);
        break;
      }

      case WatParser::T__136: {
        enterOuterAlt(_localctx, 56);
        setState(1029);
        match(WatParser::T__136);
        break;
      }

      case WatParser::T__137: {
        enterOuterAlt(_localctx, 57);
        setState(1030);
        match(WatParser::T__137);
        break;
      }

      case WatParser::T__138: {
        enterOuterAlt(_localctx, 58);
        setState(1031);
        match(WatParser::T__138);
        break;
      }

      case WatParser::T__139: {
        enterOuterAlt(_localctx, 59);
        setState(1032);
        match(WatParser::T__139);
        break;
      }

      case WatParser::T__140: {
        enterOuterAlt(_localctx, 60);
        setState(1033);
        match(WatParser::T__140);
        break;
      }

      case WatParser::T__141: {
        enterOuterAlt(_localctx, 61);
        setState(1034);
        match(WatParser::T__141);
        break;
      }

      case WatParser::T__142: {
        enterOuterAlt(_localctx, 62);
        setState(1035);
        match(WatParser::T__142);
        break;
      }

      case WatParser::T__143: {
        enterOuterAlt(_localctx, 63);
        setState(1036);
        match(WatParser::T__143);
        break;
      }

      case WatParser::T__144: {
        enterOuterAlt(_localctx, 64);
        setState(1037);
        match(WatParser::T__144);
        break;
      }

      case WatParser::T__145: {
        enterOuterAlt(_localctx, 65);
        setState(1038);
        match(WatParser::T__145);
        break;
      }

      case WatParser::T__146: {
        enterOuterAlt(_localctx, 66);
        setState(1039);
        match(WatParser::T__146);
        break;
      }

      case WatParser::T__147: {
        enterOuterAlt(_localctx, 67);
        setState(1040);
        match(WatParser::T__147);
        break;
      }

      case WatParser::T__148: {
        enterOuterAlt(_localctx, 68);
        setState(1041);
        match(WatParser::T__148);
        break;
      }

      case WatParser::T__149: {
        enterOuterAlt(_localctx, 69);
        setState(1042);
        match(WatParser::T__149);
        break;
      }

      case WatParser::T__150: {
        enterOuterAlt(_localctx, 70);
        setState(1043);
        match(WatParser::T__150);
        break;
      }

      case WatParser::T__151: {
        enterOuterAlt(_localctx, 71);
        setState(1044);
        match(WatParser::T__151);
        break;
      }

      case WatParser::T__152: {
        enterOuterAlt(_localctx, 72);
        setState(1045);
        match(WatParser::T__152);
        break;
      }

      case WatParser::T__153: {
        enterOuterAlt(_localctx, 73);
        setState(1046);
        match(WatParser::T__153);
        break;
      }

      case WatParser::T__154: {
        enterOuterAlt(_localctx, 74);
        setState(1047);
        match(WatParser::T__154);
        break;
      }

      case WatParser::T__155: {
        enterOuterAlt(_localctx, 75);
        setState(1048);
        match(WatParser::T__155);
        break;
      }

      case WatParser::T__156: {
        enterOuterAlt(_localctx, 76);
        setState(1049);
        match(WatParser::T__156);
        break;
      }

      case WatParser::T__157: {
        enterOuterAlt(_localctx, 77);
        setState(1050);
        match(WatParser::T__157);
        break;
      }

      case WatParser::T__158: {
        enterOuterAlt(_localctx, 78);
        setState(1051);
        match(WatParser::T__158);
        break;
      }

      case WatParser::T__159: {
        enterOuterAlt(_localctx, 79);
        setState(1052);
        match(WatParser::T__159);
        break;
      }

      case WatParser::T__160: {
        enterOuterAlt(_localctx, 80);
        setState(1053);
        match(WatParser::T__160);
        break;
      }

      case WatParser::T__161: {
        enterOuterAlt(_localctx, 81);
        setState(1054);
        match(WatParser::T__161);
        break;
      }

      case WatParser::T__162: {
        enterOuterAlt(_localctx, 82);
        setState(1055);
        match(WatParser::T__162);
        break;
      }

      case WatParser::T__163: {
        enterOuterAlt(_localctx, 83);
        setState(1056);
        match(WatParser::T__163);
        break;
      }

      case WatParser::T__164: {
        enterOuterAlt(_localctx, 84);
        setState(1057);
        match(WatParser::T__164);
        break;
      }

      case WatParser::T__165: {
        enterOuterAlt(_localctx, 85);
        setState(1058);
        match(WatParser::T__165);
        break;
      }

      case WatParser::T__166: {
        enterOuterAlt(_localctx, 86);
        setState(1059);
        match(WatParser::T__166);
        break;
      }

      case WatParser::T__167: {
        enterOuterAlt(_localctx, 87);
        setState(1060);
        match(WatParser::T__167);
        break;
      }

      case WatParser::T__168: {
        enterOuterAlt(_localctx, 88);
        setState(1061);
        match(WatParser::T__168);
        break;
      }

      case WatParser::T__169: {
        enterOuterAlt(_localctx, 89);
        setState(1062);
        match(WatParser::T__169);
        break;
      }

      case WatParser::T__170: {
        enterOuterAlt(_localctx, 90);
        setState(1063);
        match(WatParser::T__170);
        break;
      }

      case WatParser::T__171: {
        enterOuterAlt(_localctx, 91);
        setState(1064);
        match(WatParser::T__171);
        break;
      }

      case WatParser::T__172: {
        enterOuterAlt(_localctx, 92);
        setState(1065);
        match(WatParser::T__172);
        break;
      }

      case WatParser::T__173: {
        enterOuterAlt(_localctx, 93);
        setState(1066);
        match(WatParser::T__173);
        break;
      }

      case WatParser::T__174: {
        enterOuterAlt(_localctx, 94);
        setState(1067);
        match(WatParser::T__174);
        break;
      }

      case WatParser::T__175: {
        enterOuterAlt(_localctx, 95);
        setState(1068);
        match(WatParser::T__175);
        break;
      }

      case WatParser::T__176: {
        enterOuterAlt(_localctx, 96);
        setState(1069);
        match(WatParser::T__176);
        break;
      }

      case WatParser::T__177: {
        enterOuterAlt(_localctx, 97);
        setState(1070);
        match(WatParser::T__177);
        break;
      }

      case WatParser::T__178: {
        enterOuterAlt(_localctx, 98);
        setState(1071);
        match(WatParser::T__178);
        break;
      }

      case WatParser::T__179: {
        enterOuterAlt(_localctx, 99);
        setState(1072);
        match(WatParser::T__179);
        break;
      }

      case WatParser::T__180: {
        enterOuterAlt(_localctx, 100);
        setState(1073);
        match(WatParser::T__180);
        break;
      }

      case WatParser::T__181: {
        enterOuterAlt(_localctx, 101);
        setState(1074);
        match(WatParser::T__181);
        break;
      }

      case WatParser::T__182: {
        enterOuterAlt(_localctx, 102);
        setState(1075);
        match(WatParser::T__182);
        break;
      }

      case WatParser::T__183: {
        enterOuterAlt(_localctx, 103);
        setState(1076);
        match(WatParser::T__183);
        break;
      }

      case WatParser::T__184: {
        enterOuterAlt(_localctx, 104);
        setState(1077);
        match(WatParser::T__184);
        break;
      }

      case WatParser::T__185: {
        enterOuterAlt(_localctx, 105);
        setState(1078);
        match(WatParser::T__185);
        break;
      }

      case WatParser::T__186: {
        enterOuterAlt(_localctx, 106);
        setState(1079);
        match(WatParser::T__186);
        break;
      }

      case WatParser::T__187: {
        enterOuterAlt(_localctx, 107);
        setState(1080);
        match(WatParser::T__187);
        break;
      }

      case WatParser::T__188: {
        enterOuterAlt(_localctx, 108);
        setState(1081);
        match(WatParser::T__188);
        break;
      }

      case WatParser::T__189: {
        enterOuterAlt(_localctx, 109);
        setState(1082);
        match(WatParser::T__189);
        break;
      }

      case WatParser::T__190: {
        enterOuterAlt(_localctx, 110);
        setState(1083);
        match(WatParser::T__190);
        break;
      }

      case WatParser::T__191: {
        enterOuterAlt(_localctx, 111);
        setState(1084);
        match(WatParser::T__191);
        break;
      }

      case WatParser::T__192: {
        enterOuterAlt(_localctx, 112);
        setState(1085);
        match(WatParser::T__192);
        break;
      }

      case WatParser::T__193: {
        enterOuterAlt(_localctx, 113);
        setState(1086);
        match(WatParser::T__193);
        break;
      }

      case WatParser::T__194: {
        enterOuterAlt(_localctx, 114);
        setState(1087);
        match(WatParser::T__194);
        break;
      }

      case WatParser::T__195: {
        enterOuterAlt(_localctx, 115);
        setState(1088);
        match(WatParser::T__195);
        break;
      }

      case WatParser::T__196: {
        enterOuterAlt(_localctx, 116);
        setState(1089);
        match(WatParser::T__196);
        break;
      }

      case WatParser::T__197: {
        enterOuterAlt(_localctx, 117);
        setState(1090);
        match(WatParser::T__197);
        break;
      }

      case WatParser::T__198: {
        enterOuterAlt(_localctx, 118);
        setState(1091);
        match(WatParser::T__198);
        break;
      }

      case WatParser::T__199: {
        enterOuterAlt(_localctx, 119);
        setState(1092);
        match(WatParser::T__199);
        break;
      }

      case WatParser::T__200: {
        enterOuterAlt(_localctx, 120);
        setState(1093);
        match(WatParser::T__200);
        break;
      }

      case WatParser::T__201: {
        enterOuterAlt(_localctx, 121);
        setState(1094);
        match(WatParser::T__201);
        break;
      }

      case WatParser::T__202: {
        enterOuterAlt(_localctx, 122);
        setState(1095);
        match(WatParser::T__202);
        break;
      }

      case WatParser::T__203: {
        enterOuterAlt(_localctx, 123);
        setState(1096);
        match(WatParser::T__203);
        break;
      }

      case WatParser::T__204: {
        enterOuterAlt(_localctx, 124);
        setState(1097);
        match(WatParser::T__204);
        break;
      }

      case WatParser::T__205: {
        enterOuterAlt(_localctx, 125);
        setState(1098);
        match(WatParser::T__205);
        break;
      }

      case WatParser::T__206: {
        enterOuterAlt(_localctx, 126);
        setState(1099);
        match(WatParser::T__206);
        break;
      }

      case WatParser::T__207: {
        enterOuterAlt(_localctx, 127);
        setState(1100);
        match(WatParser::T__207);
        break;
      }

      case WatParser::T__208: {
        enterOuterAlt(_localctx, 128);
        setState(1101);
        match(WatParser::T__208);
        break;
      }

      case WatParser::T__209: {
        enterOuterAlt(_localctx, 129);
        setState(1102);
        match(WatParser::T__209);
        break;
      }

      case WatParser::T__210: {
        enterOuterAlt(_localctx, 130);
        setState(1103);
        match(WatParser::T__210);
        break;
      }

      case WatParser::T__211: {
        enterOuterAlt(_localctx, 131);
        setState(1104);
        match(WatParser::T__211);
        break;
      }

      case WatParser::T__212: {
        enterOuterAlt(_localctx, 132);
        setState(1105);
        match(WatParser::T__212);
        break;
      }

      case WatParser::T__213: {
        enterOuterAlt(_localctx, 133);
        setState(1106);
        match(WatParser::T__213);
        break;
      }

      case WatParser::T__214: {
        enterOuterAlt(_localctx, 134);
        setState(1107);
        match(WatParser::T__214);
        break;
      }

      case WatParser::T__215: {
        enterOuterAlt(_localctx, 135);
        setState(1108);
        match(WatParser::T__215);
        break;
      }

      case WatParser::T__216: {
        enterOuterAlt(_localctx, 136);
        setState(1109);
        match(WatParser::T__216);
        break;
      }

      case WatParser::T__217: {
        enterOuterAlt(_localctx, 137);
        setState(1110);
        match(WatParser::T__217);
        break;
      }

      case WatParser::T__218: {
        enterOuterAlt(_localctx, 138);
        setState(1111);
        match(WatParser::T__218);
        break;
      }

      case WatParser::T__219: {
        enterOuterAlt(_localctx, 139);
        setState(1112);
        match(WatParser::T__219);
        break;
      }

      case WatParser::T__220: {
        enterOuterAlt(_localctx, 140);
        setState(1113);
        match(WatParser::T__220);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

void WatParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  watParserInitialize();
#else
  ::antlr4::internal::call_once(watParserOnceFlag, watParserInitialize);
#endif
}
