/** generated by ParGen **/
#include "Parser.hpp"

#include <stack>
#include <list>
#include <variant>
#include <vector>
#include <algorithm>
#include <array>

namespace WasmVM {

using namespace Tokens;

Parser::Parser(Lexer& lexer) : lexer(lexer) {}

std::pair<Parser::term_t, Parser::token_t> Parser::fetch(){
    if(!buffer.empty()){
        auto token = buffer.front();
        buffer.pop_front();
        return token;
    }
    Token res = lexer.get();
    return {res.index() + 1, res};
}

static WasmModule action_1(Parser& _this, std::vector<Position> _pos, WasmModule _op0){
    _this.clear_locals();
    return _op0;
}
static WasmModule action_2(Parser& _this, std::vector<Position> _pos, WasmModule _op0, WasmImport _op1){
    _op0.imports.emplace_back(_op1);
    _this.clear_locals();
    return _op0;
}
static WasmModule action_3(Parser& _this, std::vector<Position> _pos, WasmModule _op0, std::variant<TableType, WasmImport, std::pair<TableType, WasmElem>> _op1){
    std::visit(overloaded {
        [&](std::pair<TableType, WasmElem>& table_pair){
            _op0.tables.emplace_back(table_pair.first);
            _op0.elems.emplace_back(table_pair.second);
        },
        [&](TableType& table){
            _op0.tables.emplace_back(table);
        },
        [&](WasmImport& table){
            _op0.imports.emplace_back(table);
        }
    }, _op1);
    return _op0;
}
static WasmModule action_4(Parser& _this, std::vector<Position> _pos, WasmModule _op0, std::variant<Limits, WasmImport, std::pair<Limits, WasmData>> _op1){
    std::visit(overloaded {
        [&](std::pair<Limits, WasmData>& mem_pair){
            _op0.mems.emplace_back(mem_pair.first);
            _op0.datas.emplace_back(mem_pair.second);
        },
        [&](Limits& memory){
            _op0.mems.emplace_back(memory);
        },
        [&](WasmImport& memory){
            _op0.imports.emplace_back(memory);
        }
    }, _op1);
    return _op0;
}
static WasmModule action_5(Parser& _this, std::vector<Position> _pos, WasmModule _op0, std::variant<WasmGlobal, WasmImport> _op1){
    if(std::holds_alternative<WasmImport>(_op1)){
        _op0.imports.emplace_back(std::get<WasmImport>(_op1));
    }else{
        _op0.globals.emplace_back(std::get<WasmGlobal>(_op1));
    }
    return _op0;
}
static WasmModule action_6(Parser& _this, std::vector<Position> _pos, WasmModule _op0, WasmExport _op1){
    _this.exports[_op1.name] = _op1;
    return _op0;
}
static WasmModule action_7(Parser& _this, std::vector<Position> _pos, WasmModule _op0, std::variant<WasmFunc, WasmImport> _op1){
    if(std::holds_alternative<WasmImport>(_op1)){
        _op0.imports.emplace_back(std::get<WasmImport>(_op1));
    }else{
        _op0.funcs.emplace_back(std::get<WasmFunc>(_op1));
    }
    _this.clear_locals();
    return _op0;
}
static WasmModule action_8(Parser& _this, std::vector<Position> _pos, WasmModule _op0, Tokens::ParenL _op1, Tokens::Start _op2, u32_t _op3, Tokens::ParenR _op4){
    if(_op0.start.has_value()){
        throw Exception::Parse("multiple start functions", {_pos[1].line, _pos[1].column});
    }
    _op0.start = _op3;
    return _op0;
}
static WasmModule action_9(Parser& _this, std::vector<Position> _pos, WasmModule _op0, WasmElem _op1){
    _op0.elems.emplace_back(_op1);
    return _op0;
}
static WasmModule action_10(Parser& _this, std::vector<Position> _pos, WasmModule _op0, WasmData _op1){
    _op0.datas.emplace_back(_op1);
    return _op0;
}
static WasmModule action_11(Parser& _this, std::vector<Position> _pos){
    return WasmModule();
}
static WasmModule action_12(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Module _op1, Tokens::Id _op2, WasmModule _op3, Tokens::ParenR _op4){
    for(auto& functype : _this.types){
        _op3.types.emplace_back(functype.first);
    }
    for(auto& exports : _this.exports){
        _op3.exports.emplace_back(exports.second);
    }
    _this.reset();
    return _op3;
}
static WasmModule action_13(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Module _op1, WasmModule _op2, Tokens::ParenR _op3){
    for(auto& functype : _this.types){
        _op2.types.emplace_back(functype.first);
    }
    for(auto& exports : _this.exports){
        _op2.exports.emplace_back(exports.second);
    }
    _this.reset();
    return _op2;
}
static WasmModule action_14(Parser& _this, std::vector<Position> _pos, WasmModule _op0){
    for(auto& functype : _this.types){
        _op0.types.emplace_back(functype.first);
    }
    for(auto& exports : _this.exports){
        _op0.exports.emplace_back(exports.second);
    }
    _this.reset();
    return _op0;
}
static WasmModule action_15(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::ParenR _op1){
    _this.reset();
    return WasmModule();
}
static WasmModule action_16(Parser& _this, std::vector<Position> _pos){
    _this.reset();
    return WasmModule();
}
static ValueType action_17(Parser& _this, std::vector<Position> _pos, Tokens::NumType _op0){
    if(_op0.value == "i32"){
        return ValueType::i32;
    }else if(_op0.value == "i64"){
        return ValueType::i64;
    }else if(_op0.value == "f32"){
        return ValueType::f32;
    }else{
        return ValueType::f64;
    }
}
static ValueType action_18(Parser& _this, std::vector<Position> _pos, Tokens::Funcref _op0){
    return ValueType::funcref;
}
static ValueType action_19(Parser& _this, std::vector<Position> _pos, Tokens::Externref _op0){
    return ValueType::externref;
}
static RefType action_20(Parser& _this, std::vector<Position> _pos, Tokens::Funcref _op0){
    return RefType::funcref;
}
static RefType action_21(Parser& _this, std::vector<Position> _pos, Tokens::Externref _op0){
    return RefType::externref;
}
static std::vector<ValueType> action_22(Parser& _this, std::vector<Position> _pos, std::vector<ValueType> _op0, ValueType _op1){
    _op0.emplace_back(_op1);
    return _op0;
}
static std::vector<ValueType> action_23(Parser& _this, std::vector<Position> _pos){
    return std::vector<ValueType>();
}
static std::vector<ValueType> action_24(Parser& _this, std::vector<Position> _pos, std::vector<ValueType> _op0, Tokens::ParenL _op1, Tokens::Param _op2, Tokens::Id _op3, ValueType _op4, Tokens::ParenR _op5){
    if(_this.local_indices.contains(_op3.value)){
        throw Exception::Parse("parameter ID '" + _op3.value + "' is duplicated", {_pos[3].line, _pos[3].column});
    }
    _this.local_indices[_op3.value] = _this.local_count;
    _this.local_count += 1;
    _op0.emplace_back(_op4);
    return _op0;
}
static std::vector<ValueType> action_25(Parser& _this, std::vector<Position> _pos, std::vector<ValueType> _op0, Tokens::ParenL _op1, Tokens::Param _op2, std::vector<ValueType> _op3, Tokens::ParenR _op4){
    _op0.insert(_op0.end(), _op3.begin(), _op3.end());
    _this.local_count += _op3.size();
    return _op0;
}
static std::vector<ValueType> action_26(Parser& _this, std::vector<Position> _pos){
    return std::vector<ValueType>();
}
static std::vector<ValueType> action_27(Parser& _this, std::vector<Position> _pos, std::vector<ValueType> _op0, Tokens::ParenL _op1, Tokens::Result _op2, std::vector<ValueType> _op3, Tokens::ParenR _op4){
    _op0.insert(_op0.end(), _op3.begin(), _op3.end());
    return _op0;
}
static std::vector<ValueType> action_28(Parser& _this, std::vector<Position> _pos){
    return std::vector<ValueType>();
}
static FuncType action_29(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Func _op1, std::vector<ValueType> _op2, std::vector<ValueType> _op3, Tokens::ParenR _op4){
    return FuncType {.params = _op2, .results = _op3};
}
static RefType action_30(Parser& _this, std::vector<Position> _pos, Tokens::Func _op0){
    return RefType::funcref;
}
static RefType action_31(Parser& _this, std::vector<Position> _pos, Tokens::Extern _op0){
    return RefType::externref;
}
static std::string action_32(Parser& _this, std::vector<Position> _pos, Tokens::Id _op0){
    return _op0.value;
}
static std::string action_33(Parser& _this, std::vector<Position> _pos){
    return "";
}
static void action_34(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Type _op1, std::string _op2, FuncType _op3, Tokens::ParenR _op4){
    if(!_op2.empty()){
        if(_this.type_indices.contains(_op2)){
            throw Exception::Parse("type ID '" + _op2 + "' is duplicated", {_pos[2].line, _pos[2].column});
        }
        _this.type_indices[_op2] = _this.types.size();
    }
    _this.types.emplace_back(_op3, _this.local_indices);
}
static u32_t action_35(Parser& _this, std::vector<Position> _pos, Tokens::Integer _op0){
    try{
        return std::stoul(_op0.value, 0);
    }catch(std::invalid_argument){
        throw Exception::Parse("invalid u32 integer '" + _op0.value + "'", {_pos[0].line, _pos[0].column});
    }
}
static u64_t action_36(Parser& _this, std::vector<Position> _pos, Tokens::Integer _op0){
    try{
        return std::stoull(_op0.value, 0);
    }catch(std::invalid_argument){
        throw Exception::Parse("invalid u64 integer '" + _op0.value + "'", {_pos[0].line, _pos[0].column});
    }
}
static i32_t action_37(Parser& _this, std::vector<Position> _pos, Tokens::Integer _op0){
    try{
        return std::stol(_op0.value, 0);
    }catch(std::invalid_argument){
        throw Exception::Parse("invalid i32 integer '" + _op0.value + "'", {_pos[0].line, _pos[0].column});
    }
}
static i64_t action_38(Parser& _this, std::vector<Position> _pos, Tokens::Integer _op0){
    try{
        return std::stoll(_op0.value, 0);
    }catch(std::invalid_argument){
        throw Exception::Parse("invalid i64 integer '" + _op0.value + "'", {_pos[0].line, _pos[0].column});
    }
}
static f32_t action_39(Parser& _this, std::vector<Position> _pos, Tokens::Float _op0){
    try{
        auto nanpos = _op0.value.find("nan:0x");
        if(nanpos != std::string::npos){
            u32_t nan_imm = 0x7f800000UL + std::stoul(_op0.value.substr(nanpos + 4), nullptr, 16);
            if(_op0.value.starts_with("-")){
                nan_imm += 0x80000000UL;
            }
            return *reinterpret_cast<f32_t*>(&nan_imm);
        }else{
            return std::stof(_op0.value);
        }
    }catch(std::invalid_argument){
        throw Exception::Parse("invalid f32 number '" + _op0.value + "'", {_pos[0].line, _pos[0].column});
    }
}
static f64_t action_40(Parser& _this, std::vector<Position> _pos, Tokens::Float _op0){
    try{
        auto nanpos = _op0.value.find("nan:0x");
        if(nanpos != std::string::npos){
            u64_t nan_imm = 0x7ff0000000000000ULL + std::stoull(_op0.value.substr(nanpos + 4), nullptr, 16);
            if(_op0.value.starts_with("-")){
                nan_imm += 0x8000000000000000ULL;
            }
            return *reinterpret_cast<f64_t*>(&nan_imm);
        }else{
            return std::stod(_op0.value);
        }
    }catch(std::invalid_argument){
        throw Exception::Parse("invalid f64 number '" + _op0.value + "'", {_pos[0].line, _pos[0].column});
    }
}
static u32_t action_41(Parser& _this, std::vector<Position> _pos, u32_t _op0){
    return _op0;
}
static u32_t action_42(Parser& _this, std::vector<Position> _pos, Tokens::Id _op0){
    if(!_this.type_indices.contains(_op0.value)){
        throw Exception::Parse("type ID '" + _op0.value + "' not found", {_pos[0].line, _pos[0].column});
    }
    return _this.type_indices[_op0.value];
}
static u32_t action_43(Parser& _this, std::vector<Position> _pos, u32_t _op0){
    return _op0;
}
static u32_t action_44(Parser& _this, std::vector<Position> _pos, Tokens::Id _op0){
    if(!_this.label_indices.contains(_op0.value)){
        throw Exception::Parse("label ID '" + _op0.value + "' not found", {_pos[0].line, _pos[0].column});
    }
    return _this.label_indices[_op0.value];
}
static std::vector<u32_t> action_45(Parser& _this, std::vector<Position> _pos, std::vector<u32_t> _op0, u32_t _op1){
    _op0.emplace_back(_op1);
    return _op0;
}
static std::vector<u32_t> action_46(Parser& _this, std::vector<Position> _pos, u32_t _op0){
    return std::vector<u32_t> {_op0};
}
static u32_t action_47(Parser& _this, std::vector<Position> _pos, u32_t _op0){
    return _op0;
}
static u32_t action_48(Parser& _this, std::vector<Position> _pos, Tokens::Id _op0){
    index_t index = _this.func_indices.get(_op0.value);
    if(index == -1){
        throw Exception::Parse("function ID '" + _op0.value + "' not found", {_pos[0].line, _pos[0].column});
    }
    return index;
}
static u32_t action_49(Parser& _this, std::vector<Position> _pos, u32_t _op0){
    return _op0;
}
static u32_t action_50(Parser& _this, std::vector<Position> _pos, Tokens::Id _op0){
    index_t index = _this.table_indices.get(_op0.value);
    if(index == -1){
        throw Exception::Parse("table ID '" + _op0.value + "' not found", {_pos[0].line, _pos[0].column});
    }
    return index;
}
static u32_t action_51(Parser& _this, std::vector<Position> _pos, u32_t _op0){
    return _op0;
}
static u32_t action_52(Parser& _this, std::vector<Position> _pos, Tokens::Id _op0){
    index_t index = _this.mem_indices.get(_op0.value);
    if(index == -1){
        throw Exception::Parse("memory ID '" + _op0.value + "' not found", {_pos[0].line, _pos[0].column});
    }
    return index;
}
static u32_t action_53(Parser& _this, std::vector<Position> _pos, u32_t _op0){
    return _op0;
}
static u32_t action_54(Parser& _this, std::vector<Position> _pos, Tokens::Id _op0){
    index_t index = _this.global_indices.get(_op0.value);
    if(index == -1){
        throw Exception::Parse("global ID '" + _op0.value + "' not found", {_pos[0].line, _pos[0].column});
    }
    return index;
}
static u32_t action_55(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Type _op1, u32_t _op2, Tokens::ParenR _op3, std::vector<ValueType> _op4, std::vector<ValueType> _op5){
    if(_op4.empty() && _op5.empty()){
        return _op2;
    }
    std::pair<FuncType, std::map<std::string, index_t>> derived = _this.types[_op2];
    for(auto& id_pair : _this.local_indices){
        if(derived.second.contains(id_pair.first)){
            throw Exception::Parse("parameter ID '" + id_pair.first + "' is duplicated", {_pos[4].line, _pos[4].column});
        }
        derived.second[id_pair.first] = id_pair.second + derived.first.params.size();
    }
    derived.first.params.insert(derived.first.params.end(), _op4.begin(), _op4.end());
    derived.first.results.insert(derived.first.results.end(), _op5.begin(), _op5.end());
    index_t index = _this.types.size();
    _this.types.emplace_back(derived);
    return index;
}
static u32_t action_56(Parser& _this, std::vector<Position> _pos, std::vector<ValueType> _op0, std::vector<ValueType> _op1){
    index_t index = _this.types.size();
    _this.types.emplace_back(FuncType {.params = _op0, .results = _op1}, _this.local_indices);
    return index;
}
static u32_t action_57(Parser& _this, std::vector<Position> _pos){
    index_t index = _this.types.size();
    _this.types.emplace_back(FuncType(), std::map<std::string, index_t>());
    return index;
}
static Limits action_58(Parser& _this, std::vector<Position> _pos, u64_t _op0){
    return Limits {.min = _op0};
}
static Limits action_59(Parser& _this, std::vector<Position> _pos, u64_t _op0, u64_t _op1){
    return Limits {.min = _op0, .max = _op1};
}
static TableType action_60(Parser& _this, std::vector<Position> _pos, Limits _op0, RefType _op1){
    return TableType {.limits = _op0, .reftype = _op1};
}
static GlobalType action_61(Parser& _this, std::vector<Position> _pos, ValueType _op0){
    return GlobalType {.mut = GlobalType::constant, .type = _op0};
}
static GlobalType action_62(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Mut _op1, ValueType _op2, Tokens::ParenR _op3){
    return GlobalType {.mut = GlobalType::variable, .type = _op2};
}
static ConstInstr action_63(Parser& _this, std::vector<Position> _pos, Tokens::Ref_null _op0, RefType _op1){
    return Instr::Ref_null(_op1);
}
static ConstInstr action_64(Parser& _this, std::vector<Position> _pos, Tokens::Ref_func _op0, u32_t _op1){
    return Instr::Ref_func(_op1);
}
static ConstInstr action_65(Parser& _this, std::vector<Position> _pos, Tokens::I32_const _op0, i32_t _op1){
    return Instr::I32_const(_op1);
}
static ConstInstr action_66(Parser& _this, std::vector<Position> _pos, Tokens::I64_const _op0, i64_t _op1){
    return Instr::I64_const(_op1);
}
static ConstInstr action_67(Parser& _this, std::vector<Position> _pos, Tokens::F32_const _op0, f32_t _op1){
    return Instr::F32_const(_op1);
}
static ConstInstr action_68(Parser& _this, std::vector<Position> _pos, Tokens::F64_const _op0, f64_t _op1){
    return Instr::F64_const(_op1);
}
static ConstInstr action_69(Parser& _this, std::vector<Position> _pos, Tokens::VariableInstr _op0, u32_t _op1){
    if(_op0.value != VariableInstr::GlobalGet){
        throw Exception::Parse("invalid expr in global init ", {_pos[0].line, _pos[0].column});
    }
    return Instr::Global_get(_op1);
}
static WasmImport action_70(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Import _op1, Tokens::String _op2, Tokens::String _op3, std::variant<index_t, TableType, MemType, GlobalType> _op4, Tokens::ParenR _op5){
    return WasmImport {.module = _op2.value, .name = _op3.value, .desc = _op4};
}
static std::variant<index_t, TableType, MemType, GlobalType> action_71(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Func _op1, std::string _op2, u32_t _op3, Tokens::ParenR _op4){
    if(!_op2.empty()){
        if(_this.func_indices.contains(_op2)){
            throw Exception::Parse("function ID '" + _op2 + "' is duplicated", {_pos[2].line, _pos[2].column});
        }
        _this.func_indices.insert(_op2, Parser::IndexMap::Import);
    }else{
        _this.func_indices.insert(Parser::IndexMap::Import);
    }
    return _op3;
}
static std::variant<index_t, TableType, MemType, GlobalType> action_72(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Table _op1, std::string _op2, TableType _op3, Tokens::ParenR _op4){
    if(!_op2.empty()){
        if(_this.table_indices.contains(_op2)){
            throw Exception::Parse("table ID '" + _op2 + "' is duplicated", {_pos[2].line, _pos[2].column});
        }
        _this.table_indices.insert(_op2, Parser::IndexMap::Import);
    }else{
        _this.table_indices.insert(Parser::IndexMap::Import);
    }
    return _op3;
}
static std::variant<index_t, TableType, MemType, GlobalType> action_73(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Memory _op1, std::string _op2, Limits _op3, Tokens::ParenR _op4){
    if(!_op2.empty()){
        if(_this.mem_indices.contains(_op2)){
            throw Exception::Parse("memory ID '" + _op2 + "' is duplicated", {_pos[2].line, _pos[2].column});
        }
        _this.mem_indices.insert(_op2, Parser::IndexMap::Import);
    }else{
        _this.mem_indices.insert(Parser::IndexMap::Import);
    }
    return _op3;
}
static std::variant<index_t, TableType, MemType, GlobalType> action_74(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Global _op1, std::string _op2, GlobalType _op3, Tokens::ParenR _op4){
    if(!_op2.empty()){
        if(_this.global_indices.contains(_op2)){
            throw Exception::Parse("global ID '" + _op2 + "' is duplicated", {_pos[2].line, _pos[2].column});
        }
        _this.global_indices.insert(_op2, Parser::IndexMap::Import);
    }else{
        _this.global_indices.insert(Parser::IndexMap::Import);
    }
    return _op3;
}
static WasmExport action_75(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Export _op1, Tokens::String _op2, Tokens::ParenL _op3, Tokens::Func _op4, u32_t _op5, Tokens::ParenR _op6, Tokens::ParenR _op7){
    if(_this.exports.contains(_op2.value)){
        throw Exception::Parse("export name '" + _op2.value + "' is duplicated", {_pos[2].line, _pos[2].column});
    }
    return WasmExport {.name = _op2.value, .desc = WasmExport::DescType::func, .index = _op5};
}
static WasmExport action_76(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Export _op1, Tokens::String _op2, Tokens::ParenL _op3, Tokens::Table _op4, u32_t _op5, Tokens::ParenR _op6, Tokens::ParenR _op7){
    if(_this.exports.contains(_op2.value)){
        throw Exception::Parse("export name '" + _op2.value + "' is duplicated", {_pos[2].line, _pos[2].column});
    }
    return WasmExport {.name = _op2.value, .desc = WasmExport::DescType::table, .index = _op5};
}
static WasmExport action_77(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Export _op1, Tokens::String _op2, Tokens::ParenL _op3, Tokens::Memory _op4, u32_t _op5, Tokens::ParenR _op6, Tokens::ParenR _op7){
    if(_this.exports.contains(_op2.value)){
        throw Exception::Parse("export name '" + _op2.value + "' is duplicated", {_pos[2].line, _pos[2].column});
    }
    return WasmExport {.name = _op2.value, .desc = WasmExport::DescType::mem, .index = _op5};
}
static WasmExport action_78(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Export _op1, Tokens::String _op2, Tokens::ParenL _op3, Tokens::Global _op4, u32_t _op5, Tokens::ParenR _op6, Tokens::ParenR _op7){
    if(_this.exports.contains(_op2.value)){
        throw Exception::Parse("export name '" + _op2.value + "' is duplicated", {_pos[2].line, _pos[2].column});
    }
    return WasmExport {.name = _op2.value, .desc = WasmExport::DescType::global, .index = _op5};
}
static std::optional<std::pair<std::string, std::string>> action_79(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Import _op1, Tokens::String _op2, Tokens::String _op3, Tokens::ParenR _op4){
    return std::pair<std::string, std::string> {_op2.value, _op3.value};
}
static std::optional<std::pair<std::string, std::string>> action_80(Parser& _this, std::vector<Position> _pos){
    return std::nullopt;
}
static std::vector<std::string> action_81(Parser& _this, std::vector<Position> _pos, std::vector<std::string> _op0, Tokens::ParenL _op1, Tokens::Export _op2, Tokens::String _op3, Tokens::ParenR _op4){
    if(_this.exports.contains(_op3.value)){
        throw Exception::Parse("export name '" + _op3.value + "' is duplicated", {_pos[3].line, _pos[3].column});
    }
    _op0.emplace_back(_op3.value);
    return _op0;
}
static std::vector<std::string> action_82(Parser& _this, std::vector<Position> _pos){
    return std::vector<std::string>();
}
static std::list<ValueType> action_83(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Local _op1, Tokens::Id _op2, ValueType _op3, Tokens::ParenR _op4, std::list<ValueType> _op5){
    if(_this.local_indices.contains(_op2.value)){
        throw Exception::Parse("local name '" + _op2.value + "' is duplicated", {_pos[2].line, _pos[2].column});
    }
    _this.local_indices[_op2.value] = _this.local_count;
    _this.local_count += 1;
    _op5.emplace_front(_op3);
    return _op5;
}
static std::list<ValueType> action_84(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Local _op1, std::vector<ValueType> _op2, Tokens::ParenR _op3, std::list<ValueType> _op4){
    _op4.insert(_op4.begin(), _op2.begin(), _op2.end());
    _this.local_count += _op2.size();
    return _op4;
}
static std::list<ValueType> action_85(Parser& _this, std::vector<Position> _pos){
    return std::list<ValueType>();
}
static std::vector<WasmInstr> action_86(Parser& _this, std::vector<Position> _pos, std::vector<WasmInstr> _op0, WasmInstr _op1){
    _op0.emplace_back(_op1);
    return _op0;
}
static std::vector<WasmInstr> action_87(Parser& _this, std::vector<Position> _pos){
    return std::vector<WasmInstr>();
}
static std::variant<WasmFunc, WasmImport> action_88(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Func _op1, std::string _op2, std::vector<std::string> _op3, u32_t _op4, std::list<ValueType> _op5, std::vector<WasmInstr> _op6, Tokens::ParenR _op7){
    index_t index = 0;
    if(_op2.empty()){
        index = _this.func_indices.insert(Parser::IndexMap::Normal);
    }else{
        if(_this.func_indices.contains(_op2)){
            throw Exception::Parse("function ID '" + _op2 + "' is duplicated", {_pos[2].line, _pos[2].column});
        }
        index = _this.func_indices.insert(_op2, Parser::IndexMap::Normal);
    }
    for(std::string export_name : _op3){
        _this.exports[export_name] = WasmExport {.name = export_name, .desc = WasmExport::DescType::func, .index = index};
    }
    _op6.emplace_back(Instr::End());
    return WasmFunc {.typeidx = _op4, .locals = std::vector<ValueType>(_op5.begin(), _op5.end()), .body = _op6};
}
static std::variant<WasmFunc, WasmImport> action_89(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Func _op1, std::string _op2, std::vector<std::string> _op3, Tokens::ParenL _op4, Tokens::Import _op5, Tokens::String _op6, Tokens::String _op7, Tokens::ParenR _op8, u32_t _op9, Tokens::ParenR _op10){
    index_t index = 0;
    if(_op2.empty()){
        index = _this.func_indices.insert(Parser::IndexMap::Import);
    }else{
        if(_this.func_indices.contains(_op2)){
            throw Exception::Parse("function ID '" + _op2 + "' is duplicated", {_pos[2].line, _pos[2].column});
        }
        index = _this.func_indices.insert(_op2, Parser::IndexMap::Import);
    }
    for(std::string export_name : _op3){
        _this.exports[export_name] = WasmExport {.name = export_name, .desc = WasmExport::DescType::func, .index = index};
    }
    return WasmImport {.module = _op6.value, .name = _op7.value, .desc = _op9};
}
static std::variant<TableType, WasmImport, std::pair<TableType, WasmElem>> action_90(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Table _op1, std::string _op2, std::vector<std::string> _op3, std::optional<std::pair<std::string, std::string>> _op4, TableType _op5, Tokens::ParenR _op6){
    if(_op2.empty()){
        if(_op4.has_value()){
            index_t index = _this.table_indices.insert(Parser::IndexMap::Import);
            for(std::string export_name : _op3){
                _this.exports[export_name] = WasmExport {.name = export_name, .desc = WasmExport::DescType::table, .index = index};
            }
            return WasmImport {.module = _op4->first, .name = _op4->second, .desc = _op5};
        }else{
            index_t index = _this.table_indices.insert(Parser::IndexMap::Normal);
            for(std::string export_name : _op3){
                _this.exports[export_name] = WasmExport {.name = export_name, .desc = WasmExport::DescType::table, .index = index};
            }
            return _op5;
        }
    }else{
        if(_this.table_indices.contains(_op2)){
            throw Exception::Parse("table ID '" + _op2 + "' is duplicated", {_pos[2].line, _pos[2].column});
        }
        if(_op4.has_value()){
            index_t index = _this.table_indices.insert(_op2, Parser::IndexMap::Import);
            for(std::string export_name : _op3){
                _this.exports[export_name] = WasmExport {.name = export_name, .desc = WasmExport::DescType::table, .index = index};
            }
            return WasmImport {.module = _op4->first, .name = _op4->second, .desc = _op5};
        }else{
            index_t index = _this.table_indices.insert(_op2, Parser::IndexMap::Normal);
            for(std::string export_name : _op3){
                _this.exports[export_name] = WasmExport {.name = export_name, .desc = WasmExport::DescType::table, .index = index};
            }
            return _op5;
        }
    }
}
static std::variant<TableType, WasmImport, std::pair<TableType, WasmElem>> action_91(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Table _op1, std::string _op2, std::vector<std::string> _op3, RefType _op4, Tokens::ParenL _op5, Tokens::Elem _op6, std::vector<ConstInstr> _op7, Tokens::ParenR _op8, Tokens::ParenR _op9){
    index_t index = 0;
    if(_op2.empty()){
        index = _this.table_indices.insert(Parser::IndexMap::Normal);
    }else{
        if(_this.table_indices.contains(_op2)){
            throw Exception::Parse("table ID '" + _op2 + "' is duplicated", {_pos[2].line, _pos[2].column});
        }
        index = _this.table_indices.insert(_op2, Parser::IndexMap::Normal);
    }
    for(std::string export_name : _op3){
        _this.exports[export_name] = WasmExport {.name = export_name, .desc = WasmExport::DescType::table, .index = index};
    }
    return std::pair<TableType, WasmElem>(
        TableType {.limits = Limits {.min = _op7.size(), .max = _op7.size()}, .reftype = _op4},
        WasmElem {.type = _op4, .elemlist = _op7, .mode = WasmElem::ElemMode {
            .type = WasmElem::ElemMode::Mode::active,
            .tableidx = index,
            .offset = Instr::I32_const()
        }}
    );
}
static std::variant<TableType, WasmImport, std::pair<TableType, WasmElem>> action_92(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Table _op1, std::string _op2, std::vector<std::string> _op3, RefType _op4, Tokens::ParenL _op5, Tokens::Elem _op6, std::vector<ConstInstr> _op7, Tokens::ParenR _op8, Tokens::ParenR _op9){
    index_t index = 0;
    if(_op2.empty()){
        index = _this.table_indices.insert(Parser::IndexMap::Normal);
    }else{
        if(_this.table_indices.contains(_op2)){
            throw Exception::Parse("table ID '" + _op2 + "' is duplicated", {_pos[2].line, _pos[2].column});
        }
        index = _this.table_indices.insert(_op2, Parser::IndexMap::Normal);
    }
    for(std::string export_name : _op3){
        _this.exports[export_name] = WasmExport {.name = export_name, .desc = WasmExport::DescType::table, .index = index};
    }
    return std::pair<TableType, WasmElem>(
        TableType {.limits = Limits {.min = _op7.size(), .max = _op7.size()}, .reftype = _op4},
        WasmElem {.type = RefType::funcref, .elemlist = _op7, .mode = WasmElem::ElemMode {
            .type = WasmElem::ElemMode::Mode::active,
            .tableidx = index,
            .offset = Instr::I32_const()
        }}
    );
}
static std::variant<Limits, WasmImport, std::pair<Limits, WasmData>> action_93(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Memory _op1, std::string _op2, std::vector<std::string> _op3, std::optional<std::pair<std::string, std::string>> _op4, Limits _op5, Tokens::ParenR _op6){
    if(_op2.empty()){
        if(_op4.has_value()){
            index_t index = _this.mem_indices.insert(Parser::IndexMap::Import);
            for(std::string export_name : _op3){
                _this.exports[export_name] = WasmExport {.name = export_name, .desc = WasmExport::DescType::mem, .index = index};
            }
            return WasmImport {.module = _op4->first, .name = _op4->second, .desc = _op5};
        }else{
            index_t index = _this.mem_indices.insert(Parser::IndexMap::Normal);
            for(std::string export_name : _op3){
                _this.exports[export_name] = WasmExport {.name = export_name, .desc = WasmExport::DescType::mem, .index = index};
            }
            return _op5;
        }
    }else{
        if(_this.mem_indices.contains(_op2)){
            throw Exception::Parse("memory ID '" + _op2 + "' is duplicated", {_pos[2].line, _pos[2].column});
        }
        if(_op4.has_value()){
            index_t index = _this.mem_indices.insert(_op2, Parser::IndexMap::Import);
            for(std::string export_name : _op3){
                _this.exports[export_name] = WasmExport {.name = export_name, .desc = WasmExport::DescType::mem, .index = index};
            }
            return WasmImport {.module = _op4->first, .name = _op4->second, .desc = _op5};
        }else{
            index_t index = _this.mem_indices.insert(_op2, Parser::IndexMap::Normal);
            for(std::string export_name : _op3){
                _this.exports[export_name] = WasmExport {.name = export_name, .desc = WasmExport::DescType::mem, .index = index};
            }
            return _op5;
        }
    }
}
static std::variant<Limits, WasmImport, std::pair<Limits, WasmData>> action_94(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Memory _op1, std::string _op2, std::vector<std::string> _op3, Tokens::ParenL _op4, Tokens::Data _op5, std::vector<byte_t> _op6, Tokens::ParenR _op7, Tokens::ParenR _op8){
    index_t index = 0;
    if(_op2.empty()){
        index = _this.mem_indices.insert(Parser::IndexMap::Normal);
    }else{
        if(_this.mem_indices.contains(_op2)){
            throw Exception::Parse("memory ID '" + _op2 + "' is duplicated", {_pos[2].line, _pos[2].column});
        }
        index = _this.mem_indices.insert(_op2, Parser::IndexMap::Normal);
    }
    for(std::string export_name : _op3){
        _this.exports[export_name] = WasmExport {.name = export_name, .desc = WasmExport::DescType::mem, .index = index};
    }
    offset_t page_num = (_op6.size() + (page_size - 1)) / page_size;
    return std::pair<Limits, WasmData>(
        Limits {.min = page_num, .max = page_num},
        WasmData {.init = _op6, .mode = WasmData::DataMode {
            .type = WasmData::DataMode::Mode::active,
            .memidx = index,
            .offset = Instr::I32_const()
        }}
    );
}
static std::variant<WasmGlobal, WasmImport> action_95(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Global _op1, std::string _op2, std::vector<std::string> _op3, GlobalType _op4, ConstInstr _op5, Tokens::ParenR _op6){
    index_t index = 0;
    if(_op2.empty()){
        index = _this.global_indices.insert(Parser::IndexMap::Normal);
    }else{
        if(_this.global_indices.contains(_op2)){
            throw Exception::Parse("global ID '" + _op2 + "' is duplicated", {_pos[2].line, _pos[2].column});
        }
        index = _this.global_indices.insert(_op2, Parser::IndexMap::Normal);
    }
    for(std::string export_name : _op3){
        _this.exports[export_name] = WasmExport {.name = export_name, .desc = WasmExport::DescType::global, .index = index};
    }
    return WasmGlobal {.type = _op4, .init = _op5};
}
static std::variant<WasmGlobal, WasmImport> action_96(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Global _op1, std::string _op2, std::vector<std::string> _op3, Tokens::ParenL _op4, Tokens::Import _op5, Tokens::String _op6, Tokens::String _op7, Tokens::ParenR _op8, GlobalType _op9, Tokens::ParenR _op10){
    index_t index = 0;
    if(_op2.empty()){
        index = _this.global_indices.insert(Parser::IndexMap::Import);
    }else{
        if(_this.global_indices.contains(_op2)){
            throw Exception::Parse("global ID '" + _op2 + "' is duplicated", {_pos[2].line, _pos[2].column});
        }
        index = _this.global_indices.insert(_op2, Parser::IndexMap::Import);
    }
    for(std::string export_name : _op3){
        _this.exports[export_name] = WasmExport {.name = export_name, .desc = WasmExport::DescType::global, .index = index};
    }
    return WasmImport {.module = _op6.value, .name = _op7.value, .desc = _op9};
}
static std::vector<ConstInstr> action_97(Parser& _this, std::vector<Position> _pos, std::vector<ConstInstr> _op0, Tokens::ParenL _op1, ConstInstr _op2, Tokens::ParenR _op3){
    _op0.emplace_back(_op2);
    return _op0;
}
static std::vector<ConstInstr> action_98(Parser& _this, std::vector<Position> _pos, std::vector<ConstInstr> _op0, Tokens::ParenL _op1, Tokens::Item _op2, ConstInstr _op3, Tokens::ParenR _op4){
    _op0.emplace_back(_op3);
    return _op0;
}
static std::vector<ConstInstr> action_99(Parser& _this, std::vector<Position> _pos){
    return std::vector<ConstInstr>();
}
static std::vector<ConstInstr> action_100(Parser& _this, std::vector<Position> _pos, std::vector<ConstInstr> _op0, u32_t _op1){
    _op0.emplace_back(Instr::Ref_func(_op1));
    return _op0;
}
static std::vector<ConstInstr> action_101(Parser& _this, std::vector<Position> _pos){
    return std::vector<ConstInstr>();
}
static std::pair<RefType, std::vector<ConstInstr>> action_102(Parser& _this, std::vector<Position> _pos, RefType _op0, std::vector<ConstInstr> _op1){
    return {_op0, _op1};
}
static std::pair<RefType, std::vector<ConstInstr>> action_103(Parser& _this, std::vector<Position> _pos, Tokens::Func _op0, std::vector<ConstInstr> _op1){
    return {RefType::funcref, _op1};
}
static ConstInstr action_104(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Offset _op1, ConstInstr _op2, Tokens::ParenR _op3){
    return _op2;
}
static ConstInstr action_105(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, ConstInstr _op1, Tokens::ParenR _op2){
    return _op1;
}
static std::pair<u32_t, ConstInstr> action_106(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Table _op1, u32_t _op2, Tokens::ParenR _op3, ConstInstr _op4){
    return std::pair<u32_t, ConstInstr>(_op2, _op4);
}
static std::pair<u32_t, ConstInstr> action_107(Parser& _this, std::vector<Position> _pos, ConstInstr _op0){
    return std::pair<u32_t, ConstInstr>(0, _op0);
}
static std::vector<byte_t> action_108(Parser& _this, std::vector<Position> _pos, std::vector<byte_t> _op0, Tokens::String _op1){
    for(auto it = _op1.value.begin(); it != _op1.value.end(); it = std::next(it)){
        if(*it == '\\'){
            if(std::next(it) == _op1.value.end()){
                throw Exception::Parse("unclosed escape sequence in string", {_pos[1].line, _pos[1].column});
            }
            it = std::next(it);
            switch(*it){
                case 't':
                    _op0.emplace_back(static_cast<byte_t>(0x09));
                break;
                case 'n':
                    _op0.emplace_back(static_cast<byte_t>(0x0A));
                break;
                case 'r':
                    _op0.emplace_back(static_cast<byte_t>(0x0D));
                break;
                case '"':
                    _op0.emplace_back(static_cast<byte_t>(0x22));
                break;
                case '\'':
                    _op0.emplace_back(static_cast<byte_t>(0x27));
                break;
                case '\\':
                    _op0.emplace_back(static_cast<byte_t>(0x5C));
                break;
                case 'u':{
                    it = std::next(it);
                    if(*it != '{'){
                        throw Exception::Parse("invalid escape sequence in string", {_pos[1].line, _pos[1].column});
                    }
                    it = std::next(it);
                    if(*it == '_' || *it == '}'){
                        throw Exception::Parse("invalid escape sequence in string", {_pos[1].line, _pos[1].column});
                    }
                    std::string hexnum = "";
                    while(*it != '}'){
                        if(*it == '_'){
                            it = std::next(it);
                        }
                        if((it == _op1.value.end()) || !std::isxdigit(*it)){
                            throw Exception::Parse("invalid escape sequence in string", {_pos[1].line, _pos[1].column});
                        }
                        hexnum += *it;
                        it = std::next(it);
                    }
                    u32_t value = std::stoi(hexnum, nullptr, 16);
                    if(value >= 0x110000 || (value < 0xE000 && value >= 0xD800)){
                        throw Exception::Parse("invalid escape sequence in string", {_pos[1].line, _pos[1].column});
                    }
                    if(value == 0){
                        _op0.emplace_back(static_cast<byte_t>(0));
                    }
                    while(value > 0){
                        _op0.emplace_back(static_cast<byte_t>(value & 0xff));
                        value >>= 8;
                        value &= 0xffffff;
                    }
                }
                break;
                default:
                    if(std::isxdigit(*it) && (std::next(it) != _op1.value.end()) && std::isxdigit(*std::next(it))){
                        _op0.emplace_back(static_cast<byte_t>(std::stoi(std::string{*it, *std::next(it)}, nullptr, 16)));
                        it = std::next(it);
                    }else{
                        throw Exception::Parse("invalid escape sequence in string", {_pos[1].line, _pos[1].column});
                    }
                break;
            }
        }else{
            _op0.emplace_back(static_cast<byte_t>(*it));
        }
    }
    return _op0;
}
static std::vector<byte_t> action_109(Parser& _this, std::vector<Position> _pos, Tokens::String _op0){
    std::vector<byte_t> data;
    for(auto it = _op0.value.begin(); it != _op0.value.end(); it = std::next(it)){
        if(*it == '\\'){
            if(std::next(it) == _op0.value.end()){
                throw Exception::Parse("unclosed escape sequence in string", {_pos[0].line, _pos[0].column});
            }
            it = std::next(it);
            switch(*it){
                case 't':
                    data.emplace_back(static_cast<byte_t>(0x09));
                break;
                case 'n':
                    data.emplace_back(static_cast<byte_t>(0x0A));
                break;
                case 'r':
                    data.emplace_back(static_cast<byte_t>(0x0D));
                break;
                case '"':
                    data.emplace_back(static_cast<byte_t>(0x22));
                break;
                case '\'':
                    data.emplace_back(static_cast<byte_t>(0x27));
                break;
                case '\\':
                    data.emplace_back(static_cast<byte_t>(0x5C));
                break;
                case 'u':{
                    it = std::next(it);
                    if(*it != '{'){
                        throw Exception::Parse("invalid escape sequence in string", {_pos[0].line, _pos[0].column});
                    }
                    it = std::next(it);
                    if(*it == '_' || *it == '}'){
                        throw Exception::Parse("invalid escape sequence in string", {_pos[0].line, _pos[0].column});
                    }
                    std::string hexnum = "";
                    while(*it != '}'){
                        if(*it == '_'){
                            it = std::next(it);
                        }
                        if((it == _op0.value.end()) || !std::isxdigit(*it)){
                            throw Exception::Parse("invalid escape sequence in string", {_pos[0].line, _pos[0].column});
                        }
                        hexnum += *it;
                        it = std::next(it);
                    }
                    u32_t value = std::stoi(hexnum, nullptr, 16);
                    if(value >= 0x110000 || (value < 0xE000 && value >= 0xD800)){
                        throw Exception::Parse("invalid escape sequence in string", {_pos[0].line, _pos[0].column});
                    }
                    if(value == 0){
                        data.emplace_back(static_cast<byte_t>(0));
                    }
                    while(value > 0){
                        data.emplace_back(static_cast<byte_t>(value & 0xff));
                        value >>= 8;
                        value &= 0xffffff;
                    }
                }
                break;
                default:
                    if(std::isxdigit(*it) && (std::next(it) != _op0.value.end()) && std::isxdigit(*std::next(it))){
                        data.emplace_back(static_cast<byte_t>(std::stoi(std::string{*it, *std::next(it)}, nullptr, 16)));
                        it = std::next(it);
                    }else{
                        throw Exception::Parse("invalid escape sequence in string", {_pos[0].line, _pos[0].column});
                    }
                break;
            }
        }else{
            data.emplace_back(static_cast<byte_t>(*it));
        }
    }
    return data;
}
static std::pair<u32_t, ConstInstr> action_110(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Memory _op1, u32_t _op2, Tokens::ParenR _op3, ConstInstr _op4){
    return std::pair<u32_t, ConstInstr>(_op2, _op4);
}
static std::pair<u32_t, ConstInstr> action_111(Parser& _this, std::vector<Position> _pos, ConstInstr _op0){
    return std::pair<u32_t, ConstInstr>(0, _op0);
}
static WasmData action_112(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Data _op1, std::string _op2, std::vector<byte_t> _op3, Tokens::ParenR _op4){
    if(!_op2.empty()){
        _this.data_indices[_op2] = _this.data_count;
    }
    _this.data_count += 1;
    return WasmData {
        .init = _op3,
        .mode = WasmData::DataMode {
            .type = WasmData::DataMode::Mode::passive
        }
    };
}
static WasmData action_113(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Data _op1, std::string _op2, std::pair<u32_t, ConstInstr> _op3, std::vector<byte_t> _op4, Tokens::ParenR _op5){
    if(!_op2.empty()){
        _this.data_indices[_op2] = _this.data_count;
    }
    _this.data_count += 1;
    return WasmData {
        .init = _op4,
        .mode = WasmData::DataMode {
            .type = WasmData::DataMode::Mode::active,
            .memidx = _op3.first,
            .offset = _op3.second,
        }
    };
}
static WasmElem action_114(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Elem _op1, std::string _op2, std::pair<RefType, std::vector<ConstInstr>> _op3, Tokens::ParenR _op4){
    if(!_op2.empty()){
        _this.elem_indices[_op2] = _this.elem_count;
    }
    _this.elem_count += 1;
    return WasmElem {.type = _op3.first, .elemlist = _op3.second, .mode = WasmElem::ElemMode {
        .type = WasmElem::ElemMode::Mode::passive
    }};
}
static WasmElem action_115(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Elem _op1, std::string _op2, std::pair<u32_t, ConstInstr> _op3, std::pair<RefType, std::vector<ConstInstr>> _op4, Tokens::ParenR _op5){
    if(!_op2.empty()){
        _this.elem_indices[_op2] = _this.elem_count;
    }
    _this.elem_count += 1;
    return WasmElem {.type = _op4.first, .elemlist = _op4.second, .mode = WasmElem::ElemMode {
        .type = WasmElem::ElemMode::Mode::active,
        .tableidx = _op3.first,
        .offset = _op3.second
    }};
}
static WasmElem action_116(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Elem _op1, std::string _op2, ConstInstr _op3, std::vector<ConstInstr> _op4, Tokens::ParenR _op5){
    if(!_op2.empty()){
        _this.elem_indices[_op2] = _this.elem_count;
    }
    _this.elem_count += 1;
    return WasmElem {.type = RefType::funcref, .elemlist = _op4, .mode = WasmElem::ElemMode {
        .type = WasmElem::ElemMode::Mode::active,
        .tableidx = 0,
        .offset = _op3
    }};
}
static WasmElem action_117(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Elem _op1, std::string _op2, Tokens::Declare _op3, std::pair<RefType, std::vector<ConstInstr>> _op4, Tokens::ParenR _op5){
    if(!_op2.empty()){
        _this.elem_indices[_op2] = _this.elem_count;
    }
    _this.elem_count += 1;
    return WasmElem {.type = _op4.first, .elemlist = _op4.second, .mode = WasmElem::ElemMode {
        .type = WasmElem::ElemMode::Mode::declarative
    }};
}
static WasmInstr action_118(Parser& _this, std::vector<Position> _pos, Tokens::ControlInstr _op0){
    switch(_op0.value){
        case Tokens::ControlInstr::Unreachable:
            return Instr::Unreachable();
        case Tokens::ControlInstr::Nop:
            return Instr::Nop();
        case Tokens::ControlInstr::Return:
            return Instr::Return();
    }
}
static WasmInstr action_119(Parser& _this, std::vector<Position> _pos, Tokens::Br _op0, u32_t _op1){
    return Instr::Br(_op1);
}
static WasmInstr action_120(Parser& _this, std::vector<Position> _pos, Tokens::Br_if _op0, u32_t _op1){
    return Instr::Br_if(_op1);
}
static WasmInstr action_121(Parser& _this, std::vector<Position> _pos, Tokens::Br_table _op0, std::vector<u32_t> _op1){
    Instr::Br_table instr;
    instr.indices.assign(_op1.begin(), _op1.end());
    return instr;
}
static WasmInstr action_122(Parser& _this, std::vector<Position> _pos, Tokens::Call _op0, u32_t _op1){
    return Instr::Call(_op1);
}
static WasmInstr action_123(Parser& _this, std::vector<Position> _pos, Tokens::Call_indirect _op0, u32_t _op1, u32_t _op2){
    return Instr::Call_indirect(_op1, _op2);
}
static WasmInstr action_124(Parser& _this, std::vector<Position> _pos, Tokens::Call_indirect _op0, u32_t _op1){
    return Instr::Call_indirect(0, _op1);
}

std::vector<Parser::State> Parser::table = {
    {{1, {{3,{}},}},{2, {{5,{}},}},{67, {{49,{}},}},{69, {{51,{}},}},{72, {{53,{}},}},{76, {{55,{}},}},{80, {{57,{}},}},{87, {{59,{}},}},{97, {{61,{}},}},{98, {{7,{}},}},{99, {{9,{}},}},{105, {{65,{}},}},{109, {{67,{}},}},},
    {{1, {{32,{1,}},}},},
    {{3, {{11,{}},}},{10, {{13,{}},}},{11, {{127,{}},}},{12, {{129,{}},}},{13, {{131,{}},}},{19, {{133,{}},}},{20, {{135,{}},}},{21, {{137,{}},}},{22, {{139,{}},}},{25, {{141,{}},}},{29, {{143,{}},}},{30, {{15,{}},}},},
    {{1, {{0,{}},}},},
    {{1, {{28,{1,}},}},{2, {{17,{}},}},{67, {{19,{}},}},{69, {{21,{}},}},{72, {{23,{}},}},{76, {{25,{}},}},{80, {{27,{}},}},{87, {{29,{}},}},{97, {{31,{}},}},{105, {{33,{}},}},{109, {{35,{}},}},},
    {{1, {{30,{1,1,}},}},},
    {{2, {{5,{}},}},{3, {{37,{}},}},{4, {{39,{}},}},{67, {{49,{}},}},{69, {{51,{}},}},{72, {{53,{}},}},{76, {{55,{}},}},{80, {{57,{}},}},{87, {{59,{}},}},{97, {{61,{}},}},{99, {{41,{}},}},{105, {{65,{}},}},{109, {{67,{}},}},},
    {{4, {{1063,{}},}},{6, {{1069,{}},}},{77, {{43,{}},}},{112, {{1065,{}},}},},
    {{11, {{127,{}},}},{12, {{129,{}},}},{13, {{131,{}},}},{19, {{133,{}},}},{20, {{135,{}},}},{21, {{137,{}},}},{22, {{139,{}},}},{25, {{141,{}},}},{29, {{143,{}},}},{30, {{45,{}},}},},
    {{1, {{20,{1,1,}},}},{2, {{20,{1,1,}},}},{3, {{20,{1,1,}},}},},
    {{1, {{18,{1,1,}},}},{2, {{18,{1,1,}},}},{3, {{18,{1,1,}},}},},
    {{1, {{12,{1,1,}},}},{2, {{12,{1,1,}},}},{3, {{12,{1,1,}},}},},
    {{1, {{14,{1,1,}},}},{2, {{14,{1,1,}},}},{3, {{14,{1,1,}},}},},
    {{1, {{10,{1,1,}},}},{2, {{10,{1,1,}},}},{3, {{10,{1,1,}},}},},
    {{1, {{4,{1,1,}},}},{2, {{4,{1,1,}},}},{3, {{4,{1,1,}},}},},
    {{1, {{8,{1,1,}},}},{2, {{8,{1,1,}},}},{3, {{8,{1,1,}},}},},
    {{1, {{6,{1,1,}},}},{2, {{6,{1,1,}},}},{3, {{6,{1,1,}},}},},
    {{1, {{2,{1,1,}},}},{2, {{2,{1,1,}},}},{3, {{2,{1,1,}},}},},
    {{1, {{26,{1,1,0,1,}},}},},
    {{2, {{5,{}},}},{3, {{47,{}},}},{67, {{49,{}},}},{69, {{51,{}},}},{72, {{53,{}},}},{76, {{55,{}},}},{80, {{57,{}},}},{87, {{59,{}},}},{97, {{61,{}},}},{99, {{63,{}},}},{105, {{65,{}},}},{109, {{67,{}},}},},
    {{2, {{17,{}},}},{3, {{69,{}},}},{67, {{19,{}},}},{69, {{21,{}},}},{72, {{23,{}},}},{76, {{25,{}},}},{80, {{27,{}},}},{87, {{29,{}},}},{97, {{31,{}},}},{105, {{33,{}},}},{109, {{35,{}},}},},
    {{3, {{121,{}},}},},
    {{4, {{1063,{}},}},{6, {{1069,{}},}},{77, {{123,{}},}},{112, {{1065,{}},}},},
    {{1, {{24,{1,1,1,0,1,}},}},},
    {{1, {{20,{0,1,}},}},{2, {{20,{0,1,}},}},{3, {{20,{0,1,}},}},},
    {{1, {{18,{0,1,}},}},{2, {{18,{0,1,}},}},{3, {{18,{0,1,}},}},},
    {{1, {{12,{0,1,}},}},{2, {{12,{0,1,}},}},{3, {{12,{0,1,}},}},},
    {{1, {{14,{0,1,}},}},{2, {{14,{0,1,}},}},{3, {{14,{0,1,}},}},},
    {{1, {{10,{0,1,}},}},{2, {{10,{0,1,}},}},{3, {{10,{0,1,}},}},},
    {{1, {{4,{0,1,}},}},{2, {{4,{0,1,}},}},{3, {{4,{0,1,}},}},},
    {{1, {{8,{0,1,}},}},{2, {{8,{0,1,}},}},{3, {{8,{0,1,}},}},},
    {{2, {{17,{}},}},{3, {{125,{}},}},{67, {{19,{}},}},{69, {{21,{}},}},{72, {{23,{}},}},{76, {{25,{}},}},{80, {{27,{}},}},{87, {{29,{}},}},{97, {{31,{}},}},{105, {{33,{}},}},{109, {{35,{}},}},},
    {{1, {{6,{0,1,}},}},{2, {{6,{0,1,}},}},{3, {{6,{0,1,}},}},},
    {{1, {{2,{0,1,}},}},{2, {{2,{0,1,}},}},{3, {{2,{0,1,}},}},},
    {{1, {{26,{1,1,1,1,}},}},},
    {{2, {{89,{}},}},{3, {{145,{}},}},{101, {{147,{}},}},{104, {{149,{}},}},},
    {{3, {{151,{}},}},{4, {{153,{}},}},{16, {{1089,{}},}},{18, {{1091,{}},}},{65, {{1093,{}},}},{114, {{497,{}},}},{115, {{155,{}},}},},
    {{3, {{157,{}},}},{16, {{1089,{}},}},{18, {{1091,{}},}},{65, {{1093,{}},}},{114, {{497,{}},}},{115, {{159,{}},}},},
    {{3, {{161,{}},}},{4, {{163,{}},}},{16, {{1089,{}},}},{18, {{1091,{}},}},{65, {{1093,{}},}},{114, {{497,{}},}},{115, {{165,{}},}},},
    {{3, {{238,{1,1,}},}},{32, {{238,{1,1,}},}},{38, {{238,{1,1,}},}},{39, {{238,{1,1,}},}},{40, {{238,{1,1,}},}},{41, {{238,{1,1,}},}},{42, {{238,{1,1,}},}},},
    {{3, {{240,{1,1,}},}},{32, {{240,{1,1,}},}},{38, {{240,{1,1,}},}},{39, {{240,{1,1,}},}},{40, {{240,{1,1,}},}},{41, {{240,{1,1,}},}},{42, {{240,{1,1,}},}},},
    {{3, {{244,{1,1,}},}},{32, {{244,{1,1,}},}},{38, {{244,{1,1,}},}},{39, {{244,{1,1,}},}},{40, {{244,{1,1,}},}},{41, {{244,{1,1,}},}},{42, {{244,{1,1,}},}},},
    {{2, {{89,{}},}},{3, {{246,{1,1,0,}},}},{32, {{246,{1,1,0,}},}},{38, {{246,{1,1,0,}},}},{39, {{246,{1,1,0,}},}},{40, {{246,{1,1,0,}},}},{41, {{246,{1,1,0,}},}},{42, {{246,{1,1,0,}},}},{101, {{1049,{}},}},{104, {{1051,{}},}},{111, {{169,{}},}},},
    {{3, {{248,{1,1,}},}},{32, {{248,{1,1,}},}},{38, {{248,{1,1,}},}},{39, {{248,{1,1,}},}},{40, {{248,{1,1,}},}},{41, {{248,{1,1,}},}},{42, {{248,{1,1,}},}},},
    {{11, {{309,{}},}},{12, {{541,{}},}},{13, {{183,{}},}},{14, {{73,{}},}},{15, {{75,{}},}},{24, {{77,{}},}},},
    {{3, {{172,{1,1,}},}},{32, {{172,{1,1,}},}},{38, {{172,{1,1,}},}},{39, {{172,{1,1,}},}},{40, {{172,{1,1,}},}},{41, {{172,{1,1,}},}},{42, {{172,{1,1,}},}},},
    {{14, {{173,{}},}},{15, {{75,{}},}},},
    {{15, {{175,{}},}},},
    {{5, {{177,{}},}},},
    {{3, {{120,{1,1,}},}},},
    {{3, {{118,{1,1,}},}},{16, {{118,{1,1,}},}},{18, {{118,{1,1,}},}},},
    {{12, {{97,{}},}},{13, {{183,{}},}},{29, {{611,{}},}},},
    {{5, {{179,{}},}},},
    {{16, {{1089,{}},}},{18, {{1091,{}},}},{65, {{1093,{}},}},{114, {{181,{}},}},},
    {{12, {{631,{}},}},{13, {{183,{}},}},{23, {{107,{}},}},},
    {{4, {{1001,{}},}},{6, {{1069,{}},}},{106, {{199,{}},}},{112, {{1003,{}},}},},
    {{3, {{206,{1,1,}},}},{4, {{1063,{}},}},{6, {{1069,{}},}},{77, {{201,{}},}},{112, {{1065,{}},}},},
    {{2, {{207,{}},}},{3, {{204,{1,1,}},}},},
    {{4, {{707,{}},}},{6, {{1069,{}},}},{95, {{209,{}},}},{112, {{711,{}},}},},
    {{3, {{216,{1,1,}},}},{5, {{216,{1,1,}},}},},
    {{1, {{16,{0,1,1,1,1,}},}},{2, {{16,{0,1,1,1,1,}},}},{3, {{16,{0,1,1,1,1,}},}},},
    {{3, {{211,{}},}},},
    {{1, {{24,{1,1,1,1,1,}},}},},
    {{2, {{347,{}},}},{4, {{485,{}},}},{79, {{215,{}},}},{86, {{217,{}},}},},
    {{5, {{219,{}},}},},
    {{5, {{221,{}},}},},
    {{2, {{223,{}},}},{3, {{225,{}},}},{4, {{485,{}},}},{32, {{939,{}},}},{38, {{941,{}},}},{39, {{943,{}},}},{40, {{945,{}},}},{41, {{947,{}},}},{42, {{949,{}},}},{73, {{227,{}},}},{86, {{229,{}},}},{90, {{231,{}},}},{94, {{233,{}},}},{101, {{1049,{}},}},{102, {{861,{}},}},{104, {{1051,{}},}},{111, {{235,{}},}},},
    {{2, {{247,{}},}},{4, {{485,{}},}},{6, {{903,{}},}},{16, {{871,{}},}},{18, {{873,{}},}},{73, {{237,{}},}},{86, {{239,{}},}},{88, {{241,{}},}},{93, {{757,{}},}},{103, {{243,{}},}},{108, {{245,{}},}},{113, {{787,{}},}},},
    {{2, {{247,{}},}},{4, {{485,{}},}},{6, {{903,{}},}},{73, {{249,{}},}},{86, {{251,{}},}},{88, {{253,{}},}},{93, {{255,{}},}},{113, {{787,{}},}},},
    {{2, {{257,{}},}},{4, {{485,{}},}},{16, {{1089,{}},}},{18, {{1091,{}},}},{65, {{1093,{}},}},{73, {{259,{}},}},{82, {{261,{}},}},{86, {{263,{}},}},{114, {{1097,{}},}},},
    {{2, {{443,{}},}},{4, {{485,{}},}},{16, {{871,{}},}},{18, {{873,{}},}},{19, {{655,{}},}},{27, {{265,{}},}},{71, {{267,{}},}},{86, {{269,{}},}},{100, {{271,{}},}},{103, {{659,{}},}},{107, {{273,{}},}},},
    {{2, {{459,{}},}},{4, {{485,{}},}},{5, {{897,{}},}},{68, {{275,{}},}},{86, {{277,{}},}},{96, {{279,{}},}},{100, {{465,{}},}},},
    {{3, {{58,{1,1,0,0,1,}},}},},
    {{2, {{93,{}},}},{3, {{281,{}},}},{104, {{283,{}},}},},
    {{2, {{95,{}},}},{3, {{285,{}},}},},
    {{2, {{50,{0,1,1,0,1,}},}},{3, {{50,{0,1,1,0,1,}},}},{32, {{50,{0,1,1,0,1,}},}},{38, {{50,{0,1,1,0,1,}},}},{39, {{50,{0,1,1,0,1,}},}},{40, {{50,{0,1,1,0,1,}},}},{41, {{50,{0,1,1,0,1,}},}},{42, {{50,{0,1,1,0,1,}},}},},
    {{16, {{1089,{}},}},{18, {{1091,{}},}},{65, {{1093,{}},}},{114, {{295,{}},}},},
    {{3, {{297,{}},}},{16, {{1089,{}},}},{18, {{1091,{}},}},{65, {{1093,{}},}},{114, {{299,{}},}},},
    {{2, {{54,{0,1,1,0,1,}},}},{3, {{54,{0,1,1,0,1,}},}},{32, {{54,{0,1,1,0,1,}},}},{38, {{54,{0,1,1,0,1,}},}},{39, {{54,{0,1,1,0,1,}},}},{40, {{54,{0,1,1,0,1,}},}},{41, {{54,{0,1,1,0,1,}},}},{42, {{54,{0,1,1,0,1,}},}},},
    {{3, {{301,{}},}},{16, {{1089,{}},}},{18, {{1091,{}},}},{65, {{1093,{}},}},{114, {{299,{}},}},},
    {{2, {{89,{}},}},{3, {{168,{1,1,0,1,0,}},}},{32, {{168,{1,1,0,1,0,}},}},{38, {{168,{1,1,0,1,0,}},}},{39, {{168,{1,1,0,1,0,}},}},{40, {{168,{1,1,0,1,0,}},}},{41, {{168,{1,1,0,1,0,}},}},{42, {{168,{1,1,0,1,0,}},}},{94, {{303,{}},}},},
    {{16, {{1089,{}},}},{18, {{1091,{}},}},{65, {{1093,{}},}},{114, {{305,{}},}},},
    {{3, {{307,{}},}},{16, {{1089,{}},}},{18, {{1091,{}},}},{65, {{1093,{}},}},{114, {{299,{}},}},},
    {{3, {{90,{1,1,}},}},{4, {{90,{1,1,}},}},{6, {{90,{1,1,}},}},{32, {{90,{1,1,}},}},{38, {{90,{1,1,}},}},{39, {{90,{1,1,}},}},{40, {{90,{1,1,}},}},{41, {{90,{1,1,}},}},{42, {{90,{1,1,}},}},},
    {{3, {{246,{1,1,1,}},}},{32, {{246,{1,1,1,}},}},{38, {{246,{1,1,1,}},}},{39, {{246,{1,1,1,}},}},{40, {{246,{1,1,1,}},}},{41, {{246,{1,1,1,}},}},{42, {{246,{1,1,1,}},}},},
    {{3, {{242,{1,1,}},}},{4, {{1055,{}},}},{6, {{1069,{}},}},{32, {{242,{1,1,}},}},{38, {{242,{1,1,}},}},{39, {{242,{1,1,}},}},{40, {{242,{1,1,}},}},{41, {{242,{1,1,}},}},{42, {{242,{1,1,}},}},{91, {{167,{}},}},{112, {{1057,{}},}},},
    {{3, {{313,{}},}},{4, {{315,{}},}},{16, {{1089,{}},}},{18, {{1091,{}},}},{65, {{1093,{}},}},{114, {{497,{}},}},{115, {{317,{}},}},},
    {{3, {{319,{}},}},{16, {{1089,{}},}},{18, {{1091,{}},}},{65, {{1093,{}},}},{114, {{497,{}},}},{115, {{321,{}},}},},
    {{5, {{323,{}},}},},
    {{3, {{325,{}},}},},
    {{3, {{327,{}},}},},
    {{5, {{329,{}},}},},
    {{3, {{126,{1,1,}},}},},
    {{3, {{128,{1,1,}},}},},
    {{3, {{138,{1,1,}},}},},
    {{3, {{130,{1,1,}},}},},
    {{3, {{132,{1,1,}},}},},
    {{3, {{134,{1,1,}},}},},
    {{3, {{136,{1,1,}},}},},
    {{3, {{331,{}},}},},
    {{3, {{200,{1,1,}},}},{4, {{200,{1,1,}},}},{6, {{200,{1,1,}},}},},
    {{43, {{1009,{}},}},{45, {{1011,{}},}},{48, {{1013,{}},}},{60, {{1015,{}},}},{61, {{1017,{}},}},{62, {{1019,{}},}},{63, {{1021,{}},}},{66, {{333,{}},}},},
    {{3, {{335,{}},}},},
    {{26, {{337,{}},}},{43, {{1009,{}},}},{45, {{1011,{}},}},{48, {{1013,{}},}},{60, {{1015,{}},}},{61, {{1017,{}},}},{62, {{1019,{}},}},{63, {{1021,{}},}},{66, {{339,{}},}},},
    {{3, {{341,{}},}},},
    {{1, {{16,{1,1,1,1,1,}},}},{2, {{16,{1,1,1,1,1,}},}},{3, {{16,{1,1,1,1,1,}},}},},
    {{3, {{661,{}},}},{4, {{1063,{}},}},{6, {{1069,{}},}},{77, {{201,{}},}},{112, {{1065,{}},}},},
    {{3, {{345,{}},}},},
    {{2, {{347,{}},}},{79, {{349,{}},}},},
    {{5, {{351,{}},}},},
    {{2, {{353,{}},}},},
    {{11, {{309,{}},}},{12, {{355,{}},}},{13, {{105,{}},}},{14, {{73,{}},}},{15, {{75,{}},}},{24, {{77,{}},}},},
    {{1, {{176,{1,1,0,0,0,0,0,1,}},}},{2, {{176,{1,1,0,0,0,0,0,1,}},}},{3, {{176,{1,1,0,0,0,0,0,1,}},}},},
    {{2, {{89,{}},}},{3, {{357,{}},}},{32, {{939,{}},}},{38, {{941,{}},}},{39, {{943,{}},}},{40, {{945,{}},}},{41, {{947,{}},}},{42, {{949,{}},}},{90, {{359,{}},}},{94, {{361,{}},}},{101, {{1049,{}},}},{102, {{861,{}},}},{104, {{1051,{}},}},{111, {{363,{}},}},},
    {{2, {{365,{}},}},{3, {{367,{}},}},{32, {{939,{}},}},{38, {{941,{}},}},{39, {{943,{}},}},{40, {{945,{}},}},{41, {{947,{}},}},{42, {{949,{}},}},{73, {{369,{}},}},{90, {{371,{}},}},{94, {{373,{}},}},{101, {{1049,{}},}},{102, {{861,{}},}},{104, {{1051,{}},}},{111, {{375,{}},}},},
    {{3, {{377,{}},}},{32, {{939,{}},}},{38, {{941,{}},}},{39, {{943,{}},}},{40, {{945,{}},}},{41, {{947,{}},}},{42, {{949,{}},}},{102, {{91,{}},}},},
    {{3, {{379,{}},}},{32, {{939,{}},}},{38, {{941,{}},}},{39, {{943,{}},}},{40, {{945,{}},}},{41, {{947,{}},}},{42, {{949,{}},}},{90, {{381,{}},}},{102, {{861,{}},}},},
    {{2, {{89,{}},}},{3, {{383,{}},}},{32, {{939,{}},}},{38, {{941,{}},}},{39, {{943,{}},}},{40, {{945,{}},}},{41, {{947,{}},}},{42, {{949,{}},}},{90, {{385,{}},}},{94, {{387,{}},}},{102, {{861,{}},}},},
    {{2, {{103,{}},}},{6, {{903,{}},}},{16, {{871,{}},}},{18, {{873,{}},}},{88, {{389,{}},}},{93, {{757,{}},}},{103, {{391,{}},}},{108, {{393,{}},}},{113, {{787,{}},}},},
    {{2, {{247,{}},}},{6, {{903,{}},}},{16, {{871,{}},}},{18, {{873,{}},}},{73, {{395,{}},}},{88, {{397,{}},}},{93, {{757,{}},}},{103, {{399,{}},}},{108, {{401,{}},}},{113, {{787,{}},}},},
    {{6, {{903,{}},}},{93, {{757,{}},}},{108, {{403,{}},}},{113, {{787,{}},}},},
    {{2, {{405,{}},}},},
    {{3, {{407,{}},}},},
    {{12, {{97,{}},}},{13, {{105,{}},}},{29, {{409,{}},}},},
    {{2, {{103,{}},}},{6, {{903,{}},}},{88, {{411,{}},}},{93, {{413,{}},}},{113, {{787,{}},}},},
    {{2, {{415,{}},}},{6, {{903,{}},}},{73, {{417,{}},}},{88, {{419,{}},}},{93, {{421,{}},}},{113, {{787,{}},}},},
    {{6, {{903,{}},}},{93, {{423,{}},}},{113, {{787,{}},}},},
    {{3, {{425,{}},}},},
    {{12, {{427,{}},}},{13, {{105,{}},}},{23, {{107,{}},}},},
    {{2, {{109,{}},}},{16, {{1089,{}},}},{18, {{1091,{}},}},{65, {{1093,{}},}},{82, {{429,{}},}},{114, {{1097,{}},}},},
    {{43, {{1009,{}},}},{45, {{1011,{}},}},{48, {{1013,{}},}},{60, {{1015,{}},}},{61, {{1017,{}},}},{62, {{1019,{}},}},{63, {{1021,{}},}},{66, {{431,{}},}},},
    {{2, {{433,{}},}},{16, {{1089,{}},}},{18, {{1091,{}},}},{65, {{1093,{}},}},{73, {{435,{}},}},{82, {{437,{}},}},{114, {{1097,{}},}},},
    {{16, {{871,{}},}},{18, {{873,{}},}},{19, {{655,{}},}},{71, {{439,{}},}},{103, {{659,{}},}},},
    {{3, {{441,{}},}},},
    {{2, {{443,{}},}},{16, {{871,{}},}},{18, {{873,{}},}},{19, {{655,{}},}},{27, {{445,{}},}},{71, {{447,{}},}},{100, {{449,{}},}},{103, {{659,{}},}},{107, {{451,{}},}},},
    {{3, {{453,{}},}},{4, {{1063,{}},}},{6, {{1069,{}},}},{16, {{214,{1,}},}},{18, {{214,{1,}},}},{19, {{214,{1,}},}},{77, {{961,{}},}},{78, {{213,{}},}},{112, {{1065,{}},}},},
    {{16, {{871,{}},}},{18, {{873,{}},}},{19, {{655,{}},}},{71, {{455,{}},}},{103, {{659,{}},}},},
    {{3, {{457,{}},}},{5, {{119,{}},}},},
    {{2, {{459,{}},}},{5, {{897,{}},}},{68, {{461,{}},}},{96, {{463,{}},}},{100, {{465,{}},}},},
    {{5, {{897,{}},}},{68, {{467,{}},}},},
    {{3, {{58,{1,1,1,0,1,}},}},},
    {{2, {{95,{}},}},{3, {{469,{}},}},},
    {{3, {{58,{1,1,0,1,1,}},}},},
    {{2, {{89,{}},}},{3, {{471,{}},}},{4, {{485,{}},}},{86, {{473,{}},}},{101, {{1049,{}},}},{104, {{1051,{}},}},{111, {{475,{}},}},},
    {{4, {{485,{}},}},{6, {{903,{}},}},{86, {{477,{}},}},{93, {{757,{}},}},{108, {{479,{}},}},{113, {{787,{}},}},},
    {{4, {{485,{}},}},{6, {{903,{}},}},{86, {{481,{}},}},{93, {{483,{}},}},{113, {{787,{}},}},},
    {{2, {{257,{}},}},{4, {{485,{}},}},{16, {{1089,{}},}},{18, {{1091,{}},}},{65, {{1093,{}},}},{82, {{487,{}},}},{86, {{489,{}},}},{114, {{1097,{}},}},},
    {{3, {{491,{}},}},},
    {{2, {{50,{0,1,1,1,1,}},}},{3, {{50,{0,1,1,1,1,}},}},{32, {{50,{0,1,1,1,1,}},}},{38, {{50,{0,1,1,1,1,}},}},{39, {{50,{0,1,1,1,1,}},}},{40, {{50,{0,1,1,1,1,}},}},{41, {{50,{0,1,1,1,1,}},}},{42, {{50,{0,1,1,1,1,}},}},},
    {{3, {{44,{1,1,}},}},{16, {{44,{1,1,}},}},{18, {{44,{1,1,}},}},{65, {{44,{1,1,}},}},},
    {{2, {{54,{0,1,1,1,1,}},}},{3, {{54,{0,1,1,1,1,}},}},{32, {{54,{0,1,1,1,1,}},}},{38, {{54,{0,1,1,1,1,}},}},{39, {{54,{0,1,1,1,1,}},}},{40, {{54,{0,1,1,1,1,}},}},{41, {{54,{0,1,1,1,1,}},}},{42, {{54,{0,1,1,1,1,}},}},},
    {{3, {{168,{1,1,0,1,1,}},}},{32, {{168,{1,1,0,1,1,}},}},{38, {{168,{1,1,0,1,1,}},}},{39, {{168,{1,1,0,1,1,}},}},{40, {{168,{1,1,0,1,1,}},}},{41, {{168,{1,1,0,1,1,}},}},{42, {{168,{1,1,0,1,1,}},}},},
    {{3, {{493,{}},}},},
    {{2, {{89,{}},}},{3, {{168,{1,1,1,1,0,}},}},{32, {{168,{1,1,1,1,0,}},}},{38, {{168,{1,1,1,1,0,}},}},{39, {{168,{1,1,1,1,0,}},}},{40, {{168,{1,1,1,1,0,}},}},{41, {{168,{1,1,1,1,0,}},}},{42, {{168,{1,1,1,1,0,}},}},{94, {{495,{}},}},},
    {{4, {{499,{}},}},{6, {{1069,{}},}},{110, {{501,{}},}},{112, {{503,{}},}},},
    {{2, {{95,{}},{112,{1,1,}},}},{3, {{112,{1,1,}},}},{32, {{112,{1,1,}},}},{38, {{112,{1,1,}},}},{39, {{112,{1,1,}},}},{40, {{112,{1,1,}},}},{41, {{112,{1,1,}},}},{42, {{112,{1,1,}},}},},
    {{2, {{50,{1,1,1,0,1,}},}},{3, {{50,{1,1,1,0,1,}},}},{32, {{50,{1,1,1,0,1,}},}},{38, {{50,{1,1,1,0,1,}},}},{39, {{50,{1,1,1,0,1,}},}},{40, {{50,{1,1,1,0,1,}},}},{41, {{50,{1,1,1,0,1,}},}},{42, {{50,{1,1,1,0,1,}},}},},
    {{16, {{1089,{}},}},{18, {{1091,{}},}},{65, {{1093,{}},}},{114, {{505,{}},}},},
    {{3, {{507,{}},}},{16, {{1089,{}},}},{18, {{1091,{}},}},{65, {{1093,{}},}},{114, {{299,{}},}},},
    {{2, {{54,{1,1,1,0,1,}},}},{3, {{54,{1,1,1,0,1,}},}},{32, {{54,{1,1,1,0,1,}},}},{38, {{54,{1,1,1,0,1,}},}},{39, {{54,{1,1,1,0,1,}},}},{40, {{54,{1,1,1,0,1,}},}},{41, {{54,{1,1,1,0,1,}},}},{42, {{54,{1,1,1,0,1,}},}},},
    {{3, {{509,{}},}},{16, {{1089,{}},}},{18, {{1091,{}},}},{65, {{1093,{}},}},{114, {{299,{}},}},},
    {{3, {{511,{}},}},},
    {{2, {{162,{0,1,1,1,1,}},}},{3, {{162,{0,1,1,1,1,}},}},{6, {{162,{0,1,1,1,1,}},}},{16, {{162,{0,1,1,1,1,}},}},{18, {{162,{0,1,1,1,1,}},}},{32, {{162,{0,1,1,1,1,}},}},{38, {{162,{0,1,1,1,1,}},}},{39, {{162,{0,1,1,1,1,}},}},{40, {{162,{0,1,1,1,1,}},}},{41, {{162,{0,1,1,1,1,}},}},{42, {{162,{0,1,1,1,1,}},}},{65, {{162,{0,1,1,1,1,}},}},},
    {{3, {{124,{1,1,1,1,}},}},{43, {{124,{1,1,1,1,}},}},{45, {{124,{1,1,1,1,}},}},{48, {{124,{1,1,1,1,}},}},{60, {{124,{1,1,1,1,}},}},{61, {{124,{1,1,1,1,}},}},{62, {{124,{1,1,1,1,}},}},{63, {{124,{1,1,1,1,}},}},},
    {{3, {{513,{}},}},},
    {{2, {{443,{}},}},{100, {{515,{}},}},},
    {{3, {{517,{}},}},},
    {{2, {{194,{0,1,1,1,}},}},{3, {{194,{0,1,1,1,}},}},},
    {{43, {{1009,{}},}},{45, {{1011,{}},}},{48, {{1013,{}},}},{60, {{1015,{}},}},{61, {{1017,{}},}},{62, {{1019,{}},}},{63, {{1021,{}},}},{66, {{519,{}},}},},
    {{3, {{521,{}},}},},
    {{2, {{443,{}},}},{100, {{523,{}},}},},
    {{12, {{97,{}},}},{29, {{783,{}},}},},
    {{1, {{68,{1,1,0,1,1,}},}},{2, {{68,{1,1,0,1,1,}},}},{3, {{68,{1,1,0,1,1,}},}},},
    {{19, {{71,{}},}},},
    {{3, {{525,{}},}},},
    {{2, {{527,{}},}},{89, {{529,{}},}},},
    {{19, {{531,{}},}},{20, {{533,{}},}},{21, {{535,{}},}},{22, {{537,{}},}},},
    {{5, {{539,{}},}},},
    {{1, {{176,{1,1,0,1,0,0,0,1,}},}},{2, {{176,{1,1,0,1,0,0,0,1,}},}},{3, {{176,{1,1,0,1,0,0,0,1,}},}},},
    {{3, {{543,{}},}},{32, {{939,{}},}},{38, {{941,{}},}},{39, {{943,{}},}},{40, {{945,{}},}},{41, {{947,{}},}},{42, {{949,{}},}},{102, {{91,{}},}},},
    {{3, {{545,{}},}},{32, {{939,{}},}},{38, {{941,{}},}},{39, {{943,{}},}},{40, {{945,{}},}},{41, {{947,{}},}},{42, {{949,{}},}},{90, {{547,{}},}},{102, {{861,{}},}},},
    {{2, {{89,{}},}},{3, {{549,{}},}},{32, {{939,{}},}},{38, {{941,{}},}},{39, {{943,{}},}},{40, {{945,{}},}},{41, {{947,{}},}},{42, {{949,{}},}},{90, {{551,{}},}},{94, {{553,{}},}},{102, {{861,{}},}},},
    {{11, {{309,{}},}},{12, {{555,{}},}},{13, {{105,{}},}},{14, {{73,{}},}},{15, {{75,{}},}},{24, {{77,{}},}},},
    {{1, {{176,{1,1,1,0,0,0,0,1,}},}},{2, {{176,{1,1,1,0,0,0,0,1,}},}},{3, {{176,{1,1,1,0,0,0,0,1,}},}},},
    {{2, {{89,{}},}},{3, {{559,{}},}},{32, {{939,{}},}},{38, {{941,{}},}},{39, {{943,{}},}},{40, {{945,{}},}},{41, {{947,{}},}},{42, {{949,{}},}},{90, {{561,{}},}},{94, {{563,{}},}},{101, {{1049,{}},}},{102, {{861,{}},}},{104, {{1051,{}},}},{111, {{565,{}},}},},
    {{3, {{567,{}},}},{32, {{939,{}},}},{38, {{941,{}},}},{39, {{943,{}},}},{40, {{945,{}},}},{41, {{947,{}},}},{42, {{949,{}},}},{102, {{91,{}},}},},
    {{3, {{569,{}},}},{32, {{939,{}},}},{38, {{941,{}},}},{39, {{943,{}},}},{40, {{945,{}},}},{41, {{947,{}},}},{42, {{949,{}},}},{90, {{571,{}},}},{102, {{861,{}},}},},
    {{2, {{89,{}},}},{3, {{573,{}},}},{32, {{939,{}},}},{38, {{941,{}},}},{39, {{943,{}},}},{40, {{945,{}},}},{41, {{947,{}},}},{42, {{949,{}},}},{90, {{575,{}},}},{94, {{577,{}},}},{102, {{861,{}},}},},
    {{1, {{176,{1,1,0,0,0,0,1,1,}},}},{2, {{176,{1,1,0,0,0,0,1,1,}},}},{3, {{176,{1,1,0,0,0,0,1,1,}},}},},
    {{1, {{176,{1,1,0,0,0,1,0,1,}},}},{2, {{176,{1,1,0,0,0,1,0,1,}},}},{3, {{176,{1,1,0,0,0,1,0,1,}},}},},
    {{3, {{579,{}},}},{32, {{939,{}},}},{38, {{941,{}},}},{39, {{943,{}},}},{40, {{945,{}},}},{41, {{947,{}},}},{42, {{949,{}},}},{102, {{91,{}},}},},
    {{1, {{176,{1,1,0,0,1,0,0,1,}},}},{2, {{176,{1,1,0,0,1,0,0,1,}},}},{3, {{176,{1,1,0,0,1,0,0,1,}},}},},
    {{3, {{581,{}},}},{32, {{939,{}},}},{38, {{941,{}},}},{39, {{943,{}},}},{40, {{945,{}},}},{41, {{947,{}},}},{42, {{949,{}},}},{102, {{91,{}},}},},
    {{3, {{583,{}},}},{32, {{939,{}},}},{38, {{941,{}},}},{39, {{943,{}},}},{40, {{945,{}},}},{41, {{947,{}},}},{42, {{949,{}},}},{90, {{585,{}},}},{102, {{861,{}},}},},
    {{6, {{903,{}},}},{93, {{757,{}},}},{108, {{587,{}},}},{113, {{787,{}},}},},
    {{2, {{589,{}},}},},
    {{3, {{591,{}},}},},
    {{2, {{103,{}},}},{6, {{903,{}},}},{16, {{871,{}},}},{18, {{873,{}},}},{88, {{593,{}},}},{93, {{757,{}},}},{103, {{595,{}},}},{108, {{597,{}},}},{113, {{787,{}},}},},
    {{6, {{903,{}},}},{93, {{757,{}},}},{108, {{599,{}},}},{113, {{787,{}},}},},
    {{2, {{601,{}},}},},
    {{3, {{603,{}},}},},
    {{3, {{605,{}},}},},
    {{25, {{607,{}},}},},
    {{1, {{180,{1,1,0,0,0,1,1,}},}},{2, {{180,{1,1,0,0,0,1,1,}},}},{3, {{180,{1,1,0,0,0,1,1,}},}},},
    {{5, {{897,{}},}},{68, {{609,{}},}},},
    {{6, {{903,{}},}},{93, {{613,{}},}},{113, {{787,{}},}},},
    {{3, {{615,{}},}},},
    {{12, {{97,{}},}},{13, {{105,{}},}},{29, {{617,{}},}},},
    {{2, {{103,{}},}},{6, {{903,{}},}},{88, {{619,{}},}},{93, {{621,{}},}},{113, {{787,{}},}},},
    {{6, {{903,{}},}},{93, {{623,{}},}},{113, {{787,{}},}},},
    {{3, {{625,{}},}},},
    {{3, {{627,{}},}},},
    {{1, {{186,{1,1,0,0,0,1,1,}},}},{2, {{186,{1,1,0,0,0,1,1,}},}},{3, {{186,{1,1,0,0,0,1,1,}},}},},
    {{5, {{629,{}},}},},
    {{43, {{1009,{}},}},{45, {{1011,{}},}},{48, {{1013,{}},}},{60, {{1015,{}},}},{61, {{1017,{}},}},{62, {{1019,{}},}},{63, {{1021,{}},}},{66, {{633,{}},}},},
    {{3, {{635,{}},}},},
    {{12, {{637,{}},}},{13, {{105,{}},}},{23, {{107,{}},}},},
    {{2, {{109,{}},}},{16, {{1089,{}},}},{18, {{1091,{}},}},{65, {{1093,{}},}},{82, {{641,{}},}},{114, {{1097,{}},}},},
    {{43, {{1009,{}},}},{45, {{1011,{}},}},{48, {{1013,{}},}},{60, {{1015,{}},}},{61, {{1017,{}},}},{62, {{1019,{}},}},{63, {{1021,{}},}},{66, {{643,{}},}},},
    {{3, {{645,{}},}},},
    {{1, {{228,{1,1,0,1,1,}},}},{2, {{228,{1,1,0,1,1,}},}},{3, {{228,{1,1,0,1,1,}},}},},
    {{20, {{111,{}},}},{28, {{695,{}},}},{43, {{1009,{}},}},{45, {{1011,{}},}},{48, {{1013,{}},}},{60, {{1015,{}},}},{61, {{1017,{}},}},{62, {{1019,{}},}},{63, {{1021,{}},}},{66, {{697,{}},}},},
    {{16, {{871,{}},}},{18, {{873,{}},}},{19, {{655,{}},}},{71, {{647,{}},}},{103, {{659,{}},}},},
    {{3, {{649,{}},}},},
    {{3, {{651,{}},}},{4, {{1063,{}},}},{6, {{1069,{}},}},{16, {{214,{1,}},}},{18, {{214,{1,}},}},{19, {{214,{1,}},}},{77, {{961,{}},}},{78, {{653,{}},}},{112, {{1065,{}},}},},
    {{16, {{871,{}},}},{18, {{873,{}},}},{19, {{655,{}},}},{71, {{657,{}},}},{103, {{659,{}},}},},
    {{1, {{232,{1,1,0,1,0,1,}},}},{2, {{232,{1,1,0,1,0,1,}},}},{3, {{232,{1,1,0,1,0,1,}},}},},
    {{3, {{663,{}},}},},
    {{1, {{224,{1,1,0,1,1,}},}},{2, {{224,{1,1,0,1,1,}},}},{3, {{224,{1,1,0,1,1,}},}},},
    {{21, {{117,{}},}},{28, {{695,{}},}},{43, {{1009,{}},}},{45, {{1011,{}},}},{48, {{1013,{}},}},{60, {{1015,{}},}},{61, {{1017,{}},}},{62, {{1019,{}},}},{63, {{1021,{}},}},{66, {{697,{}},}},},
    {{3, {{665,{}},}},{5, {{119,{}},}},},
    {{5, {{897,{}},}},{68, {{667,{}},}},},
    {{5, {{222,{1,}},}},},
    {{3, {{669,{}},}},{5, {{119,{}},}},},
    {{3, {{58,{1,1,1,1,1,}},}},},
    {{3, {{142,{1,1,0,0,1,}},}},},
    {{2, {{89,{}},}},{3, {{671,{}},}},{101, {{1049,{}},}},{104, {{1051,{}},}},{111, {{673,{}},}},},
    {{3, {{675,{}},}},},
    {{6, {{903,{}},}},{93, {{757,{}},}},{108, {{677,{}},}},{113, {{787,{}},}},},
    {{3, {{679,{}},}},},
    {{6, {{903,{}},}},{93, {{681,{}},}},{113, {{787,{}},}},},
    {{3, {{683,{}},}},},
    {{2, {{64,{1,}},}},{3, {{64,{1,}},}},{5, {{64,{1,}},}},{6, {{64,{1,}},}},{16, {{64,{1,}},}},{18, {{64,{1,}},}},{19, {{64,{1,}},}},{27, {{64,{1,}},}},{32, {{64,{1,}},}},{38, {{64,{1,}},}},{39, {{64,{1,}},}},{40, {{64,{1,}},}},{41, {{64,{1,}},}},{42, {{64,{1,}},}},{65, {{64,{1,}},}},},
    {{3, {{685,{}},}},},
    {{2, {{257,{}},}},{16, {{1089,{}},}},{18, {{1091,{}},}},{65, {{1093,{}},}},{82, {{687,{}},}},{114, {{1097,{}},}},},
    {{2, {{48,{0,1,1,1,1,1,}},}},{3, {{48,{0,1,1,1,1,1,}},}},{32, {{48,{0,1,1,1,1,1,}},}},{38, {{48,{0,1,1,1,1,1,}},}},{39, {{48,{0,1,1,1,1,1,}},}},{40, {{48,{0,1,1,1,1,1,}},}},{41, {{48,{0,1,1,1,1,1,}},}},{42, {{48,{0,1,1,1,1,1,}},}},},
    {{2, {{89,{}},}},{3, {{166,{1,1,1,1,1,0,}},}},{32, {{166,{1,1,1,1,1,0,}},}},{38, {{166,{1,1,1,1,1,0,}},}},{39, {{166,{1,1,1,1,1,0,}},}},{40, {{166,{1,1,1,1,1,0,}},}},{41, {{166,{1,1,1,1,1,0,}},}},{42, {{166,{1,1,1,1,1,0,}},}},{94, {{689,{}},}},},
    {{3, {{168,{1,1,1,1,1,}},}},{32, {{168,{1,1,1,1,1,}},}},{38, {{168,{1,1,1,1,1,}},}},{39, {{168,{1,1,1,1,1,}},}},{40, {{168,{1,1,1,1,1,}},}},{41, {{168,{1,1,1,1,1,}},}},{42, {{168,{1,1,1,1,1,}},}},},
    {{3, {{44,{0,1,}},}},{16, {{44,{0,1,}},}},{18, {{44,{0,1,}},}},{65, {{44,{0,1,}},}},},
    {{3, {{84,{1,}},}},},
    {{3, {{691,{}},}},},
    {{3, {{82,{1,}},}},},
    {{3, {{693,{}},}},},
    {{2, {{50,{1,1,1,1,1,}},}},{3, {{50,{1,1,1,1,1,}},}},{32, {{50,{1,1,1,1,1,}},}},{38, {{50,{1,1,1,1,1,}},}},{39, {{50,{1,1,1,1,1,}},}},{40, {{50,{1,1,1,1,1,}},}},{41, {{50,{1,1,1,1,1,}},}},{42, {{50,{1,1,1,1,1,}},}},},
    {{2, {{54,{1,1,1,1,1,}},}},{3, {{54,{1,1,1,1,1,}},}},{32, {{54,{1,1,1,1,1,}},}},{38, {{54,{1,1,1,1,1,}},}},{39, {{54,{1,1,1,1,1,}},}},{40, {{54,{1,1,1,1,1,}},}},{41, {{54,{1,1,1,1,1,}},}},{42, {{54,{1,1,1,1,1,}},}},},
    {{6, {{158,{1,1,1,1,1,}},}},},
    {{2, {{162,{1,1,1,1,1,}},}},{3, {{162,{1,1,1,1,1,}},}},{6, {{162,{1,1,1,1,1,}},}},{16, {{162,{1,1,1,1,1,}},}},{18, {{162,{1,1,1,1,1,}},}},{32, {{162,{1,1,1,1,1,}},}},{38, {{162,{1,1,1,1,1,}},}},{39, {{162,{1,1,1,1,1,}},}},{40, {{162,{1,1,1,1,1,}},}},{41, {{162,{1,1,1,1,1,}},}},{42, {{162,{1,1,1,1,1,}},}},{65, {{162,{1,1,1,1,1,}},}},},
    {{16, {{212,{1,1,1,1,1,}},}},{18, {{212,{1,1,1,1,1,}},}},{19, {{212,{1,1,1,1,1,}},}},},
    {{2, {{196,{0,1,1,1,1,}},}},{3, {{196,{0,1,1,1,1,}},}},},
    {{3, {{699,{}},}},},
    {{2, {{194,{1,1,1,1,}},}},{3, {{194,{1,1,1,1,}},}},},
    {{5, {{220,{1,1,1,1,1,}},}},},
    {{1, {{68,{1,1,1,1,1,}},}},{2, {{68,{1,1,1,1,1,}},}},{3, {{68,{1,1,1,1,1,}},}},},
    {{19, {{287,{}},}},{20, {{289,{}},}},{21, {{291,{}},}},{22, {{293,{}},}},},
    {{3, {{701,{}},}},},
    {{4, {{1063,{}},}},{6, {{1069,{}},}},{77, {{703,{}},}},{112, {{1065,{}},}},},
    {{4, {{1001,{}},}},{6, {{1069,{}},}},{106, {{705,{}},}},{112, {{1003,{}},}},},
    {{4, {{707,{}},}},{6, {{1069,{}},}},{95, {{709,{}},}},{112, {{711,{}},}},},
    {{4, {{1067,{}},}},{6, {{1069,{}},}},{81, {{713,{}},}},{112, {{1071,{}},}},},
    {{5, {{715,{}},}},},
    {{5, {{717,{}},}},},
    {{1, {{176,{1,1,0,1,0,0,1,1,}},}},{2, {{176,{1,1,0,1,0,0,1,1,}},}},{3, {{176,{1,1,0,1,0,0,1,1,}},}},},
    {{1, {{176,{1,1,0,1,0,1,0,1,}},}},{2, {{176,{1,1,0,1,0,1,0,1,}},}},{3, {{176,{1,1,0,1,0,1,0,1,}},}},},
    {{3, {{719,{}},}},{32, {{939,{}},}},{38, {{941,{}},}},{39, {{943,{}},}},{40, {{945,{}},}},{41, {{947,{}},}},{42, {{949,{}},}},{102, {{91,{}},}},},
    {{1, {{176,{1,1,0,1,1,0,0,1,}},}},{2, {{176,{1,1,0,1,1,0,0,1,}},}},{3, {{176,{1,1,0,1,1,0,0,1,}},}},},
    {{3, {{721,{}},}},{32, {{939,{}},}},{38, {{941,{}},}},{39, {{943,{}},}},{40, {{945,{}},}},{41, {{947,{}},}},{42, {{949,{}},}},{102, {{91,{}},}},},
    {{3, {{723,{}},}},{32, {{939,{}},}},{38, {{941,{}},}},{39, {{943,{}},}},{40, {{945,{}},}},{41, {{947,{}},}},{42, {{949,{}},}},{90, {{725,{}},}},{102, {{861,{}},}},},
    {{5, {{727,{}},}},},
    {{11, {{309,{}},}},{12, {{729,{}},}},{14, {{73,{}},}},{15, {{75,{}},}},{24, {{77,{}},}},},
    {{1, {{176,{1,1,1,1,0,0,0,1,}},}},{2, {{176,{1,1,1,1,0,0,0,1,}},}},{3, {{176,{1,1,1,1,0,0,0,1,}},}},},
    {{3, {{731,{}},}},{32, {{939,{}},}},{38, {{941,{}},}},{39, {{943,{}},}},{40, {{945,{}},}},{41, {{947,{}},}},{42, {{949,{}},}},{102, {{91,{}},}},},
    {{3, {{733,{}},}},{32, {{939,{}},}},{38, {{941,{}},}},{39, {{943,{}},}},{40, {{945,{}},}},{41, {{947,{}},}},{42, {{949,{}},}},{90, {{735,{}},}},{102, {{861,{}},}},},
    {{2, {{89,{}},}},{3, {{737,{}},}},{32, {{939,{}},}},{38, {{941,{}},}},{39, {{943,{}},}},{40, {{945,{}},}},{41, {{947,{}},}},{42, {{949,{}},}},{90, {{739,{}},}},{94, {{741,{}},}},{102, {{861,{}},}},},
    {{1, {{176,{1,1,1,0,0,0,1,1,}},}},{2, {{176,{1,1,1,0,0,0,1,1,}},}},{3, {{176,{1,1,1,0,0,0,1,1,}},}},},
    {{1, {{176,{1,1,1,0,0,1,0,1,}},}},{2, {{176,{1,1,1,0,0,1,0,1,}},}},{3, {{176,{1,1,1,0,0,1,0,1,}},}},},
    {{3, {{743,{}},}},{32, {{939,{}},}},{38, {{941,{}},}},{39, {{943,{}},}},{40, {{945,{}},}},{41, {{947,{}},}},{42, {{949,{}},}},{102, {{91,{}},}},},
    {{1, {{176,{1,1,1,0,1,0,0,1,}},}},{2, {{176,{1,1,1,0,1,0,0,1,}},}},{3, {{176,{1,1,1,0,1,0,0,1,}},}},},
    {{3, {{745,{}},}},{32, {{939,{}},}},{38, {{941,{}},}},{39, {{943,{}},}},{40, {{945,{}},}},{41, {{947,{}},}},{42, {{949,{}},}},{102, {{91,{}},}},},
    {{3, {{747,{}},}},{32, {{939,{}},}},{38, {{941,{}},}},{39, {{943,{}},}},{40, {{945,{}},}},{41, {{947,{}},}},{42, {{949,{}},}},{90, {{749,{}},}},{102, {{861,{}},}},},
    {{1, {{176,{1,1,0,0,0,1,1,1,}},}},{2, {{176,{1,1,0,0,0,1,1,1,}},}},{3, {{176,{1,1,0,0,0,1,1,1,}},}},},
    {{1, {{176,{1,1,0,0,1,0,1,1,}},}},{2, {{176,{1,1,0,0,1,0,1,1,}},}},{3, {{176,{1,1,0,0,1,0,1,1,}},}},},
    {{1, {{176,{1,1,0,0,1,1,0,1,}},}},{2, {{176,{1,1,0,0,1,1,0,1,}},}},{3, {{176,{1,1,0,0,1,1,0,1,}},}},},
    {{3, {{751,{}},}},{32, {{939,{}},}},{38, {{941,{}},}},{39, {{943,{}},}},{40, {{945,{}},}},{41, {{947,{}},}},{42, {{949,{}},}},{102, {{91,{}},}},},
    {{3, {{753,{}},}},},
    {{25, {{755,{}},}},},
    {{1, {{180,{1,1,0,1,0,1,1,}},}},{2, {{180,{1,1,0,1,0,1,1,}},}},{3, {{180,{1,1,0,1,0,1,1,}},}},},
    {{6, {{903,{}},}},{93, {{757,{}},}},{108, {{759,{}},}},{113, {{787,{}},}},},
    {{2, {{761,{}},}},},
    {{3, {{763,{}},}},},
    {{3, {{765,{}},}},},
    {{25, {{767,{}},}},},
    {{1, {{180,{1,1,1,0,0,1,1,}},}},{2, {{180,{1,1,1,0,0,1,1,}},}},{3, {{180,{1,1,1,0,0,1,1,}},}},},
    {{1, {{180,{1,1,0,0,1,1,1,}},}},{2, {{180,{1,1,0,0,1,1,1,}},}},{3, {{180,{1,1,0,0,1,1,1,}},}},},
    {{2, {{957,{}},}},{3, {{769,{}},}},{4, {{1063,{}},}},{6, {{1069,{}},}},{70, {{771,{}},}},{77, {{961,{}},}},{78, {{773,{}},}},{112, {{1065,{}},}},},
    {{3, {{775,{}},}},{5, {{119,{}},}},},
    {{5, {{897,{}},}},{68, {{777,{}},}},},
    {{3, {{779,{}},}},},
    {{1, {{186,{1,1,0,1,0,1,1,}},}},{2, {{186,{1,1,0,1,0,1,1,}},}},{3, {{186,{1,1,0,1,0,1,1,}},}},},
    {{5, {{897,{}},}},{68, {{781,{}},}},},
    {{6, {{903,{}},}},{93, {{785,{}},}},{113, {{787,{}},}},},
    {{3, {{789,{}},}},},
    {{3, {{791,{}},}},},
    {{1, {{186,{1,1,1,0,0,1,1,}},}},{2, {{186,{1,1,1,0,0,1,1,}},}},{3, {{186,{1,1,1,0,0,1,1,}},}},},
    {{1, {{186,{1,1,0,0,1,1,1,}},}},{2, {{186,{1,1,0,0,1,1,1,}},}},{3, {{186,{1,1,0,0,1,1,1,}},}},},
    {{5, {{793,{}},}},},
    {{5, {{795,{}},}},},
    {{3, {{797,{}},}},},
    {{1, {{190,{1,1,0,0,1,1,1,}},}},{2, {{190,{1,1,0,0,1,1,1,}},}},{3, {{190,{1,1,0,0,1,1,1,}},}},},
    {{5, {{799,{}},}},},
    {{12, {{801,{}},}},{23, {{107,{}},}},},
    {{43, {{1009,{}},}},{45, {{1011,{}},}},{48, {{1013,{}},}},{60, {{1015,{}},}},{61, {{1017,{}},}},{62, {{1019,{}},}},{63, {{1021,{}},}},{66, {{803,{}},}},},
    {{3, {{805,{}},}},},
    {{1, {{234,{1,1,0,1,1,1,}},}},{2, {{234,{1,1,0,1,1,1,}},}},{3, {{234,{1,1,0,1,1,1,}},}},},
    {{3, {{807,{}},}},},
    {{1, {{228,{1,1,1,1,1,}},}},{2, {{228,{1,1,1,1,1,}},}},{3, {{228,{1,1,1,1,1,}},}},},
    {{1, {{232,{1,1,1,1,0,1,}},}},{2, {{232,{1,1,1,1,0,1,}},}},{3, {{232,{1,1,1,1,0,1,}},}},},
    {{3, {{809,{}},}},{4, {{1063,{}},}},{6, {{1069,{}},}},{77, {{201,{}},}},{112, {{1065,{}},}},},
    {{3, {{206,{1,0,}},}},{4, {{1063,{}},}},{6, {{1069,{}},}},{77, {{961,{}},}},{78, {{113,{}},}},{112, {{1065,{}},}},},
    {{3, {{811,{}},}},},
    {{2, {{957,{}},}},{3, {{204,{1,0,}},}},{70, {{115,{}},}},},
    {{1, {{232,{1,1,0,1,1,1,}},}},{2, {{232,{1,1,0,1,1,1,}},}},{3, {{232,{1,1,0,1,1,1,}},}},},
    {{1, {{230,{1,1,0,1,1,1,}},}},{2, {{230,{1,1,0,1,1,1,}},}},{3, {{230,{1,1,0,1,1,1,}},}},},
    {{1, {{224,{1,1,1,1,1,}},}},{2, {{224,{1,1,1,1,1,}},}},{3, {{224,{1,1,1,1,1,}},}},},
    {{3, {{813,{}},}},{5, {{119,{}},}},},
    {{1, {{226,{1,1,0,1,1,1,}},}},{2, {{226,{1,1,0,1,1,1,}},}},{3, {{226,{1,1,0,1,1,1,}},}},},
    {{3, {{142,{1,1,1,0,1,}},}},},
    {{3, {{815,{}},}},},
    {{3, {{142,{1,1,0,1,1,}},}},},
    {{3, {{817,{}},}},},
    {{3, {{144,{1,1,0,1,1,}},}},},
    {{3, {{819,{}},}},},
    {{3, {{146,{1,1,0,1,1,}},}},},
    {{3, {{148,{1,1,0,1,1,}},}},},
    {{3, {{821,{}},}},},
    {{3, {{166,{1,1,1,1,1,1,}},}},{32, {{166,{1,1,1,1,1,1,}},}},{38, {{166,{1,1,1,1,1,1,}},}},{39, {{166,{1,1,1,1,1,1,}},}},{40, {{166,{1,1,1,1,1,1,}},}},{41, {{166,{1,1,1,1,1,1,}},}},{42, {{166,{1,1,1,1,1,1,}},}},},
    {{2, {{89,{}},{110,{1,1,1,1,0,0,}},}},{3, {{110,{1,1,1,1,0,0,}},}},{32, {{110,{1,1,1,1,0,0,}},}},{38, {{110,{1,1,1,1,0,0,}},}},{39, {{110,{1,1,1,1,0,0,}},}},{40, {{110,{1,1,1,1,0,0,}},}},{41, {{110,{1,1,1,1,0,0,}},}},{42, {{110,{1,1,1,1,0,0,}},}},{101, {{823,{}},}},{104, {{825,{}},}},},
    {{2, {{48,{1,1,1,1,1,1,}},}},{3, {{48,{1,1,1,1,1,1,}},}},{32, {{48,{1,1,1,1,1,1,}},}},{38, {{48,{1,1,1,1,1,1,}},}},{39, {{48,{1,1,1,1,1,1,}},}},{40, {{48,{1,1,1,1,1,1,}},}},{41, {{48,{1,1,1,1,1,1,}},}},{42, {{48,{1,1,1,1,1,1,}},}},},
    {{43, {{1009,{}},}},{45, {{1011,{}},}},{48, {{1013,{}},}},{60, {{1015,{}},}},{61, {{1017,{}},}},{62, {{1019,{}},}},{63, {{1021,{}},}},{66, {{827,{}},}},},
    {{3, {{829,{}},}},},
    {{2, {{196,{1,1,1,1,1,}},}},{3, {{196,{1,1,1,1,1,}},}},},
    {{1, {{140,{1,1,1,1,1,1,}},}},{2, {{140,{1,1,1,1,1,1,}},}},{3, {{140,{1,1,1,1,1,1,}},}},},
    {{3, {{835,{}},}},},
    {{3, {{837,{}},}},},
    {{3, {{104,{1,}},}},},
    {{3, {{839,{}},}},},
    {{3, {{102,{1,}},}},},
    {{3, {{841,{}},}},},
    {{3, {{843,{}},}},},
    {{5, {{845,{}},}},},
    {{1, {{176,{1,1,0,1,0,1,1,1,}},}},{2, {{176,{1,1,0,1,0,1,1,1,}},}},{3, {{176,{1,1,0,1,0,1,1,1,}},}},},
    {{1, {{176,{1,1,0,1,1,0,1,1,}},}},{2, {{176,{1,1,0,1,1,0,1,1,}},}},{3, {{176,{1,1,0,1,1,0,1,1,}},}},},
    {{1, {{176,{1,1,0,1,1,1,0,1,}},}},{2, {{176,{1,1,0,1,1,1,0,1,}},}},{3, {{176,{1,1,0,1,1,1,0,1,}},}},},
    {{3, {{847,{}},}},{32, {{939,{}},}},{38, {{941,{}},}},{39, {{943,{}},}},{40, {{945,{}},}},{41, {{947,{}},}},{42, {{949,{}},}},{102, {{91,{}},}},},
    {{5, {{849,{}},}},},
    {{5, {{851,{}},}},},
    {{1, {{176,{1,1,1,1,0,0,1,1,}},}},{2, {{176,{1,1,1,1,0,0,1,1,}},}},{3, {{176,{1,1,1,1,0,0,1,1,}},}},},
    {{1, {{176,{1,1,1,1,0,1,0,1,}},}},{2, {{176,{1,1,1,1,0,1,0,1,}},}},{3, {{176,{1,1,1,1,0,1,0,1,}},}},},
    {{3, {{853,{}},}},{32, {{939,{}},}},{38, {{941,{}},}},{39, {{943,{}},}},{40, {{945,{}},}},{41, {{947,{}},}},{42, {{949,{}},}},{102, {{91,{}},}},},
    {{1, {{176,{1,1,1,1,1,0,0,1,}},}},{2, {{176,{1,1,1,1,1,0,0,1,}},}},{3, {{176,{1,1,1,1,1,0,0,1,}},}},},
    {{3, {{855,{}},}},{32, {{939,{}},}},{38, {{941,{}},}},{39, {{943,{}},}},{40, {{945,{}},}},{41, {{947,{}},}},{42, {{949,{}},}},{102, {{91,{}},}},},
    {{3, {{857,{}},}},{32, {{939,{}},}},{38, {{941,{}},}},{39, {{943,{}},}},{40, {{945,{}},}},{41, {{947,{}},}},{42, {{949,{}},}},{90, {{859,{}},}},{102, {{861,{}},}},},
    {{1, {{176,{1,1,1,0,0,1,1,1,}},}},{2, {{176,{1,1,1,0,0,1,1,1,}},}},{3, {{176,{1,1,1,0,0,1,1,1,}},}},},
    {{1, {{176,{1,1,1,0,1,0,1,1,}},}},{2, {{176,{1,1,1,0,1,0,1,1,}},}},{3, {{176,{1,1,1,0,1,0,1,1,}},}},},
    {{1, {{176,{1,1,1,0,1,1,0,1,}},}},{2, {{176,{1,1,1,0,1,1,0,1,}},}},{3, {{176,{1,1,1,0,1,1,0,1,}},}},},
    {{3, {{863,{}},}},{32, {{939,{}},}},{38, {{941,{}},}},{39, {{943,{}},}},{40, {{945,{}},}},{41, {{947,{}},}},{42, {{949,{}},}},{102, {{91,{}},}},},
    {{1, {{176,{1,1,0,0,1,1,1,1,}},}},{2, {{176,{1,1,0,0,1,1,1,1,}},}},{3, {{176,{1,1,0,0,1,1,1,1,}},}},},
    {{1, {{180,{1,1,0,1,1,1,1,}},}},{2, {{180,{1,1,0,1,1,1,1,}},}},{3, {{180,{1,1,0,1,1,1,1,}},}},},
    {{2, {{957,{}},}},{3, {{865,{}},}},{4, {{1063,{}},}},{6, {{1069,{}},}},{70, {{867,{}},}},{77, {{961,{}},}},{78, {{869,{}},}},{112, {{1065,{}},}},},
    {{16, {{871,{}},}},{18, {{873,{}},}},{103, {{99,{}},}},},
    {{3, {{875,{}},}},},
    {{25, {{877,{}},}},},
    {{1, {{180,{1,1,1,1,0,1,1,}},}},{2, {{180,{1,1,1,1,0,1,1,}},}},{3, {{180,{1,1,1,1,0,1,1,}},}},},
    {{1, {{180,{1,1,1,0,1,1,1,}},}},{2, {{180,{1,1,1,0,1,1,1,}},}},{3, {{180,{1,1,1,0,1,1,1,}},}},},
    {{2, {{957,{}},}},{3, {{879,{}},}},{4, {{1063,{}},}},{6, {{1069,{}},}},{70, {{881,{}},}},{77, {{961,{}},}},{78, {{883,{}},}},{112, {{1065,{}},}},},
    {{3, {{885,{}},}},},
    {{2, {{207,{}},}},{3, {{887,{}},}},},
    {{3, {{889,{}},}},{4, {{1063,{}},}},{6, {{1069,{}},}},{77, {{201,{}},}},{112, {{1065,{}},}},},
    {{3, {{891,{}},}},},
    {{3, {{893,{}},}},{5, {{119,{}},}},},
    {{1, {{186,{1,1,0,1,1,1,1,}},}},{2, {{186,{1,1,0,1,1,1,1,}},}},{3, {{186,{1,1,0,1,1,1,1,}},}},},
    {{3, {{895,{}},}},{5, {{119,{}},}},},
    {{5, {{897,{}},}},{68, {{899,{}},}},},
    {{3, {{901,{}},}},},
    {{3, {{116,{1,}},}},{6, {{903,{}},}},{16, {{116,{1,}},}},{18, {{116,{1,}},}},{113, {{101,{}},}},},
    {{1, {{186,{1,1,1,1,0,1,1,}},}},{2, {{186,{1,1,1,1,0,1,1,}},}},{3, {{186,{1,1,1,1,0,1,1,}},}},},
    {{1, {{186,{1,1,1,0,1,1,1,}},}},{2, {{186,{1,1,1,0,1,1,1,}},}},{3, {{186,{1,1,1,0,1,1,1,}},}},},
    {{3, {{905,{}},}},},
    {{5, {{907,{}},}},},
    {{1, {{190,{1,1,0,1,1,1,1,}},}},{2, {{190,{1,1,0,1,1,1,1,}},}},{3, {{190,{1,1,0,1,1,1,1,}},}},},
    {{5, {{909,{}},}},},
    {{5, {{911,{}},}},},
    {{3, {{913,{}},}},},
    {{1, {{190,{1,1,1,0,1,1,1,}},}},{2, {{190,{1,1,1,0,1,1,1,}},}},{3, {{190,{1,1,1,0,1,1,1,}},}},},
    {{1, {{234,{1,1,1,1,1,1,}},}},{2, {{234,{1,1,1,1,1,1,}},}},{3, {{234,{1,1,1,1,1,1,}},}},},
    {{1, {{232,{1,1,1,1,1,1,}},}},{2, {{232,{1,1,1,1,1,1,}},}},{3, {{232,{1,1,1,1,1,1,}},}},},
    {{1, {{230,{1,1,1,1,1,1,}},}},{2, {{230,{1,1,1,1,1,1,}},}},{3, {{230,{1,1,1,1,1,1,}},}},},
    {{1, {{226,{1,1,1,1,1,1,}},}},{2, {{226,{1,1,1,1,1,1,}},}},{3, {{226,{1,1,1,1,1,1,}},}},},
    {{3, {{142,{1,1,1,1,1,}},}},},
    {{3, {{144,{1,1,1,1,1,}},}},},
    {{3, {{146,{1,1,1,1,1,}},}},},
    {{3, {{148,{1,1,1,1,1,}},}},},
    {{2, {{93,{}},{110,{1,1,1,1,1,0,}},}},{3, {{110,{1,1,1,1,1,0,}},}},{32, {{110,{1,1,1,1,1,0,}},}},{38, {{110,{1,1,1,1,1,0,}},}},{39, {{110,{1,1,1,1,1,0,}},}},{40, {{110,{1,1,1,1,1,0,}},}},{41, {{110,{1,1,1,1,1,0,}},}},{42, {{110,{1,1,1,1,1,0,}},}},{104, {{915,{}},}},},
    {{2, {{95,{}},{110,{1,1,1,1,0,1,}},}},{3, {{110,{1,1,1,1,0,1,}},}},{32, {{110,{1,1,1,1,0,1,}},}},{38, {{110,{1,1,1,1,0,1,}},}},{39, {{110,{1,1,1,1,0,1,}},}},{40, {{110,{1,1,1,1,0,1,}},}},{41, {{110,{1,1,1,1,0,1,}},}},{42, {{110,{1,1,1,1,0,1,}},}},},
    {{3, {{917,{}},}},},
    {{3, {{210,{1,1,1,}},}},{4, {{210,{1,1,1,}},}},{5, {{210,{1,1,1,}},}},{6, {{210,{1,1,1,}},}},{16, {{210,{1,1,1,}},}},{18, {{210,{1,1,1,}},}},{19, {{210,{1,1,1,}},}},},
    {{2, {{207,{}},}},{3, {{1025,{}},}},},
    {{3, {{1027,{}},}},{4, {{1063,{}},}},{6, {{1069,{}},}},{77, {{201,{}},}},{112, {{1065,{}},}},},
    {{3, {{919,{}},}},},
    {{3, {{921,{}},}},},
    {{3, {{923,{}},}},},
    {{3, {{925,{}},}},},
    {{2, {{89,{}},}},{3, {{927,{}},}},{101, {{1049,{}},}},{104, {{1051,{}},}},{111, {{929,{}},}},},
    {{3, {{931,{}},}},},
    {{1, {{176,{1,1,0,1,1,1,1,1,}},}},{2, {{176,{1,1,0,1,1,1,1,1,}},}},{3, {{176,{1,1,0,1,1,1,1,1,}},}},},
    {{3, {{933,{}},}},},
    {{5, {{935,{}},}},},
    {{1, {{176,{1,1,1,1,0,1,1,1,}},}},{2, {{176,{1,1,1,1,0,1,1,1,}},}},{3, {{176,{1,1,1,1,0,1,1,1,}},}},},
    {{1, {{176,{1,1,1,1,1,0,1,1,}},}},{2, {{176,{1,1,1,1,1,0,1,1,}},}},{3, {{176,{1,1,1,1,1,0,1,1,}},}},},
    {{1, {{176,{1,1,1,1,1,1,0,1,}},}},{2, {{176,{1,1,1,1,1,1,0,1,}},}},{3, {{176,{1,1,1,1,1,1,0,1,}},}},},
    {{3, {{937,{}},}},{32, {{939,{}},}},{38, {{941,{}},}},{39, {{943,{}},}},{40, {{945,{}},}},{41, {{947,{}},}},{42, {{949,{}},}},{102, {{91,{}},}},},
    {{3, {{172,{0,1,}},}},{32, {{172,{0,1,}},}},{38, {{172,{0,1,}},}},{39, {{172,{0,1,}},}},{40, {{172,{0,1,}},}},{41, {{172,{0,1,}},}},{42, {{172,{0,1,}},}},},
    {{1, {{176,{1,1,1,0,1,1,1,1,}},}},{2, {{176,{1,1,1,0,1,1,1,1,}},}},{3, {{176,{1,1,1,0,1,1,1,1,}},}},},
    {{3, {{951,{}},}},},
    {{2, {{207,{}},}},{3, {{953,{}},}},},
    {{3, {{955,{}},}},{4, {{1063,{}},}},{6, {{1069,{}},}},{77, {{201,{}},}},{112, {{1065,{}},}},},
    {{2, {{40,{1,}},}},{3, {{40,{1,}},}},},
    {{2, {{42,{1,}},}},{3, {{42,{1,}},}},},
    {{1, {{180,{1,1,1,1,1,1,1,}},}},{2, {{180,{1,1,1,1,1,1,1,}},}},{3, {{180,{1,1,1,1,1,1,1,}},}},},
    {{2, {{957,{}},}},{3, {{959,{}},}},{4, {{1063,{}},}},{6, {{1069,{}},}},{70, {{831,{}},}},{77, {{961,{}},}},{78, {{833,{}},}},{112, {{1065,{}},}},},
    {{3, {{963,{}},}},},
    {{2, {{207,{}},}},{3, {{965,{}},}},},
    {{3, {{967,{}},}},{4, {{1063,{}},}},{6, {{1069,{}},}},{77, {{201,{}},}},{112, {{1065,{}},}},},
    {{1, {{182,{1,1,0,0,1,1,1,0,1,1,}},}},{2, {{182,{1,1,0,0,1,1,1,0,1,1,}},}},{3, {{182,{1,1,0,0,1,1,1,0,1,1,}},}},},
    {{3, {{969,{}},}},},
    {{3, {{971,{}},}},},
    {{1, {{188,{1,1,0,0,1,1,1,1,1,}},}},{2, {{188,{1,1,0,0,1,1,1,1,1,}},}},{3, {{188,{1,1,0,0,1,1,1,1,1,}},}},},
    {{3, {{973,{}},}},},
    {{3, {{975,{}},}},},
    {{3, {{218,{1,}},}},{5, {{218,{1,}},}},},
    {{3, {{977,{}},}},{5, {{119,{}},}},},
    {{1, {{186,{1,1,1,1,1,1,1,}},}},{2, {{186,{1,1,1,1,1,1,1,}},}},{3, {{186,{1,1,1,1,1,1,1,}},}},},
    {{3, {{72,{1,}},}},{6, {{72,{1,}},}},{16, {{72,{1,}},}},{18, {{72,{1,}},}},},
    {{2, {{257,{}},}},{16, {{1089,{}},}},{18, {{1091,{}},}},{65, {{1093,{}},}},{82, {{979,{}},}},{114, {{1097,{}},}},},
    {{3, {{981,{}},}},},
    {{3, {{983,{}},}},},
    {{5, {{985,{}},}},},
    {{1, {{190,{1,1,1,1,1,1,1,}},}},{2, {{190,{1,1,1,1,1,1,1,}},}},{3, {{190,{1,1,1,1,1,1,1,}},}},},
    {{2, {{95,{}},{110,{1,1,1,1,1,1,}},}},{3, {{110,{1,1,1,1,1,1,}},}},{32, {{110,{1,1,1,1,1,1,}},}},{38, {{110,{1,1,1,1,1,1,}},}},{39, {{110,{1,1,1,1,1,1,}},}},{40, {{110,{1,1,1,1,1,1,}},}},{41, {{110,{1,1,1,1,1,1,}},}},{42, {{110,{1,1,1,1,1,1,}},}},},
    {{3, {{208,{1,1,1,1,}},}},{4, {{208,{1,1,1,1,}},}},{5, {{208,{1,1,1,1,}},}},{6, {{208,{1,1,1,1,}},}},{16, {{208,{1,1,1,1,}},}},{18, {{208,{1,1,1,1,}},}},{19, {{208,{1,1,1,1,}},}},},
    {{1, {{150,{1,1,1,1,1,1,1,1,}},}},{2, {{150,{1,1,1,1,1,1,1,1,}},}},{3, {{150,{1,1,1,1,1,1,1,1,}},}},},
    {{1, {{152,{1,1,1,1,1,1,1,1,}},}},{2, {{152,{1,1,1,1,1,1,1,1,}},}},{3, {{152,{1,1,1,1,1,1,1,1,}},}},},
    {{1, {{154,{1,1,1,1,1,1,1,1,}},}},{2, {{154,{1,1,1,1,1,1,1,1,}},}},{3, {{154,{1,1,1,1,1,1,1,1,}},}},},
    {{1, {{156,{1,1,1,1,1,1,1,1,}},}},{2, {{156,{1,1,1,1,1,1,1,1,}},}},{3, {{156,{1,1,1,1,1,1,1,1,}},}},},
    {{1, {{178,{1,1,0,0,1,1,1,1,1,0,1,}},}},{2, {{178,{1,1,0,0,1,1,1,1,1,0,1,}},}},{3, {{178,{1,1,0,0,1,1,1,1,1,0,1,}},}},},
    {{3, {{987,{}},}},},
    {{2, {{89,{}},}},{3, {{989,{}},}},{101, {{1049,{}},}},{104, {{1051,{}},}},{111, {{991,{}},}},},
    {{2, {{89,{}},}},{3, {{993,{}},}},{101, {{1049,{}},}},{104, {{1051,{}},}},{111, {{995,{}},}},},
    {{3, {{997,{}},}},},
    {{1, {{176,{1,1,1,1,1,1,1,1,}},}},{2, {{176,{1,1,1,1,1,1,1,1,}},}},{3, {{176,{1,1,1,1,1,1,1,1,}},}},},
    {{3, {{236,{1,}},}},{32, {{236,{1,}},}},{38, {{236,{1,}},}},{39, {{236,{1,}},}},{40, {{236,{1,}},}},{41, {{236,{1,}},}},{42, {{236,{1,}},}},},
    {{4, {{1055,{}},}},{6, {{1069,{}},}},{91, {{79,{}},}},{112, {{1057,{}},}},},
    {{4, {{1055,{}},}},{6, {{1069,{}},}},{91, {{81,{}},}},{112, {{1057,{}},}},},
    {{4, {{1055,{}},}},{6, {{1069,{}},}},{91, {{999,{}},}},{92, {{171,{}},}},{112, {{1057,{}},}},},
    {{4, {{1063,{}},}},{6, {{1069,{}},}},{77, {{83,{}},}},{112, {{1065,{}},}},},
    {{2, {{89,{}},}},{3, {{248,{1,0,}},}},{4, {{1001,{}},}},{6, {{1069,{}},}},{32, {{248,{1,0,}},}},{38, {{248,{1,0,}},}},{39, {{248,{1,0,}},}},{40, {{248,{1,0,}},}},{41, {{248,{1,0,}},}},{42, {{248,{1,0,}},}},{101, {{1049,{}},}},{104, {{1051,{}},}},{106, {{85,{}},}},{111, {{87,{}},}},{112, {{1003,{}},}},},
    {{1, {{182,{1,1,0,1,1,1,1,0,1,1,}},}},{2, {{182,{1,1,0,1,1,1,1,0,1,1,}},}},{3, {{182,{1,1,0,1,1,1,1,0,1,1,}},}},},
    {{3, {{1005,{}},}},},
    {{3, {{1007,{}},}},},
    {{26, {{203,{}},}},{43, {{1009,{}},}},{45, {{1011,{}},}},{48, {{1013,{}},}},{60, {{1015,{}},}},{61, {{1017,{}},}},{62, {{1019,{}},}},{63, {{1021,{}},}},{66, {{205,{}},}},},
    {{3, {{1023,{}},}},},
    {{3, {{200,{0,1,}},}},{4, {{200,{0,1,}},}},{6, {{200,{0,1,}},}},},
    {{1, {{182,{1,1,1,0,1,1,1,0,1,1,}},}},{2, {{182,{1,1,1,0,1,1,1,0,1,1,}},}},{3, {{182,{1,1,1,0,1,1,1,0,1,1,}},}},},
    {{3, {{1029,{}},}},},
    {{3, {{1031,{}},}},},
    {{1, {{182,{1,1,0,0,1,1,1,1,1,1,}},}},{2, {{182,{1,1,0,0,1,1,1,1,1,1,}},}},{3, {{182,{1,1,0,0,1,1,1,1,1,1,}},}},},
    {{1, {{184,{1,1,0,0,1,1,1,1,1,1,}},}},{2, {{184,{1,1,0,0,1,1,1,1,1,1,}},}},{3, {{184,{1,1,0,0,1,1,1,1,1,1,}},}},},
    {{1, {{188,{1,1,0,1,1,1,1,1,1,}},}},{2, {{188,{1,1,0,1,1,1,1,1,1,}},}},{3, {{188,{1,1,0,1,1,1,1,1,1,}},}},},
    {{1, {{188,{1,1,1,0,1,1,1,1,1,}},}},{2, {{188,{1,1,1,0,1,1,1,1,1,}},}},{3, {{188,{1,1,1,0,1,1,1,1,1,}},}},},
    {{3, {{1033,{}},}},},
    {{3, {{1035,{}},}},},
    {{2, {{257,{}},}},{16, {{1089,{}},}},{18, {{1091,{}},}},{65, {{1093,{}},}},{82, {{1037,{}},}},{114, {{1097,{}},}},},
    {{2, {{257,{}},}},{16, {{1089,{}},}},{18, {{1091,{}},}},{65, {{1093,{}},}},{82, {{1039,{}},}},{114, {{1097,{}},}},},
    {{3, {{1041,{}},}},},
    {{1, {{178,{1,1,0,0,1,1,1,1,1,1,1,}},}},{2, {{178,{1,1,0,0,1,1,1,1,1,1,1,}},}},{3, {{178,{1,1,0,0,1,1,1,1,1,1,1,}},}},},
    {{1, {{178,{1,1,0,1,1,1,1,1,1,0,1,}},}},{2, {{178,{1,1,0,1,1,1,1,1,1,0,1,}},}},{3, {{178,{1,1,0,1,1,1,1,1,1,0,1,}},}},},
    {{3, {{1043,{}},}},},
    {{1, {{178,{1,1,1,0,1,1,1,1,1,0,1,}},}},{2, {{178,{1,1,1,0,1,1,1,1,1,0,1,}},}},{3, {{178,{1,1,1,0,1,1,1,1,1,0,1,}},}},},
    {{3, {{1045,{}},}},},
    {{2, {{89,{}},}},{3, {{1047,{}},}},{101, {{1049,{}},}},{104, {{1051,{}},}},{111, {{1053,{}},}},},
    {{3, {{92,{1,}},}},{4, {{92,{1,}},}},{6, {{92,{1,}},}},{32, {{92,{1,}},}},{38, {{92,{1,}},}},{39, {{92,{1,}},}},{40, {{92,{1,}},}},{41, {{92,{1,}},}},{42, {{92,{1,}},}},},
    {{2, {{100,{1,}},}},{3, {{100,{1,}},}},{32, {{100,{1,}},}},{38, {{100,{1,}},}},{39, {{100,{1,}},}},{40, {{100,{1,}},}},{41, {{100,{1,}},}},{42, {{100,{1,}},}},},
    {{2, {{98,{1,}},}},{3, {{98,{1,}},}},{32, {{98,{1,}},}},{38, {{98,{1,}},}},{39, {{98,{1,}},}},{40, {{98,{1,}},}},{41, {{98,{1,}},}},{42, {{98,{1,}},}},},
    {{1, {{182,{1,1,0,1,1,1,1,1,1,1,}},}},{2, {{182,{1,1,0,1,1,1,1,1,1,1,}},}},{3, {{182,{1,1,0,1,1,1,1,1,1,1,}},}},},
    {{1, {{184,{1,1,0,1,1,1,1,1,1,1,}},}},{2, {{184,{1,1,0,1,1,1,1,1,1,1,}},}},{3, {{184,{1,1,0,1,1,1,1,1,1,1,}},}},},
    {{17, {{1059,{}},}},{19, {{1061,{}},}},{83, {{185,{}},}},},
    {{4, {{1063,{}},}},{6, {{1069,{}},}},{77, {{187,{}},}},{112, {{1065,{}},}},},
    {{4, {{1067,{}},}},{6, {{1069,{}},}},{81, {{189,{}},}},{112, {{1071,{}},}},},
    {{6, {{1073,{}},}},{84, {{191,{}},}},},
    {{6, {{1075,{}},}},{85, {{193,{}},}},},
    {{7, {{1077,{}},}},{74, {{195,{}},}},},
    {{7, {{1079,{}},}},{75, {{197,{}},}},},
    {{1, {{182,{1,1,1,1,1,1,1,0,1,1,}},}},{2, {{182,{1,1,1,1,1,1,1,0,1,1,}},}},{3, {{182,{1,1,1,1,1,1,1,0,1,1,}},}},},
    {{3, {{1081,{}},}},},
    {{3, {{1083,{}},}},},
    {{1, {{182,{1,1,1,0,1,1,1,1,1,1,}},}},{2, {{182,{1,1,1,0,1,1,1,1,1,1,}},}},{3, {{182,{1,1,1,0,1,1,1,1,1,1,}},}},},
    {{1, {{184,{1,1,1,0,1,1,1,1,1,1,}},}},{2, {{184,{1,1,1,0,1,1,1,1,1,1,}},}},{3, {{184,{1,1,1,0,1,1,1,1,1,1,}},}},},
    {{1, {{188,{1,1,1,1,1,1,1,1,1,}},}},{2, {{188,{1,1,1,1,1,1,1,1,1,}},}},{3, {{188,{1,1,1,1,1,1,1,1,1,}},}},},
    {{1, {{192,{1,1,0,0,1,1,1,1,1,1,1,}},}},{2, {{192,{1,1,0,0,1,1,1,1,1,1,1,}},}},{3, {{192,{1,1,0,0,1,1,1,1,1,1,1,}},}},},
    {{3, {{1085,{}},}},},
    {{3, {{1087,{}},}},},
    {{2, {{257,{}},}},{16, {{1089,{}},}},{18, {{1091,{}},}},{65, {{1093,{}},}},{82, {{1095,{}},}},{114, {{1097,{}},}},},
    {{1, {{178,{1,1,0,1,1,1,1,1,1,1,1,}},}},{2, {{178,{1,1,0,1,1,1,1,1,1,1,1,}},}},{3, {{178,{1,1,0,1,1,1,1,1,1,1,1,}},}},},
    {{1, {{178,{1,1,1,0,1,1,1,1,1,1,1,}},}},{2, {{178,{1,1,1,0,1,1,1,1,1,1,1,}},}},{3, {{178,{1,1,1,0,1,1,1,1,1,1,1,}},}},},
    {{1, {{178,{1,1,1,1,1,1,1,1,1,0,1,}},}},{2, {{178,{1,1,1,1,1,1,1,1,1,0,1,}},}},{3, {{178,{1,1,1,1,1,1,1,1,1,0,1,}},}},},
    {{2, {{93,{}},{112,{1,0,}},}},{3, {{112,{1,0,}},}},{32, {{112,{1,0,}},}},{38, {{112,{1,0,}},}},{39, {{112,{1,0,}},}},{40, {{112,{1,0,}},}},{41, {{112,{1,0,}},}},{42, {{112,{1,0,}},}},{104, {{311,{}},}},},
    {{2, {{95,{}},{112,{0,1,}},}},{3, {{112,{0,1,}},}},{32, {{112,{0,1,}},}},{38, {{112,{0,1,}},}},{39, {{112,{0,1,}},}},{40, {{112,{0,1,}},}},{41, {{112,{0,1,}},}},{42, {{112,{0,1,}},}},},
    {{3, {{1099,{}},}},},
    {{3, {{88,{1,}},}},{4, {{88,{1,}},}},{6, {{88,{1,}},}},{32, {{88,{1,}},}},{38, {{88,{1,}},}},{39, {{88,{1,}},}},{40, {{88,{1,}},}},{41, {{88,{1,}},}},{42, {{88,{1,}},}},},
    {{3, {{86,{1,}},}},{4, {{86,{1,}},}},{6, {{86,{1,}},}},{32, {{86,{1,}},}},{38, {{86,{1,}},}},{39, {{86,{1,}},}},{40, {{86,{1,}},}},{41, {{86,{1,}},}},{42, {{86,{1,}},}},},
    {{3, {{62,{1,}},}},},
    {{3, {{60,{1,}},}},},
    {{3, {{96,{1,}},}},{4, {{96,{1,}},}},{6, {{96,{1,}},}},{32, {{96,{1,}},}},{38, {{96,{1,}},}},{39, {{96,{1,}},}},{40, {{96,{1,}},}},{41, {{96,{1,}},}},{42, {{96,{1,}},}},},
    {{3, {{94,{1,}},}},{4, {{94,{1,}},}},{6, {{94,{1,}},}},{32, {{94,{1,}},}},{38, {{94,{1,}},}},{39, {{94,{1,}},}},{40, {{94,{1,}},}},{41, {{94,{1,}},}},{42, {{94,{1,}},}},},
    {{3, {{108,{1,}},}},},
    {{2, {{70,{1,}},}},{3, {{70,{1,}},}},{4, {{70,{1,}},}},{6, {{70,{1,}},}},{32, {{70,{1,}},}},{38, {{70,{1,}},}},{39, {{70,{1,}},}},{40, {{70,{1,}},}},{41, {{70,{1,}},}},{42, {{70,{1,}},}},},
    {{3, {{106,{1,}},}},},
    {{3, {{74,{1,}},}},},
    {{3, {{76,{1,}},}},},
    {{3, {{78,{1,}},}},},
    {{3, {{80,{1,}},}},},
    {{1, {{182,{1,1,1,1,1,1,1,1,1,1,}},}},{2, {{182,{1,1,1,1,1,1,1,1,1,1,}},}},{3, {{182,{1,1,1,1,1,1,1,1,1,1,}},}},},
    {{1, {{184,{1,1,1,1,1,1,1,1,1,1,}},}},{2, {{184,{1,1,1,1,1,1,1,1,1,1,}},}},{3, {{184,{1,1,1,1,1,1,1,1,1,1,}},}},},
    {{1, {{192,{1,1,0,1,1,1,1,1,1,1,1,}},}},{2, {{192,{1,1,0,1,1,1,1,1,1,1,1,}},}},{3, {{192,{1,1,0,1,1,1,1,1,1,1,1,}},}},},
    {{1, {{192,{1,1,1,0,1,1,1,1,1,1,1,}},}},{2, {{192,{1,1,1,0,1,1,1,1,1,1,1,}},}},{3, {{192,{1,1,1,0,1,1,1,1,1,1,1,}},}},},
    {{3, {{36,{1,}},}},{16, {{36,{1,}},}},{18, {{36,{1,}},}},{43, {{36,{1,}},}},{45, {{36,{1,}},}},{48, {{36,{1,}},}},{60, {{36,{1,}},}},{61, {{36,{1,}},}},{62, {{36,{1,}},}},{63, {{36,{1,}},}},{65, {{36,{1,}},}},},
    {{3, {{38,{1,}},}},{16, {{38,{1,}},}},{18, {{38,{1,}},}},{43, {{38,{1,}},}},{45, {{38,{1,}},}},{48, {{38,{1,}},}},{60, {{38,{1,}},}},{61, {{38,{1,}},}},{62, {{38,{1,}},}},{63, {{38,{1,}},}},{65, {{38,{1,}},}},},
    {{3, {{34,{1,}},}},{16, {{34,{1,}},}},{18, {{34,{1,}},}},{43, {{34,{1,}},}},{45, {{34,{1,}},}},{48, {{34,{1,}},}},{60, {{34,{1,}},}},{61, {{34,{1,}},}},{62, {{34,{1,}},}},{63, {{34,{1,}},}},{65, {{34,{1,}},}},},
    {{3, {{1101,{}},}},},
    {{3, {{122,{1,}},}},{43, {{122,{1,}},}},{45, {{122,{1,}},}},{48, {{122,{1,}},}},{60, {{122,{1,}},}},{61, {{122,{1,}},}},{62, {{122,{1,}},}},{63, {{122,{1,}},}},},
    {{1, {{178,{1,1,1,1,1,1,1,1,1,1,1,}},}},{2, {{178,{1,1,1,1,1,1,1,1,1,1,1,}},}},{3, {{178,{1,1,1,1,1,1,1,1,1,1,1,}},}},},
    {{1, {{192,{1,1,1,1,1,1,1,1,1,1,1,}},}},{2, {{192,{1,1,1,1,1,1,1,1,1,1,1,}},}},{3, {{192,{1,1,1,1,1,1,1,1,1,1,1,}},}},},
};

WasmModule Parser::parse(){
    // Prepare
    std::stack<Stack::iterator> branches;
    Stack stack;
    stack.push(fetch(), 0);
    auto throw_error = [&](token_t token, term_t term){
        if(branches.empty()){
            throw ParseError(token.pos, term);
        }
        auto& saved = branches.top();
        auto buf_top = buffer.begin();
        Stack::iterator new_head = stack.begin();
        for(auto it = stack.begin(); (it != stack.end()) && (it != saved); it = std::next(it)){
            new_head = it;
            if(std::holds_alternative<token_t>(it->elem)){
                buffer.emplace(buf_top, it->term, std::get<token_t>(it->elem));
            }else{
                auto flattened = std::get<Node>(it->elem).flatten();
                buffer.insert(buf_top, flattened.begin(), flattened.end());
            }
        }
        new_head->branch += 1;
        new_head->term = buffer.front().first;
        new_head->elem = buffer.front().second;
        buffer.pop_front();
        stack.erase(stack.begin(), new_head);
    };
    // Parse
    while(stack.front().state != End){
        Entry& entry = stack.front();
        State& state = table[entry.state];
        if(state.contains(entry.term)){
            std::vector<Act>& acts = state[entry.term];
            if(entry.branch == 0){
                if(acts.size() > 1){
                    branches.emplace(std::next(stack.begin()));
                }
            }else if(entry.branch == acts.size() - 1){
                branches.pop();
            }
            Act& act = acts[entry.branch];
            if(act.first & 1){ // Shift
                stack.push(fetch(), act.first >> 1);
            }else{ // Reduce
                if(std::holds_alternative<token_t>(entry.elem)){
                    buffer.emplace_front(entry.term, std::get<token_t>(entry.elem));
                    stack.pop_front();
                }
                stack.reduce(act.first >> 1, act.second);
            }
        }else{
            Entry* ptr = &entry;
            while(std::holds_alternative<Node>(ptr->elem)){
                ptr = &std::get<Node>(ptr->elem).children.front();
            }
            if(std::holds_alternative<token_t>(ptr->elem)){
                throw_error(std::get<token_t>(ptr->elem), entry.term);
            }else{
                throw_error(Token(std::monostate(), Position()), entry.term);
            }
        }
    }
    // Expand tree
    return expand_tree(stack.back());
}

void Parser::Stack::reduce(size_t action, std::vector<bool> param_toggle){
    static const std::vector<term_t> signatures {99,99,99,99,99,99,99,99,99,99,99,98,98,98,98,98,114,114,114,103,103,115,115,101,101,101,104,104,79,83,83,86,86,109,112,113,84,85,74,75,110,110,91,91,92,92,77,77,106,106,95,95,81,81,111,111,111,93,93,108,82,82,66,66,66,66,66,66,66,87,89,89,89,89,72,72,72,72,88,88,73,73,94,94,94,90,90,76,76,105,105,105,97,97,80,80,70,70,70,78,78,71,71,100,100,107,107,68,68,96,96,67,67,69,69,69,69,102,102,102,102,102,102,102,};
    if(action == 0){
        emplace_front(Entry {.term = 0, .state = End});
        return;
    }
    Node node = {.action = action, .param_toggle = param_toggle};
    size_t param_count = std::count_if(param_toggle.begin(), param_toggle.end(), [](bool val){return val;});
    for(size_t i = 0; i < param_count; ++i){
        node.children.emplace_front(front());
        pop_front();
    }
    Entry* head = &node.children.front();
    while(std::holds_alternative<Node>(head->elem)){
        Node& child = std::get<Node>(head->elem);
        head = &child.children.front();
    }
    Entry& entry = emplace_front();
    entry.term = signatures[action - 1];
    entry.state = head->state;
    entry.elem.emplace<Node>(node);
}

using item_t = std::variant<std::monostate,
    Parser::token_t,
    ConstInstr,
    FuncType,
    GlobalType,
    Limits,
    RefType,
    TableType,
    ValueType,
    WasmData,
    WasmElem,
    WasmExport,
    WasmImport,
    WasmInstr,
    WasmModule,
    f32_t,
    f64_t,
    i32_t,
    i64_t,
    std::list<ValueType>,
    std::optional<std::pair<std::string, std::string>>,
    std::pair<RefType, std::vector<ConstInstr>>,
    std::pair<u32_t, ConstInstr>,
    std::string,
    std::variant<Limits, WasmImport, std::pair<Limits, WasmData>>,
    std::variant<TableType, WasmImport, std::pair<TableType, WasmElem>>,
    std::variant<WasmFunc, WasmImport>,
    std::variant<WasmGlobal, WasmImport>,
    std::variant<index_t, TableType, MemType, GlobalType>,
    std::vector<ConstInstr>,
    std::vector<ValueType>,
    std::vector<WasmInstr>,
    std::vector<byte_t>,
    std::vector<std::string>,
    std::vector<u32_t>,
    u32_t,
    u64_t
>;

WasmModule Parser::expand_tree(Entry& tree){
    std::list<std::variant<Node, token_t>> entry_stack;
    std::list<std::pair<Position, item_t>> param_stack;
    auto extract_entry = [&](Entry& entry){
        if(std::holds_alternative<token_t>(entry.elem)){
            entry_stack.emplace_front(std::get<token_t>(entry.elem));
        }else if(std::holds_alternative<Node>(entry.elem)){
            Node& elem = std::get<Node>(entry.elem);
            Node& node = std::get<Node>(entry_stack.emplace_front(Node {.action = elem.action, .param_toggle = elem.param_toggle}));
            node.children.swap(elem.children);
        }
    };
    extract_entry(tree);
    auto invoke_action = [&](Node& node){
        std::vector<Position> positions(node.param_toggle.size());
        std::vector<item_t> params(node.param_toggle.size());
        Position pos;
        for(size_t i = node.param_toggle.size(); i > 0; --i){
            size_t index = i - 1;
            if(node.param_toggle[index]){
                positions[index] = param_stack.front().first;
                params[index] = param_stack.front().second;
                param_stack.pop_front();
            }
        }
        for(size_t i = 0; i < node.param_toggle.size(); ++i){
            if(node.param_toggle[i]){
                pos = positions[i];
                break;
            }
        }
        switch(node.action){
            case 1: 
                param_stack.emplace_front(pos, action_1(*this, positions,
                    node.param_toggle[0] ? std::get<WasmModule>(params[0]) : WasmModule()
                ));
            break;
            case 2: 
                param_stack.emplace_front(pos, action_2(*this, positions,
                    node.param_toggle[0] ? std::get<WasmModule>(params[0]) : WasmModule(),
                    node.param_toggle[1] ? std::get<WasmImport>(params[1]) : WasmImport()
                ));
            break;
            case 3: 
                param_stack.emplace_front(pos, action_3(*this, positions,
                    node.param_toggle[0] ? std::get<WasmModule>(params[0]) : WasmModule(),
                    node.param_toggle[1] ? std::get<std::variant<TableType, WasmImport, std::pair<TableType, WasmElem>>>(params[1]) : std::variant<TableType, WasmImport, std::pair<TableType, WasmElem>>()
                ));
            break;
            case 4: 
                param_stack.emplace_front(pos, action_4(*this, positions,
                    node.param_toggle[0] ? std::get<WasmModule>(params[0]) : WasmModule(),
                    node.param_toggle[1] ? std::get<std::variant<Limits, WasmImport, std::pair<Limits, WasmData>>>(params[1]) : std::variant<Limits, WasmImport, std::pair<Limits, WasmData>>()
                ));
            break;
            case 5: 
                param_stack.emplace_front(pos, action_5(*this, positions,
                    node.param_toggle[0] ? std::get<WasmModule>(params[0]) : WasmModule(),
                    node.param_toggle[1] ? std::get<std::variant<WasmGlobal, WasmImport>>(params[1]) : std::variant<WasmGlobal, WasmImport>()
                ));
            break;
            case 6: 
                param_stack.emplace_front(pos, action_6(*this, positions,
                    node.param_toggle[0] ? std::get<WasmModule>(params[0]) : WasmModule(),
                    node.param_toggle[1] ? std::get<WasmExport>(params[1]) : WasmExport()
                ));
            break;
            case 7: 
                param_stack.emplace_front(pos, action_7(*this, positions,
                    node.param_toggle[0] ? std::get<WasmModule>(params[0]) : WasmModule(),
                    node.param_toggle[1] ? std::get<std::variant<WasmFunc, WasmImport>>(params[1]) : std::variant<WasmFunc, WasmImport>()
                ));
            break;
            case 8: 
                param_stack.emplace_front(pos, action_8(*this, positions,
                    node.param_toggle[0] ? std::get<WasmModule>(params[0]) : WasmModule(),
                    node.param_toggle[1] ? std::get<Tokens::ParenL>(std::get<Token>(params[1])) : Tokens::ParenL(),
                    node.param_toggle[2] ? std::get<Tokens::Start>(std::get<Token>(params[2])) : Tokens::Start(),
                    node.param_toggle[3] ? std::get<u32_t>(params[3]) : u32_t(),
                    node.param_toggle[4] ? std::get<Tokens::ParenR>(std::get<Token>(params[4])) : Tokens::ParenR()
                ));
            break;
            case 9: 
                param_stack.emplace_front(pos, action_9(*this, positions,
                    node.param_toggle[0] ? std::get<WasmModule>(params[0]) : WasmModule(),
                    node.param_toggle[1] ? std::get<WasmElem>(params[1]) : WasmElem()
                ));
            break;
            case 10: 
                param_stack.emplace_front(pos, action_10(*this, positions,
                    node.param_toggle[0] ? std::get<WasmModule>(params[0]) : WasmModule(),
                    node.param_toggle[1] ? std::get<WasmData>(params[1]) : WasmData()
                ));
            break;
            case 11: 
                param_stack.emplace_front(pos, action_11(*this, positions
                ));
            break;
            case 12: 
                param_stack.emplace_front(pos, action_12(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Module>(std::get<Token>(params[1])) : Tokens::Module(),
                    node.param_toggle[2] ? std::get<Tokens::Id>(std::get<Token>(params[2])) : Tokens::Id(),
                    node.param_toggle[3] ? std::get<WasmModule>(params[3]) : WasmModule(),
                    node.param_toggle[4] ? std::get<Tokens::ParenR>(std::get<Token>(params[4])) : Tokens::ParenR()
                ));
            break;
            case 13: 
                param_stack.emplace_front(pos, action_13(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Module>(std::get<Token>(params[1])) : Tokens::Module(),
                    node.param_toggle[2] ? std::get<WasmModule>(params[2]) : WasmModule(),
                    node.param_toggle[3] ? std::get<Tokens::ParenR>(std::get<Token>(params[3])) : Tokens::ParenR()
                ));
            break;
            case 14: 
                param_stack.emplace_front(pos, action_14(*this, positions,
                    node.param_toggle[0] ? std::get<WasmModule>(params[0]) : WasmModule()
                ));
            break;
            case 15: 
                param_stack.emplace_front(pos, action_15(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::ParenR>(std::get<Token>(params[1])) : Tokens::ParenR()
                ));
            break;
            case 16: 
                param_stack.emplace_front(pos, action_16(*this, positions
                ));
            break;
            case 17: 
                param_stack.emplace_front(pos, action_17(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::NumType>(std::get<Token>(params[0])) : Tokens::NumType()
                ));
            break;
            case 18: 
                param_stack.emplace_front(pos, action_18(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Funcref>(std::get<Token>(params[0])) : Tokens::Funcref()
                ));
            break;
            case 19: 
                param_stack.emplace_front(pos, action_19(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Externref>(std::get<Token>(params[0])) : Tokens::Externref()
                ));
            break;
            case 20: 
                param_stack.emplace_front(pos, action_20(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Funcref>(std::get<Token>(params[0])) : Tokens::Funcref()
                ));
            break;
            case 21: 
                param_stack.emplace_front(pos, action_21(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Externref>(std::get<Token>(params[0])) : Tokens::Externref()
                ));
            break;
            case 22: 
                param_stack.emplace_front(pos, action_22(*this, positions,
                    node.param_toggle[0] ? std::get<std::vector<ValueType>>(params[0]) : std::vector<ValueType>(),
                    node.param_toggle[1] ? std::get<ValueType>(params[1]) : ValueType()
                ));
            break;
            case 23: 
                param_stack.emplace_front(pos, action_23(*this, positions
                ));
            break;
            case 24: 
                param_stack.emplace_front(pos, action_24(*this, positions,
                    node.param_toggle[0] ? std::get<std::vector<ValueType>>(params[0]) : std::vector<ValueType>(),
                    node.param_toggle[1] ? std::get<Tokens::ParenL>(std::get<Token>(params[1])) : Tokens::ParenL(),
                    node.param_toggle[2] ? std::get<Tokens::Param>(std::get<Token>(params[2])) : Tokens::Param(),
                    node.param_toggle[3] ? std::get<Tokens::Id>(std::get<Token>(params[3])) : Tokens::Id(),
                    node.param_toggle[4] ? std::get<ValueType>(params[4]) : ValueType(),
                    node.param_toggle[5] ? std::get<Tokens::ParenR>(std::get<Token>(params[5])) : Tokens::ParenR()
                ));
            break;
            case 25: 
                param_stack.emplace_front(pos, action_25(*this, positions,
                    node.param_toggle[0] ? std::get<std::vector<ValueType>>(params[0]) : std::vector<ValueType>(),
                    node.param_toggle[1] ? std::get<Tokens::ParenL>(std::get<Token>(params[1])) : Tokens::ParenL(),
                    node.param_toggle[2] ? std::get<Tokens::Param>(std::get<Token>(params[2])) : Tokens::Param(),
                    node.param_toggle[3] ? std::get<std::vector<ValueType>>(params[3]) : std::vector<ValueType>(),
                    node.param_toggle[4] ? std::get<Tokens::ParenR>(std::get<Token>(params[4])) : Tokens::ParenR()
                ));
            break;
            case 26: 
                param_stack.emplace_front(pos, action_26(*this, positions
                ));
            break;
            case 27: 
                param_stack.emplace_front(pos, action_27(*this, positions,
                    node.param_toggle[0] ? std::get<std::vector<ValueType>>(params[0]) : std::vector<ValueType>(),
                    node.param_toggle[1] ? std::get<Tokens::ParenL>(std::get<Token>(params[1])) : Tokens::ParenL(),
                    node.param_toggle[2] ? std::get<Tokens::Result>(std::get<Token>(params[2])) : Tokens::Result(),
                    node.param_toggle[3] ? std::get<std::vector<ValueType>>(params[3]) : std::vector<ValueType>(),
                    node.param_toggle[4] ? std::get<Tokens::ParenR>(std::get<Token>(params[4])) : Tokens::ParenR()
                ));
            break;
            case 28: 
                param_stack.emplace_front(pos, action_28(*this, positions
                ));
            break;
            case 29: 
                param_stack.emplace_front(pos, action_29(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Func>(std::get<Token>(params[1])) : Tokens::Func(),
                    node.param_toggle[2] ? std::get<std::vector<ValueType>>(params[2]) : std::vector<ValueType>(),
                    node.param_toggle[3] ? std::get<std::vector<ValueType>>(params[3]) : std::vector<ValueType>(),
                    node.param_toggle[4] ? std::get<Tokens::ParenR>(std::get<Token>(params[4])) : Tokens::ParenR()
                ));
            break;
            case 30: 
                param_stack.emplace_front(pos, action_30(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Func>(std::get<Token>(params[0])) : Tokens::Func()
                ));
            break;
            case 31: 
                param_stack.emplace_front(pos, action_31(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Extern>(std::get<Token>(params[0])) : Tokens::Extern()
                ));
            break;
            case 32: 
                param_stack.emplace_front(pos, action_32(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Id>(std::get<Token>(params[0])) : Tokens::Id()
                ));
            break;
            case 33: 
                param_stack.emplace_front(pos, action_33(*this, positions
                ));
            break;
            case 34: 
                param_stack.emplace_front(pos, std::monostate());
                action_34(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Type>(std::get<Token>(params[1])) : Tokens::Type(),
                    node.param_toggle[2] ? std::get<std::string>(params[2]) : std::string(),
                    node.param_toggle[3] ? std::get<FuncType>(params[3]) : FuncType(),
                    node.param_toggle[4] ? std::get<Tokens::ParenR>(std::get<Token>(params[4])) : Tokens::ParenR()
                );
            break;
            case 35: 
                param_stack.emplace_front(pos, action_35(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Integer>(std::get<Token>(params[0])) : Tokens::Integer()
                ));
            break;
            case 36: 
                param_stack.emplace_front(pos, action_36(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Integer>(std::get<Token>(params[0])) : Tokens::Integer()
                ));
            break;
            case 37: 
                param_stack.emplace_front(pos, action_37(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Integer>(std::get<Token>(params[0])) : Tokens::Integer()
                ));
            break;
            case 38: 
                param_stack.emplace_front(pos, action_38(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Integer>(std::get<Token>(params[0])) : Tokens::Integer()
                ));
            break;
            case 39: 
                param_stack.emplace_front(pos, action_39(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Float>(std::get<Token>(params[0])) : Tokens::Float()
                ));
            break;
            case 40: 
                param_stack.emplace_front(pos, action_40(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Float>(std::get<Token>(params[0])) : Tokens::Float()
                ));
            break;
            case 41: 
                param_stack.emplace_front(pos, action_41(*this, positions,
                    node.param_toggle[0] ? std::get<u32_t>(params[0]) : u32_t()
                ));
            break;
            case 42: 
                param_stack.emplace_front(pos, action_42(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Id>(std::get<Token>(params[0])) : Tokens::Id()
                ));
            break;
            case 43: 
                param_stack.emplace_front(pos, action_43(*this, positions,
                    node.param_toggle[0] ? std::get<u32_t>(params[0]) : u32_t()
                ));
            break;
            case 44: 
                param_stack.emplace_front(pos, action_44(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Id>(std::get<Token>(params[0])) : Tokens::Id()
                ));
            break;
            case 45: 
                param_stack.emplace_front(pos, action_45(*this, positions,
                    node.param_toggle[0] ? std::get<std::vector<u32_t>>(params[0]) : std::vector<u32_t>(),
                    node.param_toggle[1] ? std::get<u32_t>(params[1]) : u32_t()
                ));
            break;
            case 46: 
                param_stack.emplace_front(pos, action_46(*this, positions,
                    node.param_toggle[0] ? std::get<u32_t>(params[0]) : u32_t()
                ));
            break;
            case 47: 
                param_stack.emplace_front(pos, action_47(*this, positions,
                    node.param_toggle[0] ? std::get<u32_t>(params[0]) : u32_t()
                ));
            break;
            case 48: 
                param_stack.emplace_front(pos, action_48(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Id>(std::get<Token>(params[0])) : Tokens::Id()
                ));
            break;
            case 49: 
                param_stack.emplace_front(pos, action_49(*this, positions,
                    node.param_toggle[0] ? std::get<u32_t>(params[0]) : u32_t()
                ));
            break;
            case 50: 
                param_stack.emplace_front(pos, action_50(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Id>(std::get<Token>(params[0])) : Tokens::Id()
                ));
            break;
            case 51: 
                param_stack.emplace_front(pos, action_51(*this, positions,
                    node.param_toggle[0] ? std::get<u32_t>(params[0]) : u32_t()
                ));
            break;
            case 52: 
                param_stack.emplace_front(pos, action_52(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Id>(std::get<Token>(params[0])) : Tokens::Id()
                ));
            break;
            case 53: 
                param_stack.emplace_front(pos, action_53(*this, positions,
                    node.param_toggle[0] ? std::get<u32_t>(params[0]) : u32_t()
                ));
            break;
            case 54: 
                param_stack.emplace_front(pos, action_54(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Id>(std::get<Token>(params[0])) : Tokens::Id()
                ));
            break;
            case 55: 
                param_stack.emplace_front(pos, action_55(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Type>(std::get<Token>(params[1])) : Tokens::Type(),
                    node.param_toggle[2] ? std::get<u32_t>(params[2]) : u32_t(),
                    node.param_toggle[3] ? std::get<Tokens::ParenR>(std::get<Token>(params[3])) : Tokens::ParenR(),
                    node.param_toggle[4] ? std::get<std::vector<ValueType>>(params[4]) : std::vector<ValueType>(),
                    node.param_toggle[5] ? std::get<std::vector<ValueType>>(params[5]) : std::vector<ValueType>()
                ));
            break;
            case 56: 
                param_stack.emplace_front(pos, action_56(*this, positions,
                    node.param_toggle[0] ? std::get<std::vector<ValueType>>(params[0]) : std::vector<ValueType>(),
                    node.param_toggle[1] ? std::get<std::vector<ValueType>>(params[1]) : std::vector<ValueType>()
                ));
            break;
            case 57: 
                param_stack.emplace_front(pos, action_57(*this, positions
                ));
            break;
            case 58: 
                param_stack.emplace_front(pos, action_58(*this, positions,
                    node.param_toggle[0] ? std::get<u64_t>(params[0]) : u64_t()
                ));
            break;
            case 59: 
                param_stack.emplace_front(pos, action_59(*this, positions,
                    node.param_toggle[0] ? std::get<u64_t>(params[0]) : u64_t(),
                    node.param_toggle[1] ? std::get<u64_t>(params[1]) : u64_t()
                ));
            break;
            case 60: 
                param_stack.emplace_front(pos, action_60(*this, positions,
                    node.param_toggle[0] ? std::get<Limits>(params[0]) : Limits(),
                    node.param_toggle[1] ? std::get<RefType>(params[1]) : RefType()
                ));
            break;
            case 61: 
                param_stack.emplace_front(pos, action_61(*this, positions,
                    node.param_toggle[0] ? std::get<ValueType>(params[0]) : ValueType()
                ));
            break;
            case 62: 
                param_stack.emplace_front(pos, action_62(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Mut>(std::get<Token>(params[1])) : Tokens::Mut(),
                    node.param_toggle[2] ? std::get<ValueType>(params[2]) : ValueType(),
                    node.param_toggle[3] ? std::get<Tokens::ParenR>(std::get<Token>(params[3])) : Tokens::ParenR()
                ));
            break;
            case 63: 
                param_stack.emplace_front(pos, action_63(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Ref_null>(std::get<Token>(params[0])) : Tokens::Ref_null(),
                    node.param_toggle[1] ? std::get<RefType>(params[1]) : RefType()
                ));
            break;
            case 64: 
                param_stack.emplace_front(pos, action_64(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Ref_func>(std::get<Token>(params[0])) : Tokens::Ref_func(),
                    node.param_toggle[1] ? std::get<u32_t>(params[1]) : u32_t()
                ));
            break;
            case 65: 
                param_stack.emplace_front(pos, action_65(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::I32_const>(std::get<Token>(params[0])) : Tokens::I32_const(),
                    node.param_toggle[1] ? std::get<i32_t>(params[1]) : i32_t()
                ));
            break;
            case 66: 
                param_stack.emplace_front(pos, action_66(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::I64_const>(std::get<Token>(params[0])) : Tokens::I64_const(),
                    node.param_toggle[1] ? std::get<i64_t>(params[1]) : i64_t()
                ));
            break;
            case 67: 
                param_stack.emplace_front(pos, action_67(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::F32_const>(std::get<Token>(params[0])) : Tokens::F32_const(),
                    node.param_toggle[1] ? std::get<f32_t>(params[1]) : f32_t()
                ));
            break;
            case 68: 
                param_stack.emplace_front(pos, action_68(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::F64_const>(std::get<Token>(params[0])) : Tokens::F64_const(),
                    node.param_toggle[1] ? std::get<f64_t>(params[1]) : f64_t()
                ));
            break;
            case 69: 
                param_stack.emplace_front(pos, action_69(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::VariableInstr>(std::get<Token>(params[0])) : Tokens::VariableInstr(),
                    node.param_toggle[1] ? std::get<u32_t>(params[1]) : u32_t()
                ));
            break;
            case 70: 
                param_stack.emplace_front(pos, action_70(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Import>(std::get<Token>(params[1])) : Tokens::Import(),
                    node.param_toggle[2] ? std::get<Tokens::String>(std::get<Token>(params[2])) : Tokens::String(),
                    node.param_toggle[3] ? std::get<Tokens::String>(std::get<Token>(params[3])) : Tokens::String(),
                    node.param_toggle[4] ? std::get<std::variant<index_t, TableType, MemType, GlobalType>>(params[4]) : std::variant<index_t, TableType, MemType, GlobalType>(),
                    node.param_toggle[5] ? std::get<Tokens::ParenR>(std::get<Token>(params[5])) : Tokens::ParenR()
                ));
            break;
            case 71: 
                param_stack.emplace_front(pos, action_71(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Func>(std::get<Token>(params[1])) : Tokens::Func(),
                    node.param_toggle[2] ? std::get<std::string>(params[2]) : std::string(),
                    node.param_toggle[3] ? std::get<u32_t>(params[3]) : u32_t(),
                    node.param_toggle[4] ? std::get<Tokens::ParenR>(std::get<Token>(params[4])) : Tokens::ParenR()
                ));
            break;
            case 72: 
                param_stack.emplace_front(pos, action_72(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Table>(std::get<Token>(params[1])) : Tokens::Table(),
                    node.param_toggle[2] ? std::get<std::string>(params[2]) : std::string(),
                    node.param_toggle[3] ? std::get<TableType>(params[3]) : TableType(),
                    node.param_toggle[4] ? std::get<Tokens::ParenR>(std::get<Token>(params[4])) : Tokens::ParenR()
                ));
            break;
            case 73: 
                param_stack.emplace_front(pos, action_73(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Memory>(std::get<Token>(params[1])) : Tokens::Memory(),
                    node.param_toggle[2] ? std::get<std::string>(params[2]) : std::string(),
                    node.param_toggle[3] ? std::get<Limits>(params[3]) : Limits(),
                    node.param_toggle[4] ? std::get<Tokens::ParenR>(std::get<Token>(params[4])) : Tokens::ParenR()
                ));
            break;
            case 74: 
                param_stack.emplace_front(pos, action_74(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Global>(std::get<Token>(params[1])) : Tokens::Global(),
                    node.param_toggle[2] ? std::get<std::string>(params[2]) : std::string(),
                    node.param_toggle[3] ? std::get<GlobalType>(params[3]) : GlobalType(),
                    node.param_toggle[4] ? std::get<Tokens::ParenR>(std::get<Token>(params[4])) : Tokens::ParenR()
                ));
            break;
            case 75: 
                param_stack.emplace_front(pos, action_75(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Export>(std::get<Token>(params[1])) : Tokens::Export(),
                    node.param_toggle[2] ? std::get<Tokens::String>(std::get<Token>(params[2])) : Tokens::String(),
                    node.param_toggle[3] ? std::get<Tokens::ParenL>(std::get<Token>(params[3])) : Tokens::ParenL(),
                    node.param_toggle[4] ? std::get<Tokens::Func>(std::get<Token>(params[4])) : Tokens::Func(),
                    node.param_toggle[5] ? std::get<u32_t>(params[5]) : u32_t(),
                    node.param_toggle[6] ? std::get<Tokens::ParenR>(std::get<Token>(params[6])) : Tokens::ParenR(),
                    node.param_toggle[7] ? std::get<Tokens::ParenR>(std::get<Token>(params[7])) : Tokens::ParenR()
                ));
            break;
            case 76: 
                param_stack.emplace_front(pos, action_76(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Export>(std::get<Token>(params[1])) : Tokens::Export(),
                    node.param_toggle[2] ? std::get<Tokens::String>(std::get<Token>(params[2])) : Tokens::String(),
                    node.param_toggle[3] ? std::get<Tokens::ParenL>(std::get<Token>(params[3])) : Tokens::ParenL(),
                    node.param_toggle[4] ? std::get<Tokens::Table>(std::get<Token>(params[4])) : Tokens::Table(),
                    node.param_toggle[5] ? std::get<u32_t>(params[5]) : u32_t(),
                    node.param_toggle[6] ? std::get<Tokens::ParenR>(std::get<Token>(params[6])) : Tokens::ParenR(),
                    node.param_toggle[7] ? std::get<Tokens::ParenR>(std::get<Token>(params[7])) : Tokens::ParenR()
                ));
            break;
            case 77: 
                param_stack.emplace_front(pos, action_77(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Export>(std::get<Token>(params[1])) : Tokens::Export(),
                    node.param_toggle[2] ? std::get<Tokens::String>(std::get<Token>(params[2])) : Tokens::String(),
                    node.param_toggle[3] ? std::get<Tokens::ParenL>(std::get<Token>(params[3])) : Tokens::ParenL(),
                    node.param_toggle[4] ? std::get<Tokens::Memory>(std::get<Token>(params[4])) : Tokens::Memory(),
                    node.param_toggle[5] ? std::get<u32_t>(params[5]) : u32_t(),
                    node.param_toggle[6] ? std::get<Tokens::ParenR>(std::get<Token>(params[6])) : Tokens::ParenR(),
                    node.param_toggle[7] ? std::get<Tokens::ParenR>(std::get<Token>(params[7])) : Tokens::ParenR()
                ));
            break;
            case 78: 
                param_stack.emplace_front(pos, action_78(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Export>(std::get<Token>(params[1])) : Tokens::Export(),
                    node.param_toggle[2] ? std::get<Tokens::String>(std::get<Token>(params[2])) : Tokens::String(),
                    node.param_toggle[3] ? std::get<Tokens::ParenL>(std::get<Token>(params[3])) : Tokens::ParenL(),
                    node.param_toggle[4] ? std::get<Tokens::Global>(std::get<Token>(params[4])) : Tokens::Global(),
                    node.param_toggle[5] ? std::get<u32_t>(params[5]) : u32_t(),
                    node.param_toggle[6] ? std::get<Tokens::ParenR>(std::get<Token>(params[6])) : Tokens::ParenR(),
                    node.param_toggle[7] ? std::get<Tokens::ParenR>(std::get<Token>(params[7])) : Tokens::ParenR()
                ));
            break;
            case 79: 
                param_stack.emplace_front(pos, action_79(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Import>(std::get<Token>(params[1])) : Tokens::Import(),
                    node.param_toggle[2] ? std::get<Tokens::String>(std::get<Token>(params[2])) : Tokens::String(),
                    node.param_toggle[3] ? std::get<Tokens::String>(std::get<Token>(params[3])) : Tokens::String(),
                    node.param_toggle[4] ? std::get<Tokens::ParenR>(std::get<Token>(params[4])) : Tokens::ParenR()
                ));
            break;
            case 80: 
                param_stack.emplace_front(pos, action_80(*this, positions
                ));
            break;
            case 81: 
                param_stack.emplace_front(pos, action_81(*this, positions,
                    node.param_toggle[0] ? std::get<std::vector<std::string>>(params[0]) : std::vector<std::string>(),
                    node.param_toggle[1] ? std::get<Tokens::ParenL>(std::get<Token>(params[1])) : Tokens::ParenL(),
                    node.param_toggle[2] ? std::get<Tokens::Export>(std::get<Token>(params[2])) : Tokens::Export(),
                    node.param_toggle[3] ? std::get<Tokens::String>(std::get<Token>(params[3])) : Tokens::String(),
                    node.param_toggle[4] ? std::get<Tokens::ParenR>(std::get<Token>(params[4])) : Tokens::ParenR()
                ));
            break;
            case 82: 
                param_stack.emplace_front(pos, action_82(*this, positions
                ));
            break;
            case 83: 
                param_stack.emplace_front(pos, action_83(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Local>(std::get<Token>(params[1])) : Tokens::Local(),
                    node.param_toggle[2] ? std::get<Tokens::Id>(std::get<Token>(params[2])) : Tokens::Id(),
                    node.param_toggle[3] ? std::get<ValueType>(params[3]) : ValueType(),
                    node.param_toggle[4] ? std::get<Tokens::ParenR>(std::get<Token>(params[4])) : Tokens::ParenR(),
                    node.param_toggle[5] ? std::get<std::list<ValueType>>(params[5]) : std::list<ValueType>()
                ));
            break;
            case 84: 
                param_stack.emplace_front(pos, action_84(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Local>(std::get<Token>(params[1])) : Tokens::Local(),
                    node.param_toggle[2] ? std::get<std::vector<ValueType>>(params[2]) : std::vector<ValueType>(),
                    node.param_toggle[3] ? std::get<Tokens::ParenR>(std::get<Token>(params[3])) : Tokens::ParenR(),
                    node.param_toggle[4] ? std::get<std::list<ValueType>>(params[4]) : std::list<ValueType>()
                ));
            break;
            case 85: 
                param_stack.emplace_front(pos, action_85(*this, positions
                ));
            break;
            case 86: 
                param_stack.emplace_front(pos, action_86(*this, positions,
                    node.param_toggle[0] ? std::get<std::vector<WasmInstr>>(params[0]) : std::vector<WasmInstr>(),
                    node.param_toggle[1] ? std::get<WasmInstr>(params[1]) : WasmInstr()
                ));
            break;
            case 87: 
                param_stack.emplace_front(pos, action_87(*this, positions
                ));
            break;
            case 88: 
                param_stack.emplace_front(pos, action_88(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Func>(std::get<Token>(params[1])) : Tokens::Func(),
                    node.param_toggle[2] ? std::get<std::string>(params[2]) : std::string(),
                    node.param_toggle[3] ? std::get<std::vector<std::string>>(params[3]) : std::vector<std::string>(),
                    node.param_toggle[4] ? std::get<u32_t>(params[4]) : u32_t(),
                    node.param_toggle[5] ? std::get<std::list<ValueType>>(params[5]) : std::list<ValueType>(),
                    node.param_toggle[6] ? std::get<std::vector<WasmInstr>>(params[6]) : std::vector<WasmInstr>(),
                    node.param_toggle[7] ? std::get<Tokens::ParenR>(std::get<Token>(params[7])) : Tokens::ParenR()
                ));
            break;
            case 89: 
                param_stack.emplace_front(pos, action_89(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Func>(std::get<Token>(params[1])) : Tokens::Func(),
                    node.param_toggle[2] ? std::get<std::string>(params[2]) : std::string(),
                    node.param_toggle[3] ? std::get<std::vector<std::string>>(params[3]) : std::vector<std::string>(),
                    node.param_toggle[4] ? std::get<Tokens::ParenL>(std::get<Token>(params[4])) : Tokens::ParenL(),
                    node.param_toggle[5] ? std::get<Tokens::Import>(std::get<Token>(params[5])) : Tokens::Import(),
                    node.param_toggle[6] ? std::get<Tokens::String>(std::get<Token>(params[6])) : Tokens::String(),
                    node.param_toggle[7] ? std::get<Tokens::String>(std::get<Token>(params[7])) : Tokens::String(),
                    node.param_toggle[8] ? std::get<Tokens::ParenR>(std::get<Token>(params[8])) : Tokens::ParenR(),
                    node.param_toggle[9] ? std::get<u32_t>(params[9]) : u32_t(),
                    node.param_toggle[10] ? std::get<Tokens::ParenR>(std::get<Token>(params[10])) : Tokens::ParenR()
                ));
            break;
            case 90: 
                param_stack.emplace_front(pos, action_90(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Table>(std::get<Token>(params[1])) : Tokens::Table(),
                    node.param_toggle[2] ? std::get<std::string>(params[2]) : std::string(),
                    node.param_toggle[3] ? std::get<std::vector<std::string>>(params[3]) : std::vector<std::string>(),
                    node.param_toggle[4] ? std::get<std::optional<std::pair<std::string, std::string>>>(params[4]) : std::optional<std::pair<std::string, std::string>>(),
                    node.param_toggle[5] ? std::get<TableType>(params[5]) : TableType(),
                    node.param_toggle[6] ? std::get<Tokens::ParenR>(std::get<Token>(params[6])) : Tokens::ParenR()
                ));
            break;
            case 91: 
                param_stack.emplace_front(pos, action_91(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Table>(std::get<Token>(params[1])) : Tokens::Table(),
                    node.param_toggle[2] ? std::get<std::string>(params[2]) : std::string(),
                    node.param_toggle[3] ? std::get<std::vector<std::string>>(params[3]) : std::vector<std::string>(),
                    node.param_toggle[4] ? std::get<RefType>(params[4]) : RefType(),
                    node.param_toggle[5] ? std::get<Tokens::ParenL>(std::get<Token>(params[5])) : Tokens::ParenL(),
                    node.param_toggle[6] ? std::get<Tokens::Elem>(std::get<Token>(params[6])) : Tokens::Elem(),
                    node.param_toggle[7] ? std::get<std::vector<ConstInstr>>(params[7]) : std::vector<ConstInstr>(),
                    node.param_toggle[8] ? std::get<Tokens::ParenR>(std::get<Token>(params[8])) : Tokens::ParenR(),
                    node.param_toggle[9] ? std::get<Tokens::ParenR>(std::get<Token>(params[9])) : Tokens::ParenR()
                ));
            break;
            case 92: 
                param_stack.emplace_front(pos, action_92(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Table>(std::get<Token>(params[1])) : Tokens::Table(),
                    node.param_toggle[2] ? std::get<std::string>(params[2]) : std::string(),
                    node.param_toggle[3] ? std::get<std::vector<std::string>>(params[3]) : std::vector<std::string>(),
                    node.param_toggle[4] ? std::get<RefType>(params[4]) : RefType(),
                    node.param_toggle[5] ? std::get<Tokens::ParenL>(std::get<Token>(params[5])) : Tokens::ParenL(),
                    node.param_toggle[6] ? std::get<Tokens::Elem>(std::get<Token>(params[6])) : Tokens::Elem(),
                    node.param_toggle[7] ? std::get<std::vector<ConstInstr>>(params[7]) : std::vector<ConstInstr>(),
                    node.param_toggle[8] ? std::get<Tokens::ParenR>(std::get<Token>(params[8])) : Tokens::ParenR(),
                    node.param_toggle[9] ? std::get<Tokens::ParenR>(std::get<Token>(params[9])) : Tokens::ParenR()
                ));
            break;
            case 93: 
                param_stack.emplace_front(pos, action_93(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Memory>(std::get<Token>(params[1])) : Tokens::Memory(),
                    node.param_toggle[2] ? std::get<std::string>(params[2]) : std::string(),
                    node.param_toggle[3] ? std::get<std::vector<std::string>>(params[3]) : std::vector<std::string>(),
                    node.param_toggle[4] ? std::get<std::optional<std::pair<std::string, std::string>>>(params[4]) : std::optional<std::pair<std::string, std::string>>(),
                    node.param_toggle[5] ? std::get<Limits>(params[5]) : Limits(),
                    node.param_toggle[6] ? std::get<Tokens::ParenR>(std::get<Token>(params[6])) : Tokens::ParenR()
                ));
            break;
            case 94: 
                param_stack.emplace_front(pos, action_94(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Memory>(std::get<Token>(params[1])) : Tokens::Memory(),
                    node.param_toggle[2] ? std::get<std::string>(params[2]) : std::string(),
                    node.param_toggle[3] ? std::get<std::vector<std::string>>(params[3]) : std::vector<std::string>(),
                    node.param_toggle[4] ? std::get<Tokens::ParenL>(std::get<Token>(params[4])) : Tokens::ParenL(),
                    node.param_toggle[5] ? std::get<Tokens::Data>(std::get<Token>(params[5])) : Tokens::Data(),
                    node.param_toggle[6] ? std::get<std::vector<byte_t>>(params[6]) : std::vector<byte_t>(),
                    node.param_toggle[7] ? std::get<Tokens::ParenR>(std::get<Token>(params[7])) : Tokens::ParenR(),
                    node.param_toggle[8] ? std::get<Tokens::ParenR>(std::get<Token>(params[8])) : Tokens::ParenR()
                ));
            break;
            case 95: 
                param_stack.emplace_front(pos, action_95(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Global>(std::get<Token>(params[1])) : Tokens::Global(),
                    node.param_toggle[2] ? std::get<std::string>(params[2]) : std::string(),
                    node.param_toggle[3] ? std::get<std::vector<std::string>>(params[3]) : std::vector<std::string>(),
                    node.param_toggle[4] ? std::get<GlobalType>(params[4]) : GlobalType(),
                    node.param_toggle[5] ? std::get<ConstInstr>(params[5]) : ConstInstr(),
                    node.param_toggle[6] ? std::get<Tokens::ParenR>(std::get<Token>(params[6])) : Tokens::ParenR()
                ));
            break;
            case 96: 
                param_stack.emplace_front(pos, action_96(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Global>(std::get<Token>(params[1])) : Tokens::Global(),
                    node.param_toggle[2] ? std::get<std::string>(params[2]) : std::string(),
                    node.param_toggle[3] ? std::get<std::vector<std::string>>(params[3]) : std::vector<std::string>(),
                    node.param_toggle[4] ? std::get<Tokens::ParenL>(std::get<Token>(params[4])) : Tokens::ParenL(),
                    node.param_toggle[5] ? std::get<Tokens::Import>(std::get<Token>(params[5])) : Tokens::Import(),
                    node.param_toggle[6] ? std::get<Tokens::String>(std::get<Token>(params[6])) : Tokens::String(),
                    node.param_toggle[7] ? std::get<Tokens::String>(std::get<Token>(params[7])) : Tokens::String(),
                    node.param_toggle[8] ? std::get<Tokens::ParenR>(std::get<Token>(params[8])) : Tokens::ParenR(),
                    node.param_toggle[9] ? std::get<GlobalType>(params[9]) : GlobalType(),
                    node.param_toggle[10] ? std::get<Tokens::ParenR>(std::get<Token>(params[10])) : Tokens::ParenR()
                ));
            break;
            case 97: 
                param_stack.emplace_front(pos, action_97(*this, positions,
                    node.param_toggle[0] ? std::get<std::vector<ConstInstr>>(params[0]) : std::vector<ConstInstr>(),
                    node.param_toggle[1] ? std::get<Tokens::ParenL>(std::get<Token>(params[1])) : Tokens::ParenL(),
                    node.param_toggle[2] ? std::get<ConstInstr>(params[2]) : ConstInstr(),
                    node.param_toggle[3] ? std::get<Tokens::ParenR>(std::get<Token>(params[3])) : Tokens::ParenR()
                ));
            break;
            case 98: 
                param_stack.emplace_front(pos, action_98(*this, positions,
                    node.param_toggle[0] ? std::get<std::vector<ConstInstr>>(params[0]) : std::vector<ConstInstr>(),
                    node.param_toggle[1] ? std::get<Tokens::ParenL>(std::get<Token>(params[1])) : Tokens::ParenL(),
                    node.param_toggle[2] ? std::get<Tokens::Item>(std::get<Token>(params[2])) : Tokens::Item(),
                    node.param_toggle[3] ? std::get<ConstInstr>(params[3]) : ConstInstr(),
                    node.param_toggle[4] ? std::get<Tokens::ParenR>(std::get<Token>(params[4])) : Tokens::ParenR()
                ));
            break;
            case 99: 
                param_stack.emplace_front(pos, action_99(*this, positions
                ));
            break;
            case 100: 
                param_stack.emplace_front(pos, action_100(*this, positions,
                    node.param_toggle[0] ? std::get<std::vector<ConstInstr>>(params[0]) : std::vector<ConstInstr>(),
                    node.param_toggle[1] ? std::get<u32_t>(params[1]) : u32_t()
                ));
            break;
            case 101: 
                param_stack.emplace_front(pos, action_101(*this, positions
                ));
            break;
            case 102: 
                param_stack.emplace_front(pos, action_102(*this, positions,
                    node.param_toggle[0] ? std::get<RefType>(params[0]) : RefType(),
                    node.param_toggle[1] ? std::get<std::vector<ConstInstr>>(params[1]) : std::vector<ConstInstr>()
                ));
            break;
            case 103: 
                param_stack.emplace_front(pos, action_103(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Func>(std::get<Token>(params[0])) : Tokens::Func(),
                    node.param_toggle[1] ? std::get<std::vector<ConstInstr>>(params[1]) : std::vector<ConstInstr>()
                ));
            break;
            case 104: 
                param_stack.emplace_front(pos, action_104(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Offset>(std::get<Token>(params[1])) : Tokens::Offset(),
                    node.param_toggle[2] ? std::get<ConstInstr>(params[2]) : ConstInstr(),
                    node.param_toggle[3] ? std::get<Tokens::ParenR>(std::get<Token>(params[3])) : Tokens::ParenR()
                ));
            break;
            case 105: 
                param_stack.emplace_front(pos, action_105(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<ConstInstr>(params[1]) : ConstInstr(),
                    node.param_toggle[2] ? std::get<Tokens::ParenR>(std::get<Token>(params[2])) : Tokens::ParenR()
                ));
            break;
            case 106: 
                param_stack.emplace_front(pos, action_106(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Table>(std::get<Token>(params[1])) : Tokens::Table(),
                    node.param_toggle[2] ? std::get<u32_t>(params[2]) : u32_t(),
                    node.param_toggle[3] ? std::get<Tokens::ParenR>(std::get<Token>(params[3])) : Tokens::ParenR(),
                    node.param_toggle[4] ? std::get<ConstInstr>(params[4]) : ConstInstr()
                ));
            break;
            case 107: 
                param_stack.emplace_front(pos, action_107(*this, positions,
                    node.param_toggle[0] ? std::get<ConstInstr>(params[0]) : ConstInstr()
                ));
            break;
            case 108: 
                param_stack.emplace_front(pos, action_108(*this, positions,
                    node.param_toggle[0] ? std::get<std::vector<byte_t>>(params[0]) : std::vector<byte_t>(),
                    node.param_toggle[1] ? std::get<Tokens::String>(std::get<Token>(params[1])) : Tokens::String()
                ));
            break;
            case 109: 
                param_stack.emplace_front(pos, action_109(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::String>(std::get<Token>(params[0])) : Tokens::String()
                ));
            break;
            case 110: 
                param_stack.emplace_front(pos, action_110(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Memory>(std::get<Token>(params[1])) : Tokens::Memory(),
                    node.param_toggle[2] ? std::get<u32_t>(params[2]) : u32_t(),
                    node.param_toggle[3] ? std::get<Tokens::ParenR>(std::get<Token>(params[3])) : Tokens::ParenR(),
                    node.param_toggle[4] ? std::get<ConstInstr>(params[4]) : ConstInstr()
                ));
            break;
            case 111: 
                param_stack.emplace_front(pos, action_111(*this, positions,
                    node.param_toggle[0] ? std::get<ConstInstr>(params[0]) : ConstInstr()
                ));
            break;
            case 112: 
                param_stack.emplace_front(pos, action_112(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Data>(std::get<Token>(params[1])) : Tokens::Data(),
                    node.param_toggle[2] ? std::get<std::string>(params[2]) : std::string(),
                    node.param_toggle[3] ? std::get<std::vector<byte_t>>(params[3]) : std::vector<byte_t>(),
                    node.param_toggle[4] ? std::get<Tokens::ParenR>(std::get<Token>(params[4])) : Tokens::ParenR()
                ));
            break;
            case 113: 
                param_stack.emplace_front(pos, action_113(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Data>(std::get<Token>(params[1])) : Tokens::Data(),
                    node.param_toggle[2] ? std::get<std::string>(params[2]) : std::string(),
                    node.param_toggle[3] ? std::get<std::pair<u32_t, ConstInstr>>(params[3]) : std::pair<u32_t, ConstInstr>(),
                    node.param_toggle[4] ? std::get<std::vector<byte_t>>(params[4]) : std::vector<byte_t>(),
                    node.param_toggle[5] ? std::get<Tokens::ParenR>(std::get<Token>(params[5])) : Tokens::ParenR()
                ));
            break;
            case 114: 
                param_stack.emplace_front(pos, action_114(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Elem>(std::get<Token>(params[1])) : Tokens::Elem(),
                    node.param_toggle[2] ? std::get<std::string>(params[2]) : std::string(),
                    node.param_toggle[3] ? std::get<std::pair<RefType, std::vector<ConstInstr>>>(params[3]) : std::pair<RefType, std::vector<ConstInstr>>(),
                    node.param_toggle[4] ? std::get<Tokens::ParenR>(std::get<Token>(params[4])) : Tokens::ParenR()
                ));
            break;
            case 115: 
                param_stack.emplace_front(pos, action_115(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Elem>(std::get<Token>(params[1])) : Tokens::Elem(),
                    node.param_toggle[2] ? std::get<std::string>(params[2]) : std::string(),
                    node.param_toggle[3] ? std::get<std::pair<u32_t, ConstInstr>>(params[3]) : std::pair<u32_t, ConstInstr>(),
                    node.param_toggle[4] ? std::get<std::pair<RefType, std::vector<ConstInstr>>>(params[4]) : std::pair<RefType, std::vector<ConstInstr>>(),
                    node.param_toggle[5] ? std::get<Tokens::ParenR>(std::get<Token>(params[5])) : Tokens::ParenR()
                ));
            break;
            case 116: 
                param_stack.emplace_front(pos, action_116(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Elem>(std::get<Token>(params[1])) : Tokens::Elem(),
                    node.param_toggle[2] ? std::get<std::string>(params[2]) : std::string(),
                    node.param_toggle[3] ? std::get<ConstInstr>(params[3]) : ConstInstr(),
                    node.param_toggle[4] ? std::get<std::vector<ConstInstr>>(params[4]) : std::vector<ConstInstr>(),
                    node.param_toggle[5] ? std::get<Tokens::ParenR>(std::get<Token>(params[5])) : Tokens::ParenR()
                ));
            break;
            case 117: 
                param_stack.emplace_front(pos, action_117(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Elem>(std::get<Token>(params[1])) : Tokens::Elem(),
                    node.param_toggle[2] ? std::get<std::string>(params[2]) : std::string(),
                    node.param_toggle[3] ? std::get<Tokens::Declare>(std::get<Token>(params[3])) : Tokens::Declare(),
                    node.param_toggle[4] ? std::get<std::pair<RefType, std::vector<ConstInstr>>>(params[4]) : std::pair<RefType, std::vector<ConstInstr>>(),
                    node.param_toggle[5] ? std::get<Tokens::ParenR>(std::get<Token>(params[5])) : Tokens::ParenR()
                ));
            break;
            case 118: 
                param_stack.emplace_front(pos, action_118(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ControlInstr>(std::get<Token>(params[0])) : Tokens::ControlInstr()
                ));
            break;
            case 119: 
                param_stack.emplace_front(pos, action_119(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Br>(std::get<Token>(params[0])) : Tokens::Br(),
                    node.param_toggle[1] ? std::get<u32_t>(params[1]) : u32_t()
                ));
            break;
            case 120: 
                param_stack.emplace_front(pos, action_120(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Br_if>(std::get<Token>(params[0])) : Tokens::Br_if(),
                    node.param_toggle[1] ? std::get<u32_t>(params[1]) : u32_t()
                ));
            break;
            case 121: 
                param_stack.emplace_front(pos, action_121(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Br_table>(std::get<Token>(params[0])) : Tokens::Br_table(),
                    node.param_toggle[1] ? std::get<std::vector<u32_t>>(params[1]) : std::vector<u32_t>()
                ));
            break;
            case 122: 
                param_stack.emplace_front(pos, action_122(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Call>(std::get<Token>(params[0])) : Tokens::Call(),
                    node.param_toggle[1] ? std::get<u32_t>(params[1]) : u32_t()
                ));
            break;
            case 123: 
                param_stack.emplace_front(pos, action_123(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Call_indirect>(std::get<Token>(params[0])) : Tokens::Call_indirect(),
                    node.param_toggle[1] ? std::get<u32_t>(params[1]) : u32_t(),
                    node.param_toggle[2] ? std::get<u32_t>(params[2]) : u32_t()
                ));
            break;
            case 124: 
                param_stack.emplace_front(pos, action_124(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Call_indirect>(std::get<Token>(params[0])) : Tokens::Call_indirect(),
                    node.param_toggle[1] ? std::get<u32_t>(params[1]) : u32_t()
                ));
            break;
            default:
            break;
        }
    };
    while(!entry_stack.empty()){
        std::variant<Node, token_t>& entry = entry_stack.front();
        if(std::holds_alternative<token_t>(entry)){
            token_t token = std::get<token_t>(entry);
            param_stack.emplace_front(token.pos, token);
            entry_stack.pop_front();
        }else if(std::holds_alternative<Node>(entry)){
            Node& node = std::get<Node>(entry);
            if(node.children.size() > 0){
                for(auto it = node.children.rbegin(); it != node.children.rend(); it = std::next(it)){
                    extract_entry(*it);
                }
                node.children.clear();
            }else{
                invoke_action(node);
                entry_stack.pop_front();
            }
        }
    }
    return std::get<WasmModule>(param_stack.front().second);
}

std::list<std::pair<Parser::term_t,Parser::token_t>> Parser::Node::flatten(){
    std::list<std::pair<term_t,token_t>> results;
    for(Entry& child : children){
        if(std::holds_alternative<token_t>(child.elem)){
            results.emplace_back(child.term, std::get<token_t>(child.elem));
        }else{
            auto flattened = std::get<Node>(child.elem).flatten();
            results.insert(results.end(), flattened.begin(), flattened.end());
        }
    }
    return results;
}

WasmVM::ParseError::ParseError(Position pos, Parser::term_t term) : pos(pos) {
    static const std::vector<std::string> terms {
        "",
        "EOF",
        "ParenL",
        "ParenR",
        "Id",
        "String",
        "Integer",
        "Float",
        "MemOffset",
        "MemAlign",
        "Module",
        "Type",
        "Import",
        "Export",
        "Param",
        "Result",
        "Funcref",
        "Extern",
        "Externref",
        "Func",
        "Table",
        "Memory",
        "Global",
        "Mut",
        "Local",
        "Elem",
        "Item",
        "Declare",
        "Offset",
        "Data",
        "Start",
        "Then",
        "ControlInstr",
        "Block",
        "End",
        "Loop",
        "If",
        "Else",
        "Br",
        "Br_if",
        "Br_table",
        "Call",
        "Call_indirect",
        "Ref_null",
        "Ref_is_null",
        "Ref_func",
        "Drop",
        "Select",
        "VariableInstr",
        "TableInstr",
        "Table_copy",
        "Table_init",
        "Elem_drop",
        "Memory_size",
        "Memory_grow",
        "Memory_fill",
        "Memory_init",
        "Memory_copy",
        "Data_drop",
        "MemoryInstr",
        "I32_const",
        "I64_const",
        "F32_const",
        "F64_const",
        "NumericInstr",
        "NumType",
        "constexpr",
        "data",
        "datastrings",
        "elem",
        "elemexprs",
        "elemlist",
        "export",
        "exportabbr",
        "f32",
        "f64",
        "func",
        "funcidx",
        "funcindices",
        "functype",
        "global",
        "globalidx",
        "globaltype",
        "heaptype",
        "i32",
        "i64",
        "id",
        "import",
        "importabbr",
        "importdesc",
        "instrs",
        "labelidx",
        "labelindices",
        "limits",
        "locals",
        "memidx",
        "memoffset",
        "memory",
        "module",
        "modulefield",
        "offset",
        "params",
        "plaininstr",
        "reftype",
        "results",
        "table",
        "tableidx",
        "tableoffset",
        "tabletype",
        "type",
        "typeidx",
        "typeuse",
        "u32",
        "u64",
        "valtype",
        "valtypes",
    };
    msg = "unexpected " + terms[term];
}
} // namespace WasmVM


namespace WasmVM {
index_t Parser::IndexMap::insert(IndexType type){
    index_t index = handlers.size();
    handlers.emplace_back(indices.emplace(type, serial++).first);
    return index;
}
index_t Parser::IndexMap::insert(std::string id, IndexType type){
    if(!id_map.contains(id)){
        id_map[id] = insert(type);
    }
    return id_map[id];
}
index_t Parser::IndexMap::get(std::string id){
    return id_map.contains(id) ? id_map[id] : -1;
}
bool Parser::IndexMap::contains(std::string id){
    return id_map.contains(id);
}
std::optional<Parser::IndexMap::Index> Parser::IndexMap::operator[](index_t index){
    if(index < handlers.size()){
        return *handlers[index];
    }
    return std::nullopt;
}
void Parser::reset(){
    types.clear();
    exports.clear();
    type_indices.clear();
    local_indices.clear();
    label_indices.clear();
    elem_indices.clear();
    data_indices.clear();
    local_count = 0;
    elem_count = 0;
    data_count = 0;
    func_indices = IndexMap();
    table_indices = IndexMap();
    mem_indices = IndexMap();
    global_indices = IndexMap();
}
} // namespace WasmVM
        
