/** generated by ParGen **/
#include "Parser.hpp"

#include <stack>
#include <list>
#include <variant>
#include <vector>
#include <algorithm>
#include <array>

namespace WasmVM {

using namespace Tokens;

Parser::Parser(Lexer& lexer) : lexer(lexer) {}

std::pair<Parser::term_t, Parser::token_t> Parser::fetch(){
    if(!buffer.empty()){
        auto token = buffer.front();
        buffer.pop_front();
        return token;
    }
    Token res = lexer.get();
    return {res.index() + 1, res};
}

static WasmModule action_1(Parser& _this, std::vector<Position> _pos, WasmModule _op0){
    _this.clear_locals();
    return _op0;
}
static WasmModule action_2(Parser& _this, std::vector<Position> _pos, WasmModule _op0, std::variant<WasmFunc, WasmImport> _op1){
    if(std::holds_alternative<WasmImport>(_op1)){
        _op0.imports.emplace_back(std::get<WasmImport>(_op1));
    }else{
        _op0.funcs.emplace_back(std::get<WasmFunc>(_op1));
    }
    _this.clear_locals();
    return _op0;
}
static WasmModule action_3(Parser& _this, std::vector<Position> _pos){
    return WasmModule();
}
static WasmModule action_4(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Module _op1, WasmModule _op2, Tokens::ParenR _op3){
    for(auto& functype : _this.types){
        _op2.types.emplace_back(functype.first);
    }
    for(auto& exports : _this.exports){
        _op2.exports.emplace_back(exports.second);
    }
    _this.reset();
    return _op2;
}
static WasmModule action_5(Parser& _this, std::vector<Position> _pos){
    _this.reset();
    return WasmModule();
}
static ValueType action_6(Parser& _this, std::vector<Position> _pos, Tokens::NumType _op0){
    if(_op0.value == "i32"){
        return ValueType::i32;
    }else if(_op0.value == "i64"){
        return ValueType::i64;
    }else if(_op0.value == "f32"){
        return ValueType::f32;
    }else{
        return ValueType::f64;
    }
}
static ValueType action_7(Parser& _this, std::vector<Position> _pos, Tokens::Funcref _op0){
    return ValueType::funcref;
}
static ValueType action_8(Parser& _this, std::vector<Position> _pos, Tokens::Externref _op0){
    return ValueType::externref;
}
static RefType action_9(Parser& _this, std::vector<Position> _pos, Tokens::Funcref _op0){
    return RefType::funcref;
}
static RefType action_10(Parser& _this, std::vector<Position> _pos, Tokens::Externref _op0){
    return RefType::externref;
}
static std::vector<ValueType> action_11(Parser& _this, std::vector<Position> _pos, std::vector<ValueType> _op0, ValueType _op1){
    _op0.emplace_back(_op1);
    return _op0;
}
static std::vector<ValueType> action_12(Parser& _this, std::vector<Position> _pos){
    return std::vector<ValueType>();
}
static std::vector<ValueType> action_13(Parser& _this, std::vector<Position> _pos, std::vector<ValueType> _op0, Tokens::ParenL _op1, Tokens::Param _op2, Tokens::Id _op3, ValueType _op4, Tokens::ParenR _op5){
    if(_this.local_indices.contains(_op3.value)){
        throw Exception::Parse("parameter ID '" + _op3.value + "' is duplicated", {_pos[3].line, _pos[3].column});
    }
    _this.local_indices[_op3.value] = _this.local_count;
    _this.local_count += 1;
    _op0.emplace_back(_op4);
    return _op0;
}
static std::vector<ValueType> action_14(Parser& _this, std::vector<Position> _pos, std::vector<ValueType> _op0, Tokens::ParenL _op1, Tokens::Param _op2, std::vector<ValueType> _op3, Tokens::ParenR _op4){
    _op0.insert(_op0.end(), _op3.begin(), _op3.end());
    _this.local_count += _op3.size();
    return _op0;
}
static std::vector<ValueType> action_15(Parser& _this, std::vector<Position> _pos){
    return std::vector<ValueType>();
}
static std::vector<ValueType> action_16(Parser& _this, std::vector<Position> _pos, std::vector<ValueType> _op0, Tokens::ParenL _op1, Tokens::Result _op2, std::vector<ValueType> _op3, Tokens::ParenR _op4){
    _op0.insert(_op0.end(), _op3.begin(), _op3.end());
    return _op0;
}
static std::vector<ValueType> action_17(Parser& _this, std::vector<Position> _pos){
    return std::vector<ValueType>();
}
static FuncType action_18(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Func _op1, std::vector<ValueType> _op2, std::vector<ValueType> _op3, Tokens::ParenR _op4){
    return FuncType {.params = _op2, .results = _op3};
}
static std::string action_19(Parser& _this, std::vector<Position> _pos, Tokens::Id _op0){
    return _op0.value;
}
static std::string action_20(Parser& _this, std::vector<Position> _pos){
    return "";
}
static void action_21(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Type _op1, std::string _op2, FuncType _op3, Tokens::ParenR _op4){
    if(!_op2.empty()){
        if(_this.type_indices.contains(_op2)){
            throw Exception::Parse("type ID '" + _op2 + "' is duplicated", {_pos[2].line, _pos[2].column});
        }
        _this.type_indices[_op2] = _this.types.size();
    }
    _this.types.emplace_back(_op3, _this.local_indices);
}
static u32_t action_22(Parser& _this, std::vector<Position> _pos, Tokens::Integer _op0){
    try{
        return std::stoul(_op0.value, 0);
    }catch(std::invalid_argument){
        throw Exception::Parse("invalid u32 integer '" + _op0.value + "'", {_pos[0].line, _pos[0].column});
    }
}
static u64_t action_23(Parser& _this, std::vector<Position> _pos, Tokens::Integer _op0){
    try{
        return std::stoull(_op0.value, 0);
    }catch(std::invalid_argument){
        throw Exception::Parse("invalid u64 integer '" + _op0.value + "'", {_pos[0].line, _pos[0].column});
    }
}
static i32_t action_24(Parser& _this, std::vector<Position> _pos, Tokens::Integer _op0){
    try{
        return std::stol(_op0.value, 0);
    }catch(std::invalid_argument){
        throw Exception::Parse("invalid i32 integer '" + _op0.value + "'", {_pos[0].line, _pos[0].column});
    }
}
static i64_t action_25(Parser& _this, std::vector<Position> _pos, Tokens::Integer _op0){
    try{
        return std::stoll(_op0.value, 0);
    }catch(std::invalid_argument){
        throw Exception::Parse("invalid i64 integer '" + _op0.value + "'", {_pos[0].line, _pos[0].column});
    }
}
static f32_t action_26(Parser& _this, std::vector<Position> _pos, Tokens::Float _op0){
    try{
        auto nanpos = _op0.value.find("nan:0x");
        if(nanpos != std::string::npos){
            u32_t nan_imm = 0x7f800000UL + std::stoul(_op0.value.substr(nanpos + 4), nullptr, 16);
            if(_op0.value.starts_with("-")){
                nan_imm += 0x80000000UL;
            }
            return *reinterpret_cast<f32_t*>(&nan_imm);
        }else{
            return std::stof(_op0.value);
        }
    }catch(std::invalid_argument){
        throw Exception::Parse("invalid f32 number '" + _op0.value + "'", {_pos[0].line, _pos[0].column});
    }
}
static f64_t action_27(Parser& _this, std::vector<Position> _pos, Tokens::Float _op0){
    try{
        auto nanpos = _op0.value.find("nan:0x");
        if(nanpos != std::string::npos){
            u64_t nan_imm = 0x7ff0000000000000ULL + std::stoull(_op0.value.substr(nanpos + 4), nullptr, 16);
            if(_op0.value.starts_with("-")){
                nan_imm += 0x8000000000000000ULL;
            }
            return *reinterpret_cast<f64_t*>(&nan_imm);
        }else{
            return std::stod(_op0.value);
        }
    }catch(std::invalid_argument){
        throw Exception::Parse("invalid f64 number '" + _op0.value + "'", {_pos[0].line, _pos[0].column});
    }
}
static u32_t action_28(Parser& _this, std::vector<Position> _pos, u32_t _op0){
    return _op0;
}
static u32_t action_29(Parser& _this, std::vector<Position> _pos, Tokens::Id _op0){
    if(!_this.type_indices.contains(_op0.value)){
        throw Exception::Parse("type ID '" + _op0.value + "' not found", {_pos[0].line, _pos[0].column});
    }
    return _this.type_indices[_op0.value];
}
static u32_t action_30(Parser& _this, std::vector<Position> _pos, u32_t _op0){
    return _op0;
}
static u32_t action_31(Parser& _this, std::vector<Position> _pos, Tokens::Id _op0){
    index_t index = _this.func_indices.get(_op0.value);
    if(index == -1){
        throw Exception::Parse("function ID '" + _op0.value + "' not found", {_pos[0].line, _pos[0].column});
    }
    return index;
}
static u32_t action_32(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Type _op1, u32_t _op2, Tokens::ParenR _op3, std::vector<ValueType> _op4, std::vector<ValueType> _op5){
    if(_op4.empty() && _op5.empty()){
        return _op2;
    }
    std::pair<FuncType, std::map<std::string, index_t>> derived = _this.types[_op2];
    for(auto& id_pair : _this.local_indices){
        if(derived.second.contains(id_pair.first)){
            throw Exception::Parse("parameter ID '" + id_pair.first + "' is duplicated", {_pos[4].line, _pos[4].column});
        }
        derived.second[id_pair.first] = id_pair.second + derived.first.params.size();
    }
    derived.first.params.insert(derived.first.params.end(), _op4.begin(), _op4.end());
    derived.first.results.insert(derived.first.results.end(), _op5.begin(), _op5.end());
    index_t index = _this.types.size();
    _this.types.emplace_back(derived);
    return index;
}
static u32_t action_33(Parser& _this, std::vector<Position> _pos, std::vector<ValueType> _op0, std::vector<ValueType> _op1){
    index_t index = _this.types.size();
    _this.types.emplace_back(FuncType {.params = _op0, .results = _op1}, _this.local_indices);
    return index;
}
static u32_t action_34(Parser& _this, std::vector<Position> _pos){
    index_t index = _this.types.size();
    _this.types.emplace_back(FuncType(), std::map<std::string, index_t>());
    return index;
}
static std::optional<std::pair<std::string, std::string>> action_35(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Import _op1, Tokens::String _op2, Tokens::String _op3, Tokens::ParenR _op4){
    return std::pair<std::string, std::string> {_op2.value, _op3.value};
}
static std::optional<std::pair<std::string, std::string>> action_36(Parser& _this, std::vector<Position> _pos){
    return std::nullopt;
}
static std::vector<std::string> action_37(Parser& _this, std::vector<Position> _pos, std::vector<std::string> _op0, Tokens::ParenL _op1, Tokens::Export _op2, Tokens::String _op3, Tokens::ParenR _op4){
    if(_this.exports.contains(_op3.value)){
        throw Exception::Parse("export name '" + _op3.value + "' is duplicated", {_pos[3].line, _pos[3].column});
    }
    _op0.emplace_back(_op3.value);
    return _op0;
}
static std::vector<std::string> action_38(Parser& _this, std::vector<Position> _pos){
    return std::vector<std::string>();
}
static std::vector<ValueType> action_39(Parser& _this, std::vector<Position> _pos, std::vector<ValueType> _op0, Tokens::ParenL _op1, Tokens::Local _op2, Tokens::Id _op3, ValueType _op4, Tokens::ParenR _op5){
    if(_this.local_indices.contains(_op3.value)){
        throw Exception::Parse("local name '" + _op3.value + "' is duplicated", {_pos[3].line, _pos[3].column});
    }
    _this.local_indices[_op3.value] = _this.local_count;
    _this.local_count += 1;
    _op0.emplace_back(_op4);
    return _op0;
}
static std::vector<ValueType> action_40(Parser& _this, std::vector<Position> _pos, std::vector<ValueType> _op0, Tokens::ParenL _op1, Tokens::Local _op2, std::vector<ValueType> _op3, Tokens::ParenR _op4){
    _op0.insert(_op0.end(), _op3.begin(), _op3.end());
    _this.local_count += _op3.size();
    return _op0;
}
static std::vector<ValueType> action_41(Parser& _this, std::vector<Position> _pos){
    return std::vector<ValueType>();
}
static std::vector<WasmInstr> action_42(Parser& _this, std::vector<Position> _pos){
    return std::vector<WasmInstr>();
}
static std::variant<WasmFunc, WasmImport> action_43(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Func _op1, std::string _op2, std::vector<std::string> _op3, u32_t _op4, std::vector<ValueType> _op5, std::vector<WasmInstr> _op6, Tokens::ParenR _op7){
    index_t index = 0;
    if(_op2.empty()){
        index = _this.table_indices.insert(Parser::IndexMap::Normal);
    }else{
        if(_this.func_indices.contains(_op2)){
            throw Exception::Parse("function ID '" + _op2 + "' is duplicated", {_pos[2].line, _pos[2].column});
        }
        index = _this.table_indices.insert(_op2, Parser::IndexMap::Normal);
    }
    for(std::string export_name : _op3){
        _this.exports[export_name] = WasmExport {.name = export_name, .desc = WasmExport::DescType::func, .index = index};
    }
    _op6.emplace_back(Instr::End());
    return WasmFunc {.typeidx = _op4, .locals = _op5, .body = _op6};
}
static std::variant<WasmFunc, WasmImport> action_44(Parser& _this, std::vector<Position> _pos, Tokens::ParenL _op0, Tokens::Func _op1, std::string _op2, std::vector<std::string> _op3, Tokens::ParenL _op4, Tokens::Import _op5, Tokens::String _op6, Tokens::String _op7, Tokens::ParenR _op8, u32_t _op9, Tokens::ParenR _op10){
    index_t index = 0;
    if(_op2.empty()){
        index = _this.table_indices.insert(Parser::IndexMap::Import);
    }else{
        if(_this.func_indices.contains(_op2)){
            throw Exception::Parse("function ID '" + _op2 + "' is duplicated", {_pos[2].line, _pos[2].column});
        }
        index = _this.table_indices.insert(_op2, Parser::IndexMap::Import);
    }
    for(std::string export_name : _op3){
        _this.exports[export_name] = WasmExport {.name = export_name, .desc = WasmExport::DescType::func, .index = index};
    }
    return WasmImport {.module = _op6.value, .name = _op7.value, .desc = _op9};
}

std::vector<Parser::State> Parser::table = {
    {{1, {{3,{}},}},{2, {{5,{}},}},{78, {{7,{}},}},},
    {{1, {{10,{1,}},}},},
    {{10, {{9,{}},}},},
    {{1, {{0,{}},}},},
    {{2, {{11,{}},}},{3, {{13,{}},}},{69, {{15,{}},}},{79, {{17,{}},}},{83, {{19,{}},}},},
    {{11, {{21,{}},}},{19, {{23,{}},}},},
    {{1, {{8,{1,1,0,1,}},}},},
    {{2, {{4,{0,1,}},}},{3, {{4,{0,1,}},}},},
    {{2, {{11,{}},}},{3, {{25,{}},}},{69, {{27,{}},}},{83, {{29,{}},}},},
    {{2, {{2,{0,1,}},}},{3, {{2,{0,1,}},}},},
    {{2, {{195,{}},}},{4, {{105,{}},}},{71, {{31,{}},}},{74, {{33,{}},}},},
    {{2, {{103,{}},}},{3, {{35,{}},}},{4, {{105,{}},}},{66, {{37,{}},}},{74, {{39,{}},}},{76, {{41,{}},}},{77, {{43,{}},}},{80, {{369,{}},}},{82, {{365,{}},}},{85, {{45,{}},}},},
    {{1, {{8,{1,1,1,1,}},}},},
    {{2, {{4,{1,1,}},}},{3, {{4,{1,1,}},}},},
    {{2, {{2,{1,1,}},}},{3, {{2,{1,1,}},}},},
    {{3, {{49,{}},}},},
    {{2, {{195,{}},}},{71, {{51,{}},}},},
    {{2, {{86,{1,1,0,0,0,0,0,1,}},}},{3, {{86,{1,1,0,0,0,0,0,1,}},}},},
    {{2, {{65,{}},}},{3, {{67,{}},}},{76, {{69,{}},}},{77, {{71,{}},}},{80, {{369,{}},}},{82, {{365,{}},}},{85, {{73,{}},}},},
    {{2, {{197,{}},}},{3, {{75,{}},}},{66, {{77,{}},}},{76, {{79,{}},}},{77, {{81,{}},}},{80, {{369,{}},}},{82, {{365,{}},}},{85, {{83,{}},}},},
    {{3, {{85,{}},}},},
    {{2, {{87,{}},}},{3, {{89,{}},}},{76, {{91,{}},}},},
    {{2, {{65,{}},}},{3, {{97,{}},}},{76, {{99,{}},}},{77, {{101,{}},}},},
    {{2, {{65,{}},}},{3, {{107,{}},}},{80, {{109,{}},}},{82, {{111,{}},}},},
    {{2, {{42,{1,1,0,1,1,}},}},{3, {{42,{1,1,0,1,1,}},}},},
    {{3, {{113,{}},}},},
    {{4, {{115,{}},}},{6, {{117,{}},}},{84, {{119,{}},}},{86, {{121,{}},}},},
    {{5, {{123,{}},}},},
    {{5, {{125,{}},}},},
    {{3, {{127,{}},}},{4, {{129,{}},}},{16, {{321,{}},}},{18, {{323,{}},}},{65, {{325,{}},}},{88, {{273,{}},}},{89, {{131,{}},}},},
    {{3, {{133,{}},}},{16, {{321,{}},}},{18, {{323,{}},}},{65, {{325,{}},}},{88, {{273,{}},}},{89, {{135,{}},}},},
    {{3, {{137,{}},}},{4, {{139,{}},}},{16, {{321,{}},}},{18, {{323,{}},}},{65, {{325,{}},}},{88, {{273,{}},}},{89, {{141,{}},}},},
    {{11, {{53,{}},}},{12, {{143,{}},}},{13, {{145,{}},}},{14, {{59,{}},}},{15, {{61,{}},}},{24, {{63,{}},}},},
    {{2, {{86,{1,1,0,1,0,0,0,1,}},}},{3, {{86,{1,1,0,1,0,0,0,1,}},}},},
    {{3, {{147,{}},}},},
    {{2, {{87,{}},}},{3, {{149,{}},}},{76, {{151,{}},}},},
    {{2, {{65,{}},}},{3, {{153,{}},}},{76, {{155,{}},}},{77, {{157,{}},}},},
    {{2, {{86,{1,1,1,0,0,0,0,1,}},}},{3, {{86,{1,1,1,0,0,0,0,1,}},}},},
    {{2, {{65,{}},}},{3, {{161,{}},}},{76, {{163,{}},}},{77, {{165,{}},}},{80, {{369,{}},}},{82, {{365,{}},}},{85, {{167,{}},}},},
    {{3, {{169,{}},}},},
    {{2, {{87,{}},}},{3, {{171,{}},}},{76, {{173,{}},}},},
    {{2, {{65,{}},}},{3, {{175,{}},}},{76, {{177,{}},}},{77, {{179,{}},}},},
    {{2, {{86,{1,1,0,0,0,0,1,1,}},}},{3, {{86,{1,1,0,0,0,0,1,1,}},}},},
    {{24, {{181,{}},}},},
    {{2, {{86,{1,1,0,0,0,1,0,1,}},}},{3, {{86,{1,1,0,0,0,1,0,1,}},}},},
    {{3, {{183,{}},}},},
    {{14, {{185,{}},}},{15, {{61,{}},}},},
    {{15, {{187,{}},}},},
    {{2, {{86,{1,1,0,0,1,0,0,1,}},}},{3, {{86,{1,1,0,0,1,0,0,1,}},}},},
    {{3, {{189,{}},}},},
    {{2, {{87,{}},}},{3, {{191,{}},}},{76, {{193,{}},}},},
    {{11, {{53,{}},}},{12, {{55,{}},}},{13, {{57,{}},}},{14, {{59,{}},}},{15, {{61,{}},}},{24, {{63,{}},}},},
    {{2, {{38,{1,}},}},{3, {{38,{1,}},}},},
    {{3, {{36,{1,1,0,0,1,}},}},},
    {{2, {{93,{}},}},{3, {{199,{}},}},{82, {{201,{}},}},},
    {{2, {{95,{}},}},{3, {{203,{}},}},},
    {{2, {{42,{1,1,1,1,1,}},}},{3, {{42,{1,1,1,1,1,}},}},},
    {{3, {{58,{1,}},}},},
    {{3, {{44,{1,}},}},},
    {{3, {{205,{}},}},},
    {{3, {{56,{1,}},}},},
    {{5, {{207,{}},}},},
    {{3, {{209,{}},}},},
    {{2, {{28,{0,1,1,0,1,}},}},{3, {{28,{0,1,1,0,1,}},}},},
    {{16, {{321,{}},}},{18, {{323,{}},}},{65, {{325,{}},}},{88, {{211,{}},}},},
    {{3, {{213,{}},}},{16, {{321,{}},}},{18, {{323,{}},}},{65, {{325,{}},}},{88, {{215,{}},}},},
    {{2, {{32,{0,1,1,0,1,}},}},{3, {{32,{0,1,1,0,1,}},}},},
    {{3, {{217,{}},}},{16, {{321,{}},}},{18, {{323,{}},}},{65, {{325,{}},}},{88, {{215,{}},}},},
    {{2, {{80,{0,1,1,0,1,}},}},{3, {{80,{0,1,1,0,1,}},}},},
    {{16, {{321,{}},}},{18, {{323,{}},}},{65, {{325,{}},}},{88, {{219,{}},}},},
    {{3, {{221,{}},}},{16, {{321,{}},}},{18, {{323,{}},}},{65, {{325,{}},}},{88, {{215,{}},}},},
    {{5, {{223,{}},}},},
    {{5, {{225,{}},}},},
    {{2, {{86,{1,1,0,1,0,0,1,1,}},}},{3, {{86,{1,1,0,1,0,0,1,1,}},}},},
    {{2, {{86,{1,1,0,1,0,1,0,1,}},}},{3, {{86,{1,1,0,1,0,1,0,1,}},}},},
    {{3, {{227,{}},}},},
    {{2, {{86,{1,1,0,1,1,0,0,1,}},}},{3, {{86,{1,1,0,1,1,0,0,1,}},}},},
    {{3, {{229,{}},}},},
    {{2, {{87,{}},}},{3, {{231,{}},}},{76, {{233,{}},}},},
    {{5, {{235,{}},}},},
    {{2, {{86,{1,1,1,1,0,0,0,1,}},}},{3, {{86,{1,1,1,1,0,0,0,1,}},}},},
    {{3, {{239,{}},}},},
    {{2, {{87,{}},}},{3, {{241,{}},}},{76, {{243,{}},}},},
    {{2, {{65,{}},}},{3, {{245,{}},}},{76, {{247,{}},}},{77, {{249,{}},}},},
    {{2, {{86,{1,1,1,0,0,0,1,1,}},}},{3, {{86,{1,1,1,0,0,0,1,1,}},}},},
    {{2, {{86,{1,1,1,0,0,1,0,1,}},}},{3, {{86,{1,1,1,0,0,1,0,1,}},}},},
    {{3, {{251,{}},}},},
    {{2, {{86,{1,1,1,0,1,0,0,1,}},}},{3, {{86,{1,1,1,0,1,0,0,1,}},}},},
    {{3, {{253,{}},}},},
    {{2, {{87,{}},}},{3, {{255,{}},}},{76, {{257,{}},}},},
    {{3, {{259,{}},}},{4, {{261,{}},}},{16, {{321,{}},}},{18, {{323,{}},}},{65, {{325,{}},}},{88, {{273,{}},}},{89, {{263,{}},}},},
    {{2, {{86,{1,1,0,0,0,1,1,1,}},}},{3, {{86,{1,1,0,0,0,1,1,1,}},}},},
    {{3, {{265,{}},}},{4, {{267,{}},}},{16, {{321,{}},}},{18, {{323,{}},}},{65, {{325,{}},}},{88, {{273,{}},}},{89, {{269,{}},}},},
    {{3, {{271,{}},}},{16, {{321,{}},}},{18, {{323,{}},}},{65, {{325,{}},}},{88, {{273,{}},}},{89, {{275,{}},}},},
    {{2, {{86,{1,1,0,0,1,0,1,1,}},}},{3, {{86,{1,1,0,0,1,0,1,1,}},}},},
    {{2, {{86,{1,1,0,0,1,1,0,1,}},}},{3, {{86,{1,1,0,0,1,1,0,1,}},}},},
    {{3, {{277,{}},}},},
    {{19, {{47,{}},}},},
    {{11, {{53,{}},}},{12, {{159,{}},}},{13, {{57,{}},}},{14, {{59,{}},}},{15, {{61,{}},}},{24, {{63,{}},}},},
    {{3, {{36,{1,1,1,0,1,}},}},},
    {{2, {{95,{}},}},{3, {{281,{}},}},},
    {{3, {{36,{1,1,0,1,1,}},}},},
    {{2, {{65,{}},{64,{1,1,1,1,0,0,}},}},{3, {{64,{1,1,1,1,0,0,}},}},{80, {{283,{}},}},{82, {{371,{}},}},},
    {{3, {{285,{}},}},},
    {{2, {{74,{0,1,1,1,1,}},}},{3, {{74,{0,1,1,1,1,}},}},},
    {{3, {{287,{}},}},},
    {{2, {{28,{0,1,1,1,1,}},}},{3, {{28,{0,1,1,1,1,}},}},},
    {{3, {{22,{1,1,}},}},{16, {{22,{1,1,}},}},{18, {{22,{1,1,}},}},{65, {{22,{1,1,}},}},},
    {{2, {{32,{0,1,1,1,1,}},}},{3, {{32,{0,1,1,1,1,}},}},},
    {{3, {{289,{}},}},},
    {{2, {{80,{0,1,1,1,1,}},}},{3, {{80,{0,1,1,1,1,}},}},},
    {{5, {{291,{}},}},},
    {{3, {{293,{}},}},},
    {{2, {{86,{1,1,0,1,0,1,1,1,}},}},{3, {{86,{1,1,0,1,0,1,1,1,}},}},},
    {{2, {{86,{1,1,0,1,1,0,1,1,}},}},{3, {{86,{1,1,0,1,1,0,1,1,}},}},},
    {{2, {{86,{1,1,0,1,1,1,0,1,}},}},{3, {{86,{1,1,0,1,1,1,0,1,}},}},},
    {{3, {{295,{}},}},},
    {{5, {{297,{}},}},},
    {{5, {{299,{}},}},},
    {{2, {{86,{1,1,1,1,0,0,1,1,}},}},{3, {{86,{1,1,1,1,0,0,1,1,}},}},},
    {{2, {{86,{1,1,1,1,0,1,0,1,}},}},{3, {{86,{1,1,1,1,0,1,0,1,}},}},},
    {{3, {{301,{}},}},},
    {{2, {{86,{1,1,1,1,1,0,0,1,}},}},{3, {{86,{1,1,1,1,1,0,0,1,}},}},},
    {{3, {{303,{}},}},},
    {{2, {{87,{}},}},{3, {{305,{}},}},{76, {{307,{}},}},},
    {{2, {{86,{1,1,1,0,0,1,1,1,}},}},{3, {{86,{1,1,1,0,0,1,1,1,}},}},},
    {{2, {{86,{1,1,1,0,1,0,1,1,}},}},{3, {{86,{1,1,1,0,1,0,1,1,}},}},},
    {{2, {{86,{1,1,1,0,1,1,0,1,}},}},{3, {{86,{1,1,1,0,1,1,0,1,}},}},},
    {{3, {{309,{}},}},},
    {{2, {{80,{1,1,1,0,1,}},}},{3, {{80,{1,1,1,0,1,}},}},},
    {{16, {{321,{}},}},{18, {{323,{}},}},{65, {{325,{}},}},{88, {{311,{}},}},},
    {{3, {{313,{}},}},{16, {{321,{}},}},{18, {{323,{}},}},{65, {{325,{}},}},{88, {{215,{}},}},},
    {{2, {{28,{1,1,1,0,1,}},}},{3, {{28,{1,1,1,0,1,}},}},},
    {{16, {{321,{}},}},{18, {{323,{}},}},{65, {{325,{}},}},{88, {{315,{}},}},},
    {{3, {{317,{}},}},{16, {{321,{}},}},{18, {{323,{}},}},{65, {{325,{}},}},{88, {{215,{}},}},},
    {{2, {{32,{1,1,1,0,1,}},}},{3, {{32,{1,1,1,0,1,}},}},},
    {{3, {{22,{0,1,}},}},{16, {{22,{0,1,}},}},{18, {{22,{0,1,}},}},{65, {{22,{0,1,}},}},},
    {{3, {{319,{}},}},{16, {{321,{}},}},{18, {{323,{}},}},{65, {{325,{}},}},{88, {{215,{}},}},},
    {{2, {{86,{1,1,0,0,1,1,1,1,}},}},{3, {{86,{1,1,0,0,1,1,1,1,}},}},},
    {{11, {{53,{}},}},{12, {{237,{}},}},{14, {{59,{}},}},{15, {{61,{}},}},{24, {{63,{}},}},},
    {{3, {{36,{1,1,1,1,1,}},}},},
    {{2, {{93,{}},{64,{1,1,1,1,1,0,}},}},{3, {{64,{1,1,1,1,1,0,}},}},{82, {{373,{}},}},},
    {{2, {{65,{}},}},{3, {{327,{}},}},{80, {{369,{}},}},{82, {{365,{}},}},{85, {{329,{}},}},},
    {{2, {{26,{0,1,1,1,1,1,}},}},{3, {{26,{0,1,1,1,1,1,}},}},},
    {{2, {{78,{0,1,1,1,1,1,}},}},{3, {{78,{0,1,1,1,1,1,}},}},},
    {{3, {{331,{}},}},},
    {{2, {{74,{1,1,1,1,1,}},}},{3, {{74,{1,1,1,1,1,}},}},},
    {{2, {{86,{1,1,0,1,1,1,1,1,}},}},{3, {{86,{1,1,0,1,1,1,1,1,}},}},},
    {{3, {{333,{}},}},},
    {{5, {{335,{}},}},},
    {{2, {{86,{1,1,1,1,0,1,1,1,}},}},{3, {{86,{1,1,1,1,0,1,1,1,}},}},},
    {{2, {{86,{1,1,1,1,1,0,1,1,}},}},{3, {{86,{1,1,1,1,1,0,1,1,}},}},},
    {{2, {{86,{1,1,1,1,1,1,0,1,}},}},{3, {{86,{1,1,1,1,1,1,0,1,}},}},},
    {{3, {{337,{}},}},},
    {{2, {{86,{1,1,1,0,1,1,1,1,}},}},{3, {{86,{1,1,1,0,1,1,1,1,}},}},},
    {{3, {{339,{}},}},},
    {{2, {{80,{1,1,1,1,1,}},}},{3, {{80,{1,1,1,1,1,}},}},},
    {{3, {{341,{}},}},},
    {{2, {{28,{1,1,1,1,1,}},}},{3, {{28,{1,1,1,1,1,}},}},},
    {{2, {{32,{1,1,1,1,1,}},}},{3, {{32,{1,1,1,1,1,}},}},},
    {{3, {{14,{1,}},}},{16, {{14,{1,}},}},{18, {{14,{1,}},}},{65, {{14,{1,}},}},},
    {{3, {{16,{1,}},}},{16, {{16,{1,}},}},{18, {{16,{1,}},}},{65, {{16,{1,}},}},},
    {{3, {{12,{1,}},}},{16, {{12,{1,}},}},{18, {{12,{1,}},}},{65, {{12,{1,}},}},},
    {{2, {{88,{1,1,0,0,1,1,1,1,1,0,1,}},}},{3, {{88,{1,1,0,0,1,1,1,1,1,0,1,}},}},},
    {{3, {{345,{}},}},},
    {{2, {{65,{}},}},{3, {{347,{}},}},{80, {{369,{}},}},{82, {{365,{}},}},{85, {{349,{}},}},},
    {{2, {{65,{}},}},{3, {{351,{}},}},{80, {{369,{}},}},{82, {{365,{}},}},{85, {{353,{}},}},},
    {{3, {{355,{}},}},},
    {{2, {{86,{1,1,1,1,1,1,1,1,}},}},{3, {{86,{1,1,1,1,1,1,1,1,}},}},},
    {{2, {{78,{1,1,1,1,1,1,}},}},{3, {{78,{1,1,1,1,1,1,}},}},},
    {{2, {{26,{1,1,1,1,1,1,}},}},{3, {{26,{1,1,1,1,1,1,}},}},},
    {{2, {{95,{}},{66,{1,1,}},}},{3, {{66,{1,1,}},}},},
    {{2, {{88,{1,1,0,0,1,1,1,1,1,1,1,}},}},{3, {{88,{1,1,0,0,1,1,1,1,1,1,1,}},}},},
    {{2, {{88,{1,1,0,1,1,1,1,1,1,0,1,}},}},{3, {{88,{1,1,0,1,1,1,1,1,1,0,1,}},}},},
    {{3, {{357,{}},}},},
    {{2, {{88,{1,1,1,0,1,1,1,1,1,0,1,}},}},{3, {{88,{1,1,1,0,1,1,1,1,1,0,1,}},}},},
    {{3, {{359,{}},}},},
    {{2, {{65,{}},}},{3, {{361,{}},}},{80, {{369,{}},}},{82, {{365,{}},}},{85, {{363,{}},}},},
    {{2, {{88,{1,1,0,1,1,1,1,1,1,1,1,}},}},{3, {{88,{1,1,0,1,1,1,1,1,1,1,1,}},}},},
    {{2, {{88,{1,1,1,0,1,1,1,1,1,1,1,}},}},{3, {{88,{1,1,1,0,1,1,1,1,1,1,1,}},}},},
    {{2, {{88,{1,1,1,1,1,1,1,1,1,0,1,}},}},{3, {{88,{1,1,1,1,1,1,1,1,1,0,1,}},}},},
    {{3, {{367,{}},}},},
    {{2, {{95,{}},{66,{0,1,}},}},{3, {{66,{0,1,}},}},},
    {{2, {{88,{1,1,1,1,1,1,1,1,1,1,1,}},}},{3, {{88,{1,1,1,1,1,1,1,1,1,1,1,}},}},},
    {{2, {{93,{}},{66,{1,0,}},}},{3, {{66,{1,0,}},}},{82, {{343,{}},}},},
    {{2, {{95,{}},{64,{1,1,1,1,0,1,}},}},{3, {{64,{1,1,1,1,0,1,}},}},},
    {{2, {{95,{}},{64,{1,1,1,1,1,1,}},}},{3, {{64,{1,1,1,1,1,1,}},}},},
};

WasmModule Parser::parse(){
    // Prepare
    std::stack<Stack::iterator> branches;
    Stack stack;
    stack.push(fetch(), 0);
    auto throw_error = [&](token_t token, term_t term){
        if(branches.empty()){
            throw ParseError(token.pos, term);
        }
        auto& saved = branches.top();
        auto buf_top = buffer.begin();
        for(auto it = stack.begin(); it != saved; it = std::next(it)){
            if(std::holds_alternative<token_t>(it->elem)){
                buffer.emplace(buf_top, it->term, std::get<token_t>(it->elem));
            }else{
                auto flattened = std::get<Node>(it->elem).flatten();
                buffer.insert(buf_top, flattened.begin(), flattened.end());
            }
        }
        saved->branch += 1;
    };
    // Parse
    while(stack.front().state != End){
        Entry& entry = stack.front();
        State& state = table[entry.state];
        if(state.contains(entry.term)){
            std::vector<Act>& acts = state[entry.term];
            if(entry.branch == 0){
                if(acts.size() > 1){
                    branches.emplace(stack.begin());
                }
            }else if(entry.branch == acts.size() - 1){
                branches.pop();
            }
            Act& act = acts[entry.branch];
            if(act.first & 1){ // Shift
                stack.push(fetch(), act.first >> 1);
            }else{ // Reduce
                if(std::holds_alternative<token_t>(entry.elem)){
                    buffer.emplace_front(entry.term, std::get<token_t>(entry.elem));
                    stack.pop_front();
                }
                stack.reduce(act.first >> 1, act.second);
            }
        }else{
            Entry* ptr = &entry;
            while(std::holds_alternative<Node>(ptr->elem)){
                ptr = &std::get<Node>(ptr->elem).children.front();
            }
            if(std::holds_alternative<token_t>(ptr->elem)){
                throw_error(std::get<token_t>(ptr->elem), entry.term);
            }else{
                throw_error(Token(std::monostate(), Position()), entry.term);
            }
        }
    }
    // Expand tree
    return expand_tree(stack.back());
}

void Parser::Stack::reduce(size_t action, std::vector<bool> param_toggle){
    static const std::vector<term_t> signatures {79,79,79,78,78,88,88,88,81,81,89,89,80,80,80,82,82,71,74,74,83,86,87,72,73,67,68,84,84,70,70,85,85,85,75,75,66,66,77,77,77,76,69,69,};
    if(action == 0){
        emplace_front(Entry {.term = 0, .state = End});
        return;
    }
    Node node = {.action = action, .param_toggle = param_toggle};
    size_t param_count = std::count_if(param_toggle.begin(), param_toggle.end(), [](bool val){return val;});
    for(size_t i = 0; i < param_count; ++i){
        node.children.emplace_front(front());
        pop_front();
    }
    Entry* head = &node.children.front();
    while(std::holds_alternative<Node>(head->elem)){
        Node& child = std::get<Node>(head->elem);
        head = &child.children.front();
    }
    Entry& entry = emplace_front();
    entry.term = signatures[action - 1];
    entry.state = head->state;
    entry.elem.emplace<Node>(node);
}

using item_t = std::variant<std::monostate,
    Parser::token_t,
    FuncType,
    RefType,
    ValueType,
    WasmModule,
    f32_t,
    f64_t,
    i32_t,
    i64_t,
    std::optional<std::pair<std::string, std::string>>,
    std::string,
    std::variant<WasmFunc, WasmImport>,
    std::vector<ValueType>,
    std::vector<WasmInstr>,
    std::vector<std::string>,
    u32_t,
    u64_t
>;

WasmModule Parser::expand_tree(Entry& tree){
    std::list<std::variant<Node, token_t>> entry_stack;
    std::list<std::pair<Position, item_t>> param_stack;
    auto extract_entry = [&](Entry& entry){
        if(std::holds_alternative<token_t>(entry.elem)){
            entry_stack.emplace_front(std::get<token_t>(entry.elem));
        }else if(std::holds_alternative<Node>(entry.elem)){
            Node& elem = std::get<Node>(entry.elem);
            Node& node = std::get<Node>(entry_stack.emplace_front(Node {.action = elem.action, .param_toggle = elem.param_toggle}));
            node.children.swap(elem.children);
        }
    };
    extract_entry(tree);
    auto invoke_action = [&](Node& node){
        std::vector<Position> positions(node.param_toggle.size());
        std::vector<item_t> params(node.param_toggle.size());
        Position pos;
        for(size_t i = node.param_toggle.size(); i > 0; --i){
            size_t index = i - 1;
            if(node.param_toggle[index]){
                positions[index] = param_stack.front().first;
                params[index] = param_stack.front().second;
                param_stack.pop_front();
            }
        }
        for(size_t i = 0; i < node.param_toggle.size(); ++i){
            if(node.param_toggle[i]){
                pos = positions[i];
                break;
            }
        }
        switch(node.action){
            case 1: 
                param_stack.emplace_front(pos, action_1(*this, positions,
                    node.param_toggle[0] ? std::get<WasmModule>(params[0]) : WasmModule()
                ));
            break;
            case 2: 
                param_stack.emplace_front(pos, action_2(*this, positions,
                    node.param_toggle[0] ? std::get<WasmModule>(params[0]) : WasmModule(),
                    node.param_toggle[1] ? std::get<std::variant<WasmFunc, WasmImport>>(params[1]) : std::variant<WasmFunc, WasmImport>()
                ));
            break;
            case 3: 
                param_stack.emplace_front(pos, action_3(*this, positions
                ));
            break;
            case 4: 
                param_stack.emplace_front(pos, action_4(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Module>(std::get<Token>(params[1])) : Tokens::Module(),
                    node.param_toggle[2] ? std::get<WasmModule>(params[2]) : WasmModule(),
                    node.param_toggle[3] ? std::get<Tokens::ParenR>(std::get<Token>(params[3])) : Tokens::ParenR()
                ));
            break;
            case 5: 
                param_stack.emplace_front(pos, action_5(*this, positions
                ));
            break;
            case 6: 
                param_stack.emplace_front(pos, action_6(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::NumType>(std::get<Token>(params[0])) : Tokens::NumType()
                ));
            break;
            case 7: 
                param_stack.emplace_front(pos, action_7(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Funcref>(std::get<Token>(params[0])) : Tokens::Funcref()
                ));
            break;
            case 8: 
                param_stack.emplace_front(pos, action_8(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Externref>(std::get<Token>(params[0])) : Tokens::Externref()
                ));
            break;
            case 9: 
                param_stack.emplace_front(pos, action_9(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Funcref>(std::get<Token>(params[0])) : Tokens::Funcref()
                ));
            break;
            case 10: 
                param_stack.emplace_front(pos, action_10(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Externref>(std::get<Token>(params[0])) : Tokens::Externref()
                ));
            break;
            case 11: 
                param_stack.emplace_front(pos, action_11(*this, positions,
                    node.param_toggle[0] ? std::get<std::vector<ValueType>>(params[0]) : std::vector<ValueType>(),
                    node.param_toggle[1] ? std::get<ValueType>(params[1]) : ValueType()
                ));
            break;
            case 12: 
                param_stack.emplace_front(pos, action_12(*this, positions
                ));
            break;
            case 13: 
                param_stack.emplace_front(pos, action_13(*this, positions,
                    node.param_toggle[0] ? std::get<std::vector<ValueType>>(params[0]) : std::vector<ValueType>(),
                    node.param_toggle[1] ? std::get<Tokens::ParenL>(std::get<Token>(params[1])) : Tokens::ParenL(),
                    node.param_toggle[2] ? std::get<Tokens::Param>(std::get<Token>(params[2])) : Tokens::Param(),
                    node.param_toggle[3] ? std::get<Tokens::Id>(std::get<Token>(params[3])) : Tokens::Id(),
                    node.param_toggle[4] ? std::get<ValueType>(params[4]) : ValueType(),
                    node.param_toggle[5] ? std::get<Tokens::ParenR>(std::get<Token>(params[5])) : Tokens::ParenR()
                ));
            break;
            case 14: 
                param_stack.emplace_front(pos, action_14(*this, positions,
                    node.param_toggle[0] ? std::get<std::vector<ValueType>>(params[0]) : std::vector<ValueType>(),
                    node.param_toggle[1] ? std::get<Tokens::ParenL>(std::get<Token>(params[1])) : Tokens::ParenL(),
                    node.param_toggle[2] ? std::get<Tokens::Param>(std::get<Token>(params[2])) : Tokens::Param(),
                    node.param_toggle[3] ? std::get<std::vector<ValueType>>(params[3]) : std::vector<ValueType>(),
                    node.param_toggle[4] ? std::get<Tokens::ParenR>(std::get<Token>(params[4])) : Tokens::ParenR()
                ));
            break;
            case 15: 
                param_stack.emplace_front(pos, action_15(*this, positions
                ));
            break;
            case 16: 
                param_stack.emplace_front(pos, action_16(*this, positions,
                    node.param_toggle[0] ? std::get<std::vector<ValueType>>(params[0]) : std::vector<ValueType>(),
                    node.param_toggle[1] ? std::get<Tokens::ParenL>(std::get<Token>(params[1])) : Tokens::ParenL(),
                    node.param_toggle[2] ? std::get<Tokens::Result>(std::get<Token>(params[2])) : Tokens::Result(),
                    node.param_toggle[3] ? std::get<std::vector<ValueType>>(params[3]) : std::vector<ValueType>(),
                    node.param_toggle[4] ? std::get<Tokens::ParenR>(std::get<Token>(params[4])) : Tokens::ParenR()
                ));
            break;
            case 17: 
                param_stack.emplace_front(pos, action_17(*this, positions
                ));
            break;
            case 18: 
                param_stack.emplace_front(pos, action_18(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Func>(std::get<Token>(params[1])) : Tokens::Func(),
                    node.param_toggle[2] ? std::get<std::vector<ValueType>>(params[2]) : std::vector<ValueType>(),
                    node.param_toggle[3] ? std::get<std::vector<ValueType>>(params[3]) : std::vector<ValueType>(),
                    node.param_toggle[4] ? std::get<Tokens::ParenR>(std::get<Token>(params[4])) : Tokens::ParenR()
                ));
            break;
            case 19: 
                param_stack.emplace_front(pos, action_19(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Id>(std::get<Token>(params[0])) : Tokens::Id()
                ));
            break;
            case 20: 
                param_stack.emplace_front(pos, action_20(*this, positions
                ));
            break;
            case 21: 
                param_stack.emplace_front(pos, std::monostate());
                action_21(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Type>(std::get<Token>(params[1])) : Tokens::Type(),
                    node.param_toggle[2] ? std::get<std::string>(params[2]) : std::string(),
                    node.param_toggle[3] ? std::get<FuncType>(params[3]) : FuncType(),
                    node.param_toggle[4] ? std::get<Tokens::ParenR>(std::get<Token>(params[4])) : Tokens::ParenR()
                );
            break;
            case 22: 
                param_stack.emplace_front(pos, action_22(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Integer>(std::get<Token>(params[0])) : Tokens::Integer()
                ));
            break;
            case 23: 
                param_stack.emplace_front(pos, action_23(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Integer>(std::get<Token>(params[0])) : Tokens::Integer()
                ));
            break;
            case 24: 
                param_stack.emplace_front(pos, action_24(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Integer>(std::get<Token>(params[0])) : Tokens::Integer()
                ));
            break;
            case 25: 
                param_stack.emplace_front(pos, action_25(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Integer>(std::get<Token>(params[0])) : Tokens::Integer()
                ));
            break;
            case 26: 
                param_stack.emplace_front(pos, action_26(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Float>(std::get<Token>(params[0])) : Tokens::Float()
                ));
            break;
            case 27: 
                param_stack.emplace_front(pos, action_27(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Float>(std::get<Token>(params[0])) : Tokens::Float()
                ));
            break;
            case 28: 
                param_stack.emplace_front(pos, action_28(*this, positions,
                    node.param_toggle[0] ? std::get<u32_t>(params[0]) : u32_t()
                ));
            break;
            case 29: 
                param_stack.emplace_front(pos, action_29(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Id>(std::get<Token>(params[0])) : Tokens::Id()
                ));
            break;
            case 30: 
                param_stack.emplace_front(pos, action_30(*this, positions,
                    node.param_toggle[0] ? std::get<u32_t>(params[0]) : u32_t()
                ));
            break;
            case 31: 
                param_stack.emplace_front(pos, action_31(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::Id>(std::get<Token>(params[0])) : Tokens::Id()
                ));
            break;
            case 32: 
                param_stack.emplace_front(pos, action_32(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Type>(std::get<Token>(params[1])) : Tokens::Type(),
                    node.param_toggle[2] ? std::get<u32_t>(params[2]) : u32_t(),
                    node.param_toggle[3] ? std::get<Tokens::ParenR>(std::get<Token>(params[3])) : Tokens::ParenR(),
                    node.param_toggle[4] ? std::get<std::vector<ValueType>>(params[4]) : std::vector<ValueType>(),
                    node.param_toggle[5] ? std::get<std::vector<ValueType>>(params[5]) : std::vector<ValueType>()
                ));
            break;
            case 33: 
                param_stack.emplace_front(pos, action_33(*this, positions,
                    node.param_toggle[0] ? std::get<std::vector<ValueType>>(params[0]) : std::vector<ValueType>(),
                    node.param_toggle[1] ? std::get<std::vector<ValueType>>(params[1]) : std::vector<ValueType>()
                ));
            break;
            case 34: 
                param_stack.emplace_front(pos, action_34(*this, positions
                ));
            break;
            case 35: 
                param_stack.emplace_front(pos, action_35(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Import>(std::get<Token>(params[1])) : Tokens::Import(),
                    node.param_toggle[2] ? std::get<Tokens::String>(std::get<Token>(params[2])) : Tokens::String(),
                    node.param_toggle[3] ? std::get<Tokens::String>(std::get<Token>(params[3])) : Tokens::String(),
                    node.param_toggle[4] ? std::get<Tokens::ParenR>(std::get<Token>(params[4])) : Tokens::ParenR()
                ));
            break;
            case 36: 
                param_stack.emplace_front(pos, action_36(*this, positions
                ));
            break;
            case 37: 
                param_stack.emplace_front(pos, action_37(*this, positions,
                    node.param_toggle[0] ? std::get<std::vector<std::string>>(params[0]) : std::vector<std::string>(),
                    node.param_toggle[1] ? std::get<Tokens::ParenL>(std::get<Token>(params[1])) : Tokens::ParenL(),
                    node.param_toggle[2] ? std::get<Tokens::Export>(std::get<Token>(params[2])) : Tokens::Export(),
                    node.param_toggle[3] ? std::get<Tokens::String>(std::get<Token>(params[3])) : Tokens::String(),
                    node.param_toggle[4] ? std::get<Tokens::ParenR>(std::get<Token>(params[4])) : Tokens::ParenR()
                ));
            break;
            case 38: 
                param_stack.emplace_front(pos, action_38(*this, positions
                ));
            break;
            case 39: 
                param_stack.emplace_front(pos, action_39(*this, positions,
                    node.param_toggle[0] ? std::get<std::vector<ValueType>>(params[0]) : std::vector<ValueType>(),
                    node.param_toggle[1] ? std::get<Tokens::ParenL>(std::get<Token>(params[1])) : Tokens::ParenL(),
                    node.param_toggle[2] ? std::get<Tokens::Local>(std::get<Token>(params[2])) : Tokens::Local(),
                    node.param_toggle[3] ? std::get<Tokens::Id>(std::get<Token>(params[3])) : Tokens::Id(),
                    node.param_toggle[4] ? std::get<ValueType>(params[4]) : ValueType(),
                    node.param_toggle[5] ? std::get<Tokens::ParenR>(std::get<Token>(params[5])) : Tokens::ParenR()
                ));
            break;
            case 40: 
                param_stack.emplace_front(pos, action_40(*this, positions,
                    node.param_toggle[0] ? std::get<std::vector<ValueType>>(params[0]) : std::vector<ValueType>(),
                    node.param_toggle[1] ? std::get<Tokens::ParenL>(std::get<Token>(params[1])) : Tokens::ParenL(),
                    node.param_toggle[2] ? std::get<Tokens::Local>(std::get<Token>(params[2])) : Tokens::Local(),
                    node.param_toggle[3] ? std::get<std::vector<ValueType>>(params[3]) : std::vector<ValueType>(),
                    node.param_toggle[4] ? std::get<Tokens::ParenR>(std::get<Token>(params[4])) : Tokens::ParenR()
                ));
            break;
            case 41: 
                param_stack.emplace_front(pos, action_41(*this, positions
                ));
            break;
            case 42: 
                param_stack.emplace_front(pos, action_42(*this, positions
                ));
            break;
            case 43: 
                param_stack.emplace_front(pos, action_43(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Func>(std::get<Token>(params[1])) : Tokens::Func(),
                    node.param_toggle[2] ? std::get<std::string>(params[2]) : std::string(),
                    node.param_toggle[3] ? std::get<std::vector<std::string>>(params[3]) : std::vector<std::string>(),
                    node.param_toggle[4] ? std::get<u32_t>(params[4]) : u32_t(),
                    node.param_toggle[5] ? std::get<std::vector<ValueType>>(params[5]) : std::vector<ValueType>(),
                    node.param_toggle[6] ? std::get<std::vector<WasmInstr>>(params[6]) : std::vector<WasmInstr>(),
                    node.param_toggle[7] ? std::get<Tokens::ParenR>(std::get<Token>(params[7])) : Tokens::ParenR()
                ));
            break;
            case 44: 
                param_stack.emplace_front(pos, action_44(*this, positions,
                    node.param_toggle[0] ? std::get<Tokens::ParenL>(std::get<Token>(params[0])) : Tokens::ParenL(),
                    node.param_toggle[1] ? std::get<Tokens::Func>(std::get<Token>(params[1])) : Tokens::Func(),
                    node.param_toggle[2] ? std::get<std::string>(params[2]) : std::string(),
                    node.param_toggle[3] ? std::get<std::vector<std::string>>(params[3]) : std::vector<std::string>(),
                    node.param_toggle[4] ? std::get<Tokens::ParenL>(std::get<Token>(params[4])) : Tokens::ParenL(),
                    node.param_toggle[5] ? std::get<Tokens::Import>(std::get<Token>(params[5])) : Tokens::Import(),
                    node.param_toggle[6] ? std::get<Tokens::String>(std::get<Token>(params[6])) : Tokens::String(),
                    node.param_toggle[7] ? std::get<Tokens::String>(std::get<Token>(params[7])) : Tokens::String(),
                    node.param_toggle[8] ? std::get<Tokens::ParenR>(std::get<Token>(params[8])) : Tokens::ParenR(),
                    node.param_toggle[9] ? std::get<u32_t>(params[9]) : u32_t(),
                    node.param_toggle[10] ? std::get<Tokens::ParenR>(std::get<Token>(params[10])) : Tokens::ParenR()
                ));
            break;
            default:
            break;
        }
    };
    while(!entry_stack.empty()){
        std::variant<Node, token_t>& entry = entry_stack.front();
        if(std::holds_alternative<token_t>(entry)){
            token_t token = std::get<token_t>(entry);
            param_stack.emplace_front(token.pos, token);
            entry_stack.pop_front();
        }else if(std::holds_alternative<Node>(entry)){
            Node& node = std::get<Node>(entry);
            if(node.children.size() > 0){
                for(auto it = node.children.rbegin(); it != node.children.rend(); it = std::next(it)){
                    extract_entry(*it);
                }
                node.children.clear();
            }else{
                invoke_action(node);
                entry_stack.pop_front();
            }
        }
    }
    return std::get<WasmModule>(param_stack.front().second);
}

std::list<std::pair<Parser::term_t,Parser::token_t>> Parser::Node::flatten(){
    std::list<std::pair<term_t,token_t>> results;
    for(Entry& child : children){
        if(std::holds_alternative<token_t>(child.elem)){
            results.emplace_back(child.term, std::get<token_t>(child.elem));
        }else{
            auto flattened = std::get<Node>(child.elem).flatten();
            results.insert(results.end(), flattened.begin(), flattened.end());
        }
    }
    return results;
}

WasmVM::ParseError::ParseError(Position pos, Parser::term_t term) : pos(pos) {
    static const std::vector<std::string> terms {
        "",
        "EOF",
        "ParenL",
        "ParenR",
        "Id",
        "String",
        "Integer",
        "Float",
        "MemOffset",
        "MemAlign",
        "Module",
        "Type",
        "Import",
        "Export",
        "Param",
        "Result",
        "Funcref",
        "Extern",
        "Externref",
        "Func",
        "Table",
        "Memory",
        "Global",
        "Mut",
        "Local",
        "Elem",
        "Item",
        "Declare",
        "Offset",
        "Data",
        "Start",
        "Then",
        "ControlInstr",
        "Block",
        "End",
        "Loop",
        "If",
        "Else",
        "Br",
        "Br_if",
        "Br_table",
        "Call",
        "Call_indirect",
        "Ref_null",
        "Ref_is_null",
        "Ref_func",
        "Drop",
        "Select",
        "VariableInstr",
        "TableInstr",
        "Table_copy",
        "Table_init",
        "Elem_drop",
        "Memory_size",
        "Memory_grow",
        "Memory_fill",
        "Memory_init",
        "Memory_copy",
        "Data_drop",
        "MemoryInstr",
        "I32_const",
        "I64_const",
        "F32_const",
        "F64_const",
        "NumericInstr",
        "NumType",
        "exportabbr",
        "f32",
        "f64",
        "func",
        "funcidx",
        "functype",
        "i32",
        "i64",
        "id",
        "importabbr",
        "instrs",
        "locals",
        "module",
        "modulefield",
        "params",
        "reftype",
        "results",
        "type",
        "typeidx",
        "typeuse",
        "u32",
        "u64",
        "valtype",
        "valtypes",
    };
    msg = "unexpected " + terms[term];
}
} // namespace WasmVM


namespace WasmVM {
index_t Parser::IndexMap::insert(IndexType type){
    index_t index = handlers.size();
    handlers.emplace_back(indices.emplace(type, serial++).first);
    return index;
}
index_t Parser::IndexMap::insert(std::string id, IndexType type){
    if(!id_map.contains(id)){
        id_map[id] = insert(type);
    }
    return id_map[id];
}
index_t Parser::IndexMap::get(std::string id){
    return id_map.contains(id) ? id_map[id] : -1;
}
bool Parser::IndexMap::contains(std::string id){
    return id_map.contains(id);
}
std::optional<Parser::IndexMap::Index> Parser::IndexMap::operator[](index_t index){
    if(index < handlers.size()){
        return *handlers[index];
    }
    return std::nullopt;
}
void Parser::reset(){
    types.clear();
    exports.clear();
    type_indices.clear();
    func_indices = IndexMap();
    table_indices = IndexMap();
    mem_indices = IndexMap();
    global_indices = IndexMap();
}
} // namespace WasmVM
        
