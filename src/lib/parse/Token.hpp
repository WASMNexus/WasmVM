/** generated by ParGen **/
#ifndef ParGen_Tokens_guard
#define ParGen_Tokens_guard

#include <string>
#include <Types.hpp>
#include <exception.hpp>
        
#include <iostream>
#include <filesystem>
#include <variant>

namespace WasmVM {

struct Position {
    std::filesystem::path path;
    size_t line = 1;
    size_t column = 0;
};

namespace Tokens {

struct ParenL {
    ParenL() = default;
};

struct ParenR {
    ParenR() = default;
};

struct Id {
    Id() = default;
    Id(std::string value) : value(value){}
    std::string value;
};

struct String {
    String() = default;
    String(std::string value) : value(value){}
    std::string value;
};

struct Integer {
    Integer() = default;
    Integer(std::string value) : value(value){}
    std::string value;
};

struct Float {
    Float() = default;
    Float(std::string value) : value(value){}
    std::string value;
};

struct MemOffset {
    MemOffset() = default;
    MemOffset(offset_t value) : value(value){}
    offset_t value;
};

struct MemAlign {
    MemAlign() = default;
    MemAlign(align_t value) : value(value){}
    align_t value;
};

struct Module {
    Module() = default;
};

struct Type {
    Type() = default;
};

struct Import {
    Import() = default;
};

struct Export {
    Export() = default;
};

struct Param {
    Param() = default;
};

struct Result {
    Result() = default;
};

struct Funcref {
    Funcref() = default;
};

struct Extern {
    Extern() = default;
};

struct Externref {
    Externref() = default;
};

struct Func {
    Func() = default;
};

struct Table {
    Table() = default;
};

struct Memory {
    Memory() = default;
};

struct Global {
    Global() = default;
};

struct Mut {
    Mut() = default;
};

struct Local {
    Local() = default;
};

struct Elem {
    Elem() = default;
};

struct Item {
    Item() = default;
};

struct Declare {
    Declare() = default;
};

struct Offset {
    Offset() = default;
};

struct Data {
    Data() = default;
};

struct Start {
    Start() = default;
};

struct Then {
    Then() = default;
};

struct ControlInstr {
    enum Kind {Unreachable, Nop, Return};

    ControlInstr() = default;
    ControlInstr(ControlInstr::Kind value) : value(value){}
    ControlInstr::Kind value;
};

struct Block {
    Block() = default;
};

struct End {
    End() = default;
};

struct Loop {
    Loop() = default;
};

struct If {
    If() = default;
};

struct Else {
    Else() = default;
};

struct Br {
    Br() = default;
};

struct Br_if {
    Br_if() = default;
};

struct Br_table {
    Br_table() = default;
};

struct Call {
    Call() = default;
};

struct Call_indirect {
    Call_indirect() = default;
};

struct Ref_null {
    Ref_null() = default;
};

struct Ref_is_null {
    Ref_is_null() = default;
};

struct Ref_func {
    Ref_func() = default;
};

struct Drop {
    Drop() = default;
};

struct Select {
    Select() = default;
};

struct VariableInstr {
    enum Kind {LocalGet, LocalSet, LocalTee, GlobalGet, GlobalSet};

    VariableInstr() = default;
    VariableInstr(VariableInstr::Kind value) : value(value){}
    VariableInstr::Kind value;
};

struct TableInstr {
    enum Kind {TableGet, TableSet, TableSize, TableGrow, TableFill};

    TableInstr() = default;
    TableInstr(TableInstr::Kind value) : value(value){}
    TableInstr::Kind value;
};

struct Table_copy {
    Table_copy() = default;
};

struct Table_init {
    Table_init() = default;
};

struct Elem_drop {
    Elem_drop() = default;
};

struct Memory_size {
    Memory_size() = default;
};

struct Memory_grow {
    Memory_grow() = default;
};

struct Memory_fill {
    Memory_fill() = default;
};

struct Memory_init {
    Memory_init() = default;
};

struct Memory_copy {
    Memory_copy() = default;
};

struct Data_drop {
    Data_drop() = default;
};

struct MemoryInstr {
    enum Kind {I32Load, I64Load, F32Load, F64Load, I32Load8_s, I32Load8_u, I32Load16_s, I32Load16_u, I64Load8_s, I64Load8_u, I64Load16_s, I64Load16_u, I64Load32_s, I64Load32_u, I32Store, I64Store, F32Store, F64Store, I32Store8, I32Store16, I64Store8, I64Store16, I64Store32};

    MemoryInstr() = default;
    MemoryInstr(MemoryInstr::Kind value) : value(value){}
    MemoryInstr::Kind value;
};

struct I32_const {
    I32_const() = default;
};

struct I64_const {
    I64_const() = default;
};

struct F32_const {
    F32_const() = default;
};

struct F64_const {
    F64_const() = default;
};

struct NumericInstr {
    enum Kind {I32Eqz,I32Eq,I32Ne,I32Lt_s,I32Lt_u,I32Gt_s,I32Gt_u,I32Le_s,I32Le_u,I32Ge_s,I32Ge_u,I64Eqz,I64Eq,I64Ne,I64Lt_s,I64Lt_u,I64Gt_s,I64Gt_u,I64Le_s,I64Le_u,I64Ge_s,I64Ge_u,F32Eq,F32Ne,F32Lt,F32Gt,F32Le,F32Ge,F64Eq,F64Ne,F64Lt,F64Gt,F64Le,F64Ge,I32Clz,I32Ctz,I32Popcnt,I32Add,I32Sub,I32Mul,I32Div_s,I32Div_u,I32Rem_s,I32Rem_u,I32And,I32Or,I32Xor,I32Shl,I32Shr_s,I32Shr_u,I32Rotl,I32Rotr,I64Clz,I64Ctz,I64Popcnt,I64Add,I64Sub,I64Mul,I64Div_s,I64Div_u,I64Rem_s,I64Rem_u,I64And,I64Or,I64Xor,I64Shl,I64Shr_s,I64Shr_u,I64Rotl,I64Rotr,F32Abs,F32Neg,F32Ceil,F32Floor,F32Trunc,F32Nearest,F32Sqrt,F32Add,F32Sub,F32Mul,F32Div,F32Min,F32Max,F32Copysign,F64Abs,F64Neg,F64Ceil,F64Floor,F64Trunc,F64Nearest,F64Sqrt,F64Add,F64Sub,F64Mul,F64Div,F64Min,F64Max,F64Copysign,I32Wrap_i64,I32Trunc_s_f32,I32Trunc_u_f32,I32Trunc_s_f64,I32Trunc_u_f64,I64Extend_s_i32,I64Extend_u_i32,I64Trunc_s_f32,I64Trunc_u_f32,I64Trunc_s_f64,I64Trunc_u_f64,F32Convert_s_i32,F32Convert_u_i32,F32Convert_s_i64,F32Convert_u_i64,F32Demote_f64,F64Convert_s_i32,F64Convert_u_i32,F64Convert_s_i64,F64Convert_u_i64,F64Promote_f32,I32Reinterpret_f32,I64Reinterpret_f64,F32Reinterpret_i32,F64Reinterpret_i64,I32Extend8_s,I32Extend16_s,I64Extend8_s,I64Extend16_s,I64Extend32_s,I32Trunc_sat_f32_s,I32Trunc_sat_f32_u,I32Trunc_sat_f64_s,I32Trunc_sat_f64_u,I64Trunc_sat_f32_s,I64Trunc_sat_f64_u,I64Trunc_sat_f64_s,I64Trunc_sat_f32_u};

    NumericInstr() = default;
    NumericInstr(NumericInstr::Kind value) : value(value){}
    NumericInstr::Kind value;
};

struct NumType {
    NumType() = default;
    NumType(std::string value) : value(value){}
    std::string value;
};

} // namespace Tokens

struct Token : public std::variant<
  std::monostate,
  Tokens::ParenL,
  Tokens::ParenR,
  Tokens::Id,
  Tokens::String,
  Tokens::Integer,
  Tokens::Float,
  Tokens::MemOffset,
  Tokens::MemAlign,
  Tokens::Module,
  Tokens::Type,
  Tokens::Import,
  Tokens::Export,
  Tokens::Param,
  Tokens::Result,
  Tokens::Funcref,
  Tokens::Extern,
  Tokens::Externref,
  Tokens::Func,
  Tokens::Table,
  Tokens::Memory,
  Tokens::Global,
  Tokens::Mut,
  Tokens::Local,
  Tokens::Elem,
  Tokens::Item,
  Tokens::Declare,
  Tokens::Offset,
  Tokens::Data,
  Tokens::Start,
  Tokens::Then,
  Tokens::ControlInstr,
  Tokens::Block,
  Tokens::End,
  Tokens::Loop,
  Tokens::If,
  Tokens::Else,
  Tokens::Br,
  Tokens::Br_if,
  Tokens::Br_table,
  Tokens::Call,
  Tokens::Call_indirect,
  Tokens::Ref_null,
  Tokens::Ref_is_null,
  Tokens::Ref_func,
  Tokens::Drop,
  Tokens::Select,
  Tokens::VariableInstr,
  Tokens::TableInstr,
  Tokens::Table_copy,
  Tokens::Table_init,
  Tokens::Elem_drop,
  Tokens::Memory_size,
  Tokens::Memory_grow,
  Tokens::Memory_fill,
  Tokens::Memory_init,
  Tokens::Memory_copy,
  Tokens::Data_drop,
  Tokens::MemoryInstr,
  Tokens::I32_const,
  Tokens::I64_const,
  Tokens::F32_const,
  Tokens::F64_const,
  Tokens::NumericInstr,
  Tokens::NumType
> {
template<typename T> Token(T token, Position pos): std::variant<
  std::monostate,
  Tokens::ParenL,
  Tokens::ParenR,
  Tokens::Id,
  Tokens::String,
  Tokens::Integer,
  Tokens::Float,
  Tokens::MemOffset,
  Tokens::MemAlign,
  Tokens::Module,
  Tokens::Type,
  Tokens::Import,
  Tokens::Export,
  Tokens::Param,
  Tokens::Result,
  Tokens::Funcref,
  Tokens::Extern,
  Tokens::Externref,
  Tokens::Func,
  Tokens::Table,
  Tokens::Memory,
  Tokens::Global,
  Tokens::Mut,
  Tokens::Local,
  Tokens::Elem,
  Tokens::Item,
  Tokens::Declare,
  Tokens::Offset,
  Tokens::Data,
  Tokens::Start,
  Tokens::Then,
  Tokens::ControlInstr,
  Tokens::Block,
  Tokens::End,
  Tokens::Loop,
  Tokens::If,
  Tokens::Else,
  Tokens::Br,
  Tokens::Br_if,
  Tokens::Br_table,
  Tokens::Call,
  Tokens::Call_indirect,
  Tokens::Ref_null,
  Tokens::Ref_is_null,
  Tokens::Ref_func,
  Tokens::Drop,
  Tokens::Select,
  Tokens::VariableInstr,
  Tokens::TableInstr,
  Tokens::Table_copy,
  Tokens::Table_init,
  Tokens::Elem_drop,
  Tokens::Memory_size,
  Tokens::Memory_grow,
  Tokens::Memory_fill,
  Tokens::Memory_init,
  Tokens::Memory_copy,
  Tokens::Data_drop,
  Tokens::MemoryInstr,
  Tokens::I32_const,
  Tokens::I64_const,
  Tokens::F32_const,
  Tokens::F64_const,
  Tokens::NumericInstr,
  Tokens::NumType
>(token), pos(pos){}
    Position pos;
};

} // namespace WasmVM

std::ostream& operator<< (std::ostream&, WasmVM::Position&);

#endif 
