/** generated by ParGen **/
#ifndef ParGen_Tokens_guard
#define ParGen_Tokens_guard

#include <string>
#include <Types.hpp>
#include <exception.hpp>
        
#include <iostream>
#include <filesystem>
#include <variant>

namespace WasmVM {

struct Position {
    std::filesystem::path path;
    size_t line = 1;
    size_t column = 0;
};

namespace Tokens {

struct ParenL {
    ParenL() = default;
};

struct ParenR {
    ParenR() = default;
};

struct Id {
    Id() = default;
    Id(std::string value) : value(value){}
    std::string value;
};

struct String {
    String() = default;
    String(std::string value) : value(value){}
    std::string value;
};

struct Integer {
    Integer() = default;
    Integer(std::string value) : value(value){}
    std::string value;
};

struct Float {
    Float() = default;
    Float(std::string value) : value(value){}
    std::string value;
};

struct Offset {
    Offset() = default;
    Offset(offset_t value) : value(value){}
    offset_t value;
};

struct Align {
    Align() = default;
    Align(align_t value) : value(value){}
    align_t value;
};

struct Module {
    Module() = default;
    Module(std::string value) : value(value){}
    std::string value;
};

} // namespace Tokens

struct Token : public std::variant<
  std::monostate,
  Tokens::ParenL,
  Tokens::ParenR,
  Tokens::Id,
  Tokens::String,
  Tokens::Integer,
  Tokens::Float,
  Tokens::Offset,
  Tokens::Align,
  Tokens::Module
> {
template<typename T> Token(T token, Position pos): std::variant<
  std::monostate,
  Tokens::ParenL,
  Tokens::ParenR,
  Tokens::Id,
  Tokens::String,
  Tokens::Integer,
  Tokens::Float,
  Tokens::Offset,
  Tokens::Align,
  Tokens::Module
>(token), pos(pos){}
    Position pos;
};

} // namespace WasmVM

std::ostream& operator<< (std::ostream&, WasmVM::Position&);

#endif 
