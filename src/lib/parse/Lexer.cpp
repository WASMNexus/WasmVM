/** generated by ParGen **/
#include "Lexer.hpp"


namespace WasmVM {

using namespace Tokens;

Lexer::Lexer(std::filesystem::path path, std::istream& stream) :
  stream(stream), state(18)
{
    current = fetch();
    pos.path = path;
}

Lexer::Chars::Chars(std::initializer_list<Chars::char_t> init) : min(init.begin()[0]){
    if(init.size() == 1){
        max = init.begin()[0];
    }else{
        max = init.begin()[1];
    }
}

bool Lexer::Chars::operator<(const Chars& rhs) const {
    return (min < rhs.min) && (max < rhs.min);
}

Lexer::Chars::char_t Lexer::fetch(){
    std::string line_end = "";
    Chars::char_t res = stream.get();
    if(res != std::istream::traits_type::eof()){
        line_end += res;
        text += res;
        if(line_end.size() > 2){
            line_end = line_end.substr(line_end.size() - 2);
        }
        if(text.ends_with("\n")){
            cur.line += 1;
            cur.column = 0;
        }else{
            cur.column += 1;
        }
    }
    return res;
}

std::vector<Lexer::State> Lexer::states = {
    {{{-1},1}, {{0},2}, {{40},3}, {{59},4}, }, // S0
    {}, // S1
    {}, // S2
    {{{59},5}, }, // S3
    {{{41},6}, }, // S4
    {}, // S5
    {}, // S6
    {{{-1},8}, {{0},9}, {{10},10}, }, // S7
    {}, // S8
    {}, // S9
    {}, // S10
    {{{-1},12}, {{0},13}, {{1,31},14}, {{34},15}, {{92},16}, {{127},14}, }, // S11
    {}, // S12
    {}, // S13
    {}, // S14
    {}, // S15
    {{{0},17}, }, // S16
    {}, // S17
    {{{-1},19}, {{9},20}, {{10},21}, {{13},22}, {{32},23}, {{34},24}, {{36},25}, {{40},26}, {{41},27}, {{43},28}, {{45},28}, {{48},29}, {{49,57},30}, {{59},31}, {{97},32}, {{98},33}, {{99},34}, {{100},35}, {{101},36}, {{102},37}, {{103},38}, {{105},39}, {{108},40}, {{109},41}, {{110},42}, {{111},43}, {{112},44}, {{114},45}, {{115},46}, {{116},47}, {{117},48}, }, // S18
    {}, // S19
    {}, // S20
    {}, // S21
    {}, // S22
    {}, // S23
    {}, // S24
    {{{33},49}, {{35,39},49}, {{42,43},49}, {{45,58},49}, {{60,90},49}, {{92},49}, {{94,122},49}, {{124},49}, {{126},49}, }, // S25
    {{{59},50}, }, // S26
    {}, // S27
    {{{48},29}, {{49,57},30}, {{105},51}, {{110},52}, }, // S28
    {{{46},53}, {{48,57},54}, {{69},55}, {{95},54}, {{101},55}, {{120},56}, }, // S29
    {{{46},53}, {{48,57},54}, {{69},55}, {{95},54}, {{101},55}, }, // S30
    {{{59},57}, }, // S31
    {{{108},58}, }, // S32
    {{{108},59}, {{114},60}, }, // S33
    {{{97},61}, }, // S34
    {{{97},62}, {{101},63}, {{114},64}, }, // S35
    {{{108},65}, {{110},66}, {{120},67}, }, // S36
    {{{51},68}, {{54},69}, {{117},70}, }, // S37
    {{{108},71}, }, // S38
    {{{51},72}, {{54},73}, {{102},74}, {{109},75}, {{110},76}, {{116},77}, }, // S39
    {{{111},78}, }, // S40
    {{{101},79}, {{111},80}, {{117},81}, }, // S41
    {{{97},82}, {{111},83}, }, // S42
    {{{102},84}, }, // S43
    {{{97},85}, }, // S44
    {{{101},86}, }, // S45
    {{{101},87}, {{116},88}, }, // S46
    {{{97},89}, {{104},90}, {{121},91}, }, // S47
    {{{110},92}, }, // S48
    {{{33},49}, {{35,39},49}, {{42,43},49}, {{45,58},49}, {{60,90},49}, {{92},49}, {{94,122},49}, {{124},49}, {{126},49}, }, // S49
    {}, // S50
    {{{110},76}, }, // S51
    {{{97},82}, }, // S52
    {{{48,57},93}, {{69},94}, {{95},95}, {{101},94}, }, // S53
    {{{46},53}, {{48,57},54}, {{69},55}, {{95},54}, {{101},55}, }, // S54
    {{{43},96}, {{45},96}, {{48,57},97}, }, // S55
    {{{48,57},98}, {{65,70},98}, {{97,102},98}, }, // S56
    {}, // S57
    {{{105},99}, }, // S58
    {{{111},100}, }, // S59
    {{{95},101}, }, // S60
    {{{108},102}, }, // S61
    {{{116},103}, }, // S62
    {{{99},104}, }, // S63
    {{{111},105}, }, // S64
    {{{101},106}, {{115},107}, }, // S65
    {{{100},108}, }, // S66
    {{{112},109}, {{116},110}, }, // S67
    {{{50},111}, }, // S68
    {{{52},112}, }, // S69
    {{{110},113}, }, // S70
    {{{111},114}, }, // S71
    {{{50},115}, }, // S72
    {{{52},116}, }, // S73
    {}, // S74
    {{{112},117}, }, // S75
    {{{102},118}, }, // S76
    {{{101},119}, }, // S77
    {{{99},120}, {{111},121}, }, // S78
    {{{109},122}, }, // S79
    {{{100},123}, }, // S80
    {{{116},124}, }, // S81
    {{{110},125}, }, // S82
    {{{112},126}, }, // S83
    {{{102},127}, }, // S84
    {{{114},128}, }, // S85
    {{{102},129}, {{115},130}, {{116},131}, }, // S86
    {{{108},132}, }, // S87
    {{{97},133}, }, // S88
    {{{98},134}, }, // S89
    {{{101},135}, }, // S90
    {{{112},136}, }, // S91
    {{{114},137}, }, // S92
    {{{48,57},95}, {{69},94}, {{95},95}, {{101},94}, }, // S93
    {{{43},138}, {{45},138}, {{48,57},139}, }, // S94
    {{{48,57},95}, {{69},94}, {{95},95}, {{101},94}, }, // S95
    {{{48,57},97}, }, // S96
    {{{48,57},140}, {{95},140}, }, // S97
    {{{46},141}, {{48,57},142}, {{65,70},142}, {{80},143}, {{95},142}, {{97,102},142}, {{112},143}, }, // S98
    {{{103},144}, }, // S99
    {{{99},145}, }, // S100
    {{{105},146}, {{116},147}, }, // S101
    {{{108},148}, }, // S102
    {{{97},149}, }, // S103
    {{{108},150}, }, // S104
    {{{112},151}, }, // S105
    {{{109},152}, }, // S106
    {{{101},153}, }, // S107
    {}, // S108
    {{{111},154}, }, // S109
    {{{101},155}, }, // S110
    {{{46},156}, }, // S111
    {{{46},157}, }, // S112
    {{{99},158}, }, // S113
    {{{98},159}, }, // S114
    {{{46},160}, }, // S115
    {{{46},161}, }, // S116
    {{{111},162}, }, // S117
    {}, // S118
    {{{109},163}, }, // S119
    {{{97},164}, }, // S120
    {{{112},165}, }, // S121
    {{{111},166}, }, // S122
    {{{117},167}, }, // S123
    {}, // S124
    {{{58},168}, }, // S125
    {}, // S126
    {{{115},169}, }, // S127
    {{{97},170}, }, // S128
    {{{46},171}, }, // S129
    {{{117},172}, }, // S130
    {{{117},173}, }, // S131
    {{{101},174}, }, // S132
    {{{114},175}, }, // S133
    {{{108},176}, }, // S134
    {{{110},177}, }, // S135
    {{{101},178}, }, // S136
    {{{101},179}, }, // S137
    {{{48,57},139}, }, // S138
    {{{48,57},180}, {{95},180}, }, // S139
    {{{48,57},140}, {{95},140}, }, // S140
    {{{48,57},181}, {{65,70},181}, {{80},182}, {{95},183}, {{97,102},181}, {{112},182}, }, // S141
    {{{46},141}, {{48,57},142}, {{65,70},142}, {{80},143}, {{95},142}, {{97,102},142}, {{112},143}, }, // S142
    {{{43},184}, {{45},184}, {{48,57},185}, }, // S143
    {{{110},186}, }, // S144
    {{{107},187}, }, // S145
    {{{102},188}, }, // S146
    {{{97},189}, }, // S147
    {{{95},190}, }, // S148
    {{{46},191}, }, // S149
    {{{97},192}, }, // S150
    {}, // S151
    {{{46},193}, }, // S152
    {}, // S153
    {{{114},194}, }, // S154
    {{{114},195}, }, // S155
    {{{97},196}, {{99},197}, {{100},198}, {{101},199}, {{102},200}, {{103},201}, {{108},202}, {{109},203}, {{110},204}, {{114},205}, {{115},206}, {{116},207}, }, // S156
    {{{97},208}, {{99},209}, {{100},210}, {{101},211}, {{102},212}, {{103},213}, {{108},214}, {{109},215}, {{110},216}, {{112},217}, {{114},218}, {{115},219}, {{116},220}, }, // S157
    {{{114},221}, }, // S158
    {{{97},222}, }, // S159
    {{{97},223}, {{99},224}, {{100},225}, {{101},226}, {{103},227}, {{108},228}, {{109},229}, {{110},230}, {{111},231}, {{112},232}, {{114},233}, {{115},234}, {{116},235}, {{119},236}, {{120},237}, }, // S160
    {{{97},238}, {{99},239}, {{100},240}, {{101},241}, {{103},242}, {{108},243}, {{109},244}, {{110},245}, {{111},246}, {{112},247}, {{114},248}, {{115},249}, {{116},250}, {{120},251}, }, // S161
    {{{114},252}, }, // S162
    {}, // S163
    {{{108},253}, }, // S164
    {}, // S165
    {{{114},254}, }, // S166
    {{{108},255}, }, // S167
    {{{48},256}, }, // S168
    {{{101},257}, }, // S169
    {{{109},258}, }, // S170
    {{{102},259}, {{105},260}, {{110},261}, }, // S171
    {{{108},262}, }, // S172
    {{{114},263}, }, // S173
    {{{99},264}, }, // S174
    {{{116},265}, }, // S175
    {{{101},266}, }, // S176
    {}, // S177
    {}, // S178
    {{{97},267}, }, // S179
    {{{48,57},180}, {{95},180}, }, // S180
    {{{48,57},183}, {{65,70},183}, {{80},182}, {{95},183}, {{97,102},183}, {{112},182}, }, // S181
    {{{43},268}, {{45},268}, {{48,57},269}, }, // S182
    {{{48,57},183}, {{65,70},183}, {{80},182}, {{95},183}, {{97,102},183}, {{112},182}, }, // S183
    {{{48,57},185}, }, // S184
    {{{48,57},270}, {{95},270}, }, // S185
    {{{61},271}, }, // S186
    {}, // S187
    {}, // S188
    {{{98},272}, }, // S189
    {{{105},273}, }, // S190
    {{{100},274}, }, // S191
    {{{114},275}, }, // S192
    {{{100},276}, }, // S193
    {{{116},277}, }, // S194
    {{{110},278}, }, // S195
    {{{98},279}, {{100},280}, }, // S196
    {{{101},281}, {{111},282}, }, // S197
    {{{101},283}, {{105},284}, }, // S198
    {{{113},285}, }, // S199
    {{{108},286}, }, // S200
    {{{101},287}, {{116},288}, }, // S201
    {{{101},289}, {{111},290}, {{116},291}, }, // S202
    {{{97},292}, {{105},293}, {{117},294}, }, // S203
    {{{101},295}, }, // S204
    {{{101},296}, }, // S205
    {{{113},297}, {{116},298}, {{117},299}, }, // S206
    {{{114},300}, }, // S207
    {{{98},301}, {{100},302}, }, // S208
    {{{101},303}, {{111},304}, }, // S209
    {{{105},305}, }, // S210
    {{{113},306}, }, // S211
    {{{108},307}, }, // S212
    {{{101},308}, {{116},309}, }, // S213
    {{{101},310}, {{111},311}, {{116},312}, }, // S214
    {{{97},313}, {{105},314}, {{117},315}, }, // S215
    {{{101},316}, }, // S216
    {{{114},317}, }, // S217
    {{{101},318}, }, // S218
    {{{113},319}, {{116},320}, {{117},321}, }, // S219
    {{{114},322}, }, // S220
    {{{101},323}, }, // S221
    {{{108},324}, }, // S222
    {{{100},325}, {{110},326}, }, // S223
    {{{108},327}, {{111},328}, {{116},329}, }, // S224
    {{{105},330}, }, // S225
    {{{113},331}, {{120},332}, }, // S226
    {{{101},333}, {{116},334}, }, // S227
    {{{101},335}, {{111},336}, {{116},337}, }, // S228
    {{{117},338}, }, // S229
    {{{101},339}, }, // S230
    {{{114},340}, }, // S231
    {{{111},341}, }, // S232
    {{{101},342}, {{111},343}, }, // S233
    {{{104},344}, {{116},345}, {{117},346}, }, // S234
    {{{114},347}, }, // S235
    {{{114},348}, }, // S236
    {{{111},349}, }, // S237
    {{{100},350}, {{110},351}, }, // S238
    {{{108},352}, {{111},353}, {{116},354}, }, // S239
    {{{105},355}, }, // S240
    {{{113},356}, {{120},357}, }, // S241
    {{{101},358}, {{116},359}, }, // S242
    {{{101},360}, {{111},361}, {{116},362}, }, // S243
    {{{117},363}, }, // S244
    {{{101},364}, }, // S245
    {{{114},365}, }, // S246
    {{{111},366}, }, // S247
    {{{101},367}, {{111},368}, }, // S248
    {{{104},369}, {{116},370}, {{117},371}, }, // S249
    {{{114},372}, }, // S250
    {{{111},373}, }, // S251
    {{{116},374}, }, // S252
    {{{46},375}, }, // S253
    {{{121},376}, }, // S254
    {{{101},377}, }, // S255
    {{{120},378}, }, // S256
    {{{116},379}, }, // S257
    {}, // S258
    {{{117},380}, }, // S259
    {{{115},381}, }, // S260
    {{{117},382}, }, // S261
    {{{116},383}, }, // S262
    {{{110},384}, }, // S263
    {{{116},385}, }, // S264
    {}, // S265
    {{{46},386}, }, // S266
    {{{99},387}, }, // S267
    {{{48,57},269}, }, // S268
    {{{48,57},388}, {{95},388}, }, // S269
    {{{48,57},270}, {{95},270}, }, // S270
    {{{48},389}, {{49,57},390}, }, // S271
    {{{108},391}, }, // S272
    {{{110},392}, }, // S273
    {{{114},393}, }, // S274
    {{{101},394}, }, // S275
    {{{114},395}, }, // S276
    {}, // S277
    {{{114},396}, }, // S278
    {{{115},397}, }, // S279
    {{{100},398}, }, // S280
    {{{105},399}, }, // S281
    {{{110},400}, {{112},401}, }, // S282
    {{{109},402}, }, // S283
    {{{118},403}, }, // S284
    {}, // S285
    {{{111},404}, }, // S286
    {}, // S287
    {}, // S288
    {}, // S289
    {{{97},405}, }, // S290
    {}, // S291
    {{{120},406}, }, // S292
    {{{110},407}, }, // S293
    {{{108},408}, }, // S294
    {{{97},409}, {{103},410}, }, // S295
    {{{105},411}, }, // S296
    {{{114},412}, }, // S297
    {{{111},413}, }, // S298
    {{{98},414}, }, // S299
    {{{117},415}, }, // S300
    {{{115},416}, }, // S301
    {{{100},417}, }, // S302
    {{{105},418}, }, // S303
    {{{110},419}, {{112},420}, }, // S304
    {{{118},421}, }, // S305
    {}, // S306
    {{{111},422}, }, // S307
    {}, // S308
    {}, // S309
    {}, // S310
    {{{97},423}, }, // S311
    {}, // S312
    {{{120},424}, }, // S313
    {{{110},425}, }, // S314
    {{{108},426}, }, // S315
    {{{97},427}, {{103},428}, }, // S316
    {{{111},429}, }, // S317
    {{{105},430}, }, // S318
    {{{114},431}, }, // S319
    {{{111},432}, }, // S320
    {{{98},433}, }, // S321
    {{{117},434}, }, // S322
    {{{102},435}, }, // S323
    {{{46},436}, }, // S324
    {{{100},437}, }, // S325
    {{{100},438}, }, // S326
    {{{122},439}, }, // S327
    {{{110},440}, }, // S328
    {{{122},441}, }, // S329
    {{{118},442}, }, // S330
    {{{122},443}, }, // S331
    {{{116},444}, }, // S332
    {{{95},445}, }, // S333
    {{{95},446}, }, // S334
    {{{95},447}, }, // S335
    {{{97},448}, }, // S336
    {{{95},449}, }, // S337
    {{{108},450}, }, // S338
    {}, // S339
    {}, // S340
    {{{112},451}, }, // S341
    {{{105},452}, {{109},453}, }, // S342
    {{{116},454}, }, // S343
    {{{108},455}, {{114},456}, }, // S344
    {{{111},457}, }, // S345
    {{{98},458}, }, // S346
    {{{117},459}, }, // S347
    {{{97},460}, }, // S348
    {{{114},461}, }, // S349
    {{{100},462}, }, // S350
    {{{100},463}, }, // S351
    {{{122},464}, }, // S352
    {{{110},465}, }, // S353
    {{{122},466}, }, // S354
    {{{118},467}, }, // S355
    {{{122},468}, }, // S356
    {{{116},469}, }, // S357
    {{{95},470}, }, // S358
    {{{95},471}, }, // S359
    {{{95},472}, }, // S360
    {{{97},473}, }, // S361
    {{{95},474}, }, // S362
    {{{108},475}, }, // S363
    {}, // S364
    {}, // S365
    {{{112},476}, }, // S366
    {{{105},477}, {{109},478}, }, // S367
    {{{116},479}, }, // S368
    {{{108},480}, {{114},481}, }, // S369
    {{{111},482}, }, // S370
    {{{98},483}, }, // S371
    {{{117},484}, }, // S372
    {{{114},485}, }, // S373
    {}, // S374
    {{{103},486}, {{115},487}, {{116},488}, }, // S375
    {{{46},489}, }, // S376
    {}, // S377
    {{{48,57},490}, {{65,70},490}, {{97,102},490}, }, // S378
    {{{61},491}, }, // S379
    {{{110},492}, }, // S380
    {{{95},493}, }, // S381
    {{{108},494}, }, // S382
    {}, // S383
    {}, // S384
    {}, // S385
    {{{99},495}, {{102},496}, {{103},497}, {{105},498}, {{115},499}, }, // S386
    {{{104},500}, }, // S387
    {{{48,57},388}, {{95},388}, }, // S388
    {{{48,57},501}, {{95},501}, {{120},502}, }, // S389
    {{{48,57},501}, {{95},501}, }, // S390
    {{{101},503}, }, // S391
    {{{100},504}, }, // S392
    {{{111},505}, }, // S393
    {}, // S394
    {{{111},506}, }, // S395
    {{{101},507}, }, // S396
    {}, // S397
    {}, // S398
    {{{108},508}, }, // S399
    {{{115},509}, {{118},510}, }, // S400
    {{{121},511}, }, // S401
    {{{111},512}, }, // S402
    {}, // S403
    {{{111},513}, }, // S404
    {{{100},514}, }, // S405
    {}, // S406
    {}, // S407
    {}, // S408
    {{{114},515}, }, // S409
    {}, // S410
    {{{110},516}, }, // S411
    {{{116},517}, }, // S412
    {{{114},518}, }, // S413
    {}, // S414
    {{{110},519}, }, // S415
    {}, // S416
    {}, // S417
    {{{108},520}, }, // S418
    {{{115},521}, {{118},522}, }, // S419
    {{{121},523}, }, // S420
    {}, // S421
    {{{111},524}, }, // S422
    {{{100},525}, }, // S423
    {}, // S424
    {}, // S425
    {}, // S426
    {{{114},526}, }, // S427
    {}, // S428
    {{{109},527}, }, // S429
    {{{110},528}, }, // S430
    {{{116},529}, }, // S431
    {{{114},530}, }, // S432
    {}, // S433
    {{{110},531}, }, // S434
    {}, // S435
    {{{103},532}, {{115},533}, }, // S436
    {}, // S437
    {}, // S438
    {}, // S439
    {{{115},534}, }, // S440
    {}, // S441
    {{{95},535}, }, // S442
    {}, // S443
    {{{101},536}, }, // S444
    {{{115},537}, {{117},538}, }, // S445
    {{{115},539}, {{117},540}, }, // S446
    {{{115},541}, {{117},542}, }, // S447
    {{{100},543}, }, // S448
    {{{115},544}, {{117},545}, }, // S449
    {}, // S450
    {{{99},546}, }, // S451
    {{{110},547}, }, // S452
    {{{95},548}, }, // S453
    {{{108},549}, {{114},550}, }, // S454
    {}, // S455
    {{{95},551}, }, // S456
    {{{114},552}, }, // S457
    {}, // S458
    {{{110},553}, }, // S459
    {{{112},554}, }, // S460
    {}, // S461
    {}, // S462
    {}, // S463
    {}, // S464
    {{{115},555}, }, // S465
    {}, // S466
    {{{95},556}, }, // S467
    {}, // S468
    {{{101},557}, }, // S469
    {{{115},558}, {{117},559}, }, // S470
    {{{115},560}, {{117},561}, }, // S471
    {{{115},562}, {{117},563}, }, // S472
    {{{100},564}, }, // S473
    {{{115},565}, {{117},566}, }, // S474
    {}, // S475
    {{{99},567}, }, // S476
    {{{110},568}, }, // S477
    {{{95},569}, }, // S478
    {{{108},570}, {{114},571}, }, // S479
    {}, // S480
    {{{95},572}, }, // S481
    {{{114},573}, }, // S482
    {}, // S483
    {{{110},574}, }, // S484
    {}, // S485
    {{{101},575}, }, // S486
    {{{101},576}, }, // S487
    {{{101},577}, }, // S488
    {{{99},578}, {{102},579}, {{103},580}, {{105},581}, {{115},582}, }, // S489
    {{{48,57},583}, {{65,70},583}, {{95},583}, {{97,102},583}, }, // S490
    {{{48},584}, {{49,57},585}, }, // S491
    {{{99},586}, }, // S492
    {{{110},587}, }, // S493
    {{{108},588}, }, // S494
    {{{111},589}, }, // S495
    {{{105},590}, }, // S496
    {{{101},591}, {{114},592}, }, // S497
    {{{110},593}, }, // S498
    {{{101},594}, {{105},595}, }, // S499
    {{{97},596}, }, // S500
    {{{48,57},501}, {{95},501}, }, // S501
    {{{48,57},597}, {{65,70},597}, {{97,102},597}, }, // S502
    {}, // S503
    {{{105},598}, }, // S504
    {{{112},599}, }, // S505
    {{{112},600}, }, // S506
    {{{102},601}, }, // S507
    {}, // S508
    {{{116},602}, }, // S509
    {{{101},603}, }, // S510
    {{{115},604}, }, // S511
    {{{116},605}, }, // S512
    {{{114},606}, }, // S513
    {}, // S514
    {{{101},607}, }, // S515
    {{{116},608}, }, // S516
    {}, // S517
    {{{101},609}, }, // S518
    {{{99},610}, }, // S519
    {}, // S520
    {{{116},611}, }, // S521
    {{{101},612}, }, // S522
    {{{115},613}, }, // S523
    {{{114},614}, }, // S524
    {}, // S525
    {{{101},615}, }, // S526
    {{{111},616}, }, // S527
    {{{116},617}, }, // S528
    {}, // S529
    {{{101},618}, }, // S530
    {{{99},619}, }, // S531
    {{{101},620}, }, // S532
    {{{101},621}, }, // S533
    {{{116},622}, }, // S534
    {{{115},623}, {{117},624}, }, // S535
    {{{110},625}, }, // S536
    {}, // S537
    {}, // S538
    {}, // S539
    {}, // S540
    {}, // S541
    {}, // S542
    {{{49},626}, {{56},627}, }, // S543
    {}, // S544
    {}, // S545
    {{{110},628}, }, // S546
    {{{116},629}, }, // S547
    {{{115},630}, {{117},631}, }, // S548
    {}, // S549
    {}, // S550
    {{{115},632}, {{117},633}, }, // S551
    {{{101},634}, }, // S552
    {{{99},635}, }, // S553
    {{{95},636}, }, // S554
    {{{116},637}, }, // S555
    {{{115},638}, {{117},639}, }, // S556
    {{{110},640}, }, // S557
    {}, // S558
    {}, // S559
    {}, // S560
    {}, // S561
    {}, // S562
    {}, // S563
    {{{49},641}, {{51},642}, {{56},643}, }, // S564
    {}, // S565
    {}, // S566
    {{{110},644}, }, // S567
    {{{116},645}, }, // S568
    {{{115},646}, {{117},647}, }, // S569
    {}, // S570
    {}, // S571
    {{{115},648}, {{117},649}, }, // S572
    {{{101},650}, }, // S573
    {{{99},651}, }, // S574
    {{{116},652}, }, // S575
    {{{116},653}, }, // S576
    {{{101},654}, }, // S577
    {{{111},655}, }, // S578
    {{{105},656}, }, // S579
    {{{114},657}, }, // S580
    {{{110},658}, }, // S581
    {{{105},659}, }, // S582
    {{{48,57},583}, {{65,70},583}, {{95},583}, {{97,102},583}, }, // S583
    {{{48,57},660}, {{95},660}, {{120},661}, }, // S584
    {{{48,57},660}, {{95},660}, }, // S585
    {}, // S586
    {{{117},662}, }, // S587
    {}, // S588
    {{{112},663}, }, // S589
    {{{108},664}, }, // S590
    {{{116},665}, }, // S591
    {{{111},666}, }, // S592
    {{{105},667}, }, // S593
    {{{116},668}, }, // S594
    {{{122},669}, }, // S595
    {{{98},670}, }, // S596
    {{{48,57},671}, {{65,70},671}, {{95},671}, {{97,102},671}, }, // S597
    {{{114},672}, }, // S598
    {}, // S599
    {}, // S600
    {}, // S601
    {}, // S602
    {{{114},673}, }, // S603
    {{{105},674}, }, // S604
    {{{101},675}, }, // S605
    {}, // S606
    {{{115},676}, }, // S607
    {{{101},677}, }, // S608
    {}, // S609
    {}, // S610
    {}, // S611
    {{{114},678}, }, // S612
    {{{105},679}, }, // S613
    {}, // S614
    {{{115},680}, }, // S615
    {{{116},681}, }, // S616
    {{{101},682}, }, // S617
    {}, // S618
    {}, // S619
    {{{116},683}, }, // S620
    {{{116},684}, }, // S621
    {}, // S622
    {}, // S623
    {}, // S624
    {{{100},685}, }, // S625
    {{{54},686}, }, // S626
    {{{95},687}, }, // S627
    {{{116},688}, }, // S628
    {{{101},689}, }, // S629
    {}, // S630
    {}, // S631
    {}, // S632
    {}, // S633
    {{{49},690}, {{56},691}, }, // S634
    {{{95},692}, }, // S635
    {{{105},693}, }, // S636
    {}, // S637
    {}, // S638
    {}, // S639
    {{{100},694}, }, // S640
    {{{54},695}, }, // S641
    {{{50},696}, }, // S642
    {{{95},697}, }, // S643
    {{{116},698}, }, // S644
    {{{101},699}, }, // S645
    {}, // S646
    {}, // S647
    {}, // S648
    {}, // S649
    {{{49},700}, {{51},701}, {{56},702}, }, // S650
    {{{95},703}, }, // S651
    {}, // S652
    {}, // S653
    {}, // S654
    {{{112},704}, }, // S655
    {{{108},705}, }, // S656
    {{{111},706}, }, // S657
    {{{105},707}, }, // S658
    {{{122},708}, }, // S659
    {{{48,57},660}, {{95},660}, }, // S660
    {{{48,57},709}, {{65,70},709}, {{97,102},709}, }, // S661
    {{{108},710}, }, // S662
    {{{121},711}, }, // S663
    {{{108},712}, }, // S664
    {}, // S665
    {{{119},713}, }, // S666
    {{{116},714}, }, // S667
    {}, // S668
    {{{101},715}, }, // S669
    {{{108},716}, }, // S670
    {{{48,57},671}, {{65,70},671}, {{95},671}, {{97,102},671}, }, // S671
    {{{101},717}, }, // S672
    {{{116},718}, }, // S673
    {{{103},719}, }, // S674
    {{{95},720}, }, // S675
    {{{116},721}, }, // S676
    {{{114},722}, }, // S677
    {{{116},723}, }, // S678
    {{{103},724}, }, // S679
    {{{116},725}, }, // S680
    {{{101},726}, }, // S681
    {{{114},727}, }, // S682
    {}, // S683
    {}, // S684
    {{{49},728}, {{56},729}, }, // S685
    {{{95},730}, }, // S686
    {{{115},731}, {{117},732}, }, // S687
    {}, // S688
    {{{114},733}, }, // S689
    {{{54},734}, }, // S690
    {}, // S691
    {{{115},735}, {{117},736}, }, // S692
    {{{54},737}, }, // S693
    {{{49},738}, {{51},739}, {{56},740}, {{95},741}, }, // S694
    {{{95},742}, }, // S695
    {{{95},743}, }, // S696
    {{{115},744}, {{117},745}, }, // S697
    {}, // S698
    {{{114},746}, }, // S699
    {{{54},747}, }, // S700
    {{{50},748}, }, // S701
    {}, // S702
    {{{115},749}, {{117},750}, }, // S703
    {{{121},751}, }, // S704
    {{{108},752}, }, // S705
    {{{119},753}, }, // S706
    {{{116},754}, }, // S707
    {{{101},755}, }, // S708
    {{{48,57},756}, {{65,70},756}, {{95},756}, {{97,102},756}, }, // S709
    {{{108},757}, }, // S710
    {}, // S711
    {}, // S712
    {}, // S713
    {}, // S714
    {}, // S715
    {{{101},758}, }, // S716
    {{{99},759}, }, // S717
    {{{95},760}, }, // S718
    {{{110},761}, }, // S719
    {{{102},762}, }, // S720
    {}, // S721
    {{{112},763}, }, // S722
    {{{95},764}, }, // S723
    {{{110},765}, }, // S724
    {}, // S725
    {{{95},766}, }, // S726
    {{{112},767}, }, // S727
    {{{54},768}, }, // S728
    {{{95},769}, }, // S729
    {{{115},770}, {{117},771}, }, // S730
    {}, // S731
    {}, // S732
    {{{112},772}, }, // S733
    {}, // S734
    {{{95},773}, {{97},774}, }, // S735
    {{{95},775}, }, // S736
    {{{52},776}, }, // S737
    {{{54},777}, }, // S738
    {{{50},778}, }, // S739
    {{{95},779}, }, // S740
    {{{115},780}, {{117},781}, }, // S741
    {{{115},782}, {{117},783}, }, // S742
    {{{115},784}, {{117},785}, }, // S743
    {}, // S744
    {}, // S745
    {{{112},786}, }, // S746
    {}, // S747
    {}, // S748
    {{{95},787}, {{97},788}, }, // S749
    {{{95},789}, }, // S750
    {}, // S751
    {}, // S752
    {}, // S753
    {}, // S754
    {}, // S755
    {{{48,57},756}, {{65,70},756}, {{95},756}, {{97,102},756}, }, // S756
    {}, // S757
    {}, // S758
    {{{116},790}, }, // S759
    {{{115},791}, {{117},792}, }, // S760
    {}, // S761
    {{{54},793}, }, // S762
    {{{114},794}, }, // S763
    {{{115},795}, {{117},796}, }, // S764
    {}, // S765
    {{{102},797}, }, // S766
    {{{114},798}, }, // S767
    {{{95},799}, }, // S768
    {{{115},800}, }, // S769
    {}, // S770
    {}, // S771
    {{{114},801}, }, // S772
    {{{102},802}, }, // S773
    {{{116},803}, }, // S774
    {{{102},804}, }, // S775
    {}, // S776
    {{{95},805}, }, // S777
    {{{95},806}, }, // S778
    {{{115},807}, }, // S779
    {{{95},808}, }, // S780
    {{{95},809}, }, // S781
    {}, // S782
    {}, // S783
    {}, // S784
    {}, // S785
    {{{114},810}, }, // S786
    {{{102},811}, }, // S787
    {{{116},812}, }, // S788
    {{{102},813}, }, // S789
    {}, // S790
    {{{95},814}, }, // S791
    {{{95},815}, }, // S792
    {{{52},816}, }, // S793
    {{{101},817}, }, // S794
    {{{95},818}, }, // S795
    {{{95},819}, }, // S796
    {{{51},820}, }, // S797
    {{{101},821}, }, // S798
    {{{115},822}, }, // S799
    {}, // S800
    {{{101},823}, }, // S801
    {{{51},824}, {{54},825}, }, // S802
    {{{95},826}, }, // S803
    {{{51},827}, {{54},828}, }, // S804
    {{{115},829}, }, // S805
    {{{115},830}, }, // S806
    {}, // S807
    {{{105},831}, }, // S808
    {{{105},832}, }, // S809
    {{{101},833}, }, // S810
    {{{51},834}, {{54},835}, }, // S811
    {{{95},836}, }, // S812
    {{{51},837}, {{54},838}, }, // S813
    {{{105},839}, }, // S814
    {{{105},840}, }, // S815
    {}, // S816
    {{{116},841}, }, // S817
    {{{105},842}, }, // S818
    {{{105},843}, }, // S819
    {{{50},844}, }, // S820
    {{{116},845}, }, // S821
    {}, // S822
    {{{116},846}, }, // S823
    {{{50},847}, }, // S824
    {{{52},848}, }, // S825
    {{{102},849}, }, // S826
    {{{50},850}, }, // S827
    {{{52},851}, }, // S828
    {}, // S829
    {}, // S830
    {{{51},852}, }, // S831
    {{{51},853}, }, // S832
    {{{116},854}, }, // S833
    {{{50},855}, }, // S834
    {{{52},856}, }, // S835
    {{{102},857}, }, // S836
    {{{50},858}, }, // S837
    {{{52},859}, }, // S838
    {{{51},860}, {{54},861}, }, // S839
    {{{51},862}, {{54},863}, }, // S840
    {{{95},864}, }, // S841
    {{{51},865}, {{54},866}, }, // S842
    {{{51},867}, {{54},868}, }, // S843
    {}, // S844
    {{{95},869}, }, // S845
    {{{95},870}, }, // S846
    {}, // S847
    {}, // S848
    {{{51},871}, {{54},872}, }, // S849
    {}, // S850
    {}, // S851
    {{{50},873}, }, // S852
    {{{50},874}, }, // S853
    {{{95},875}, }, // S854
    {}, // S855
    {}, // S856
    {{{51},876}, {{54},877}, }, // S857
    {}, // S858
    {}, // S859
    {{{50},878}, }, // S860
    {{{52},879}, }, // S861
    {{{50},880}, }, // S862
    {{{52},881}, }, // S863
    {{{105},882}, }, // S864
    {{{50},883}, }, // S865
    {{{52},884}, }, // S866
    {{{50},885}, }, // S867
    {{{52},886}, }, // S868
    {{{105},887}, }, // S869
    {{{102},888}, }, // S870
    {{{50},889}, }, // S871
    {{{52},890}, }, // S872
    {}, // S873
    {}, // S874
    {{{102},891}, }, // S875
    {{{50},892}, }, // S876
    {{{52},893}, }, // S877
    {}, // S878
    {}, // S879
    {}, // S880
    {}, // S881
    {{{51},894}, }, // S882
    {}, // S883
    {}, // S884
    {}, // S885
    {}, // S886
    {{{54},895}, }, // S887
    {{{51},896}, }, // S888
    {{{95},897}, }, // S889
    {{{95},898}, }, // S890
    {{{54},899}, }, // S891
    {{{95},900}, }, // S892
    {{{95},901}, }, // S893
    {{{50},902}, }, // S894
    {{{52},903}, }, // S895
    {{{50},904}, }, // S896
    {{{115},905}, {{117},906}, }, // S897
    {{{115},907}, {{117},908}, }, // S898
    {{{52},909}, }, // S899
    {{{115},910}, {{117},911}, }, // S900
    {{{115},912}, {{117},913}, }, // S901
    {}, // S902
    {}, // S903
    {}, // S904
    {}, // S905
    {}, // S906
    {}, // S907
    {}, // S908
    {}, // S909
    {}, // S910
    {}, // S911
    {}, // S912
    {}, // S913
};

Token Lexer::get(){
    if(current == std::istream::traits_type::eof()){
        return Token(std::monostate(), pos);
    }
    while(true){
        if(states[state].contains(current)){
            state = states[state][current];
            current = fetch();
        }else if(states[state].contains('\0')){
            state = states[state]['\0'];
            current = fetch();
        }else{
            Position _pos = pos;
            pos = cur;
            std::string _text = text;
            if(current != std::istream::traits_type::eof()){
                _text.pop_back();
            }
            switch(state){
                // Action 0
                case 50:
                    stack.emplace_back(18, text);
                    state = 0;
                    text = current;
                break;
                // Action 1
                case 5:
                    stack.emplace_back(0, text);
                    state = 0;
                    text = current;
                break;
                // Action 2
                case 6:
                    state = stack.back().first;
                    text = current;
                    stack.pop_back();
                break;
                // Action 3
                case 3:
                    state = 0;
                    text = current;
                break;
                // Action 4
                case 4:
                    state = 0;
                    text = current;
                break;
                // Action 5
                case 2:
                    state = 0;
                    text = current;
                break;
                // Action 6
                case 1:
                    state = 0;
                    text = current;
                {
                    throw Exception::Parse("block comment not close", {_pos.line, _pos.column});
                }break;
                // Action 7
                case 57:
                    stack.emplace_back(18, text);
                    state = 7;
                    text = current;
                break;
                // Action 8
                case 8:
                case 10:
                    state = stack.back().first;
                    text = current;
                    stack.pop_back();
                break;
                // Action 9
                case 9:
                    state = 7;
                    text = current;
                break;
                // Action 10
                case 20:
                case 21:
                case 22:
                case 23:
                    state = 18;
                    text = current;
                break;
                // Action 11
                case 26:
                    state = 18;
                    text = current;
                {
                    return Token(ParenL(), _pos);
                }break;
                // Action 12
                case 27:
                    state = 18;
                    text = current;
                {
                    return Token(ParenR(), _pos);
                }break;
                // Action 13
                case 49:
                    state = 18;
                    text = current;
                {
                    return Token(Id(_text.substr(1)), _pos);
                }break;
                // Action 14
                case 24:
                    stack.emplace_back(18, text);
                    state = 11;
                    text = current;
                break;
                // Action 15
                case 14:
                    state = 11;
                    text = current;
                {
                    throw Exception::Parse("invalid character in string", {_pos.line, _pos.column});
                }break;
                // Action 16
                case 12:
                    state = 11;
                    text = current;
                {
                    throw Exception::Parse("string not close", {_pos.line, _pos.column});
                }break;
                // Action 17
                case 13:
                    state = 11;
                break;
                // Action 18
                case 16:
                case 17:
                    state = 11;
                break;
                // Action 19
                case 15:
                    state = stack.back().first;
                    text = current;
                    stack.pop_back();
                {
                    return Token(String(_text.substr(0, _text.size() - 1)), _pos);
                }break;
                // Action 20
                case 29:
                case 30:
                case 54:
                    state = 18;
                    text = current;
                {
                    // Check underscore
                    if(_text.ends_with('_') || (_text.find("__") != std::string::npos)){
                        throw Exception::Parse("integer can't have consecutive '_' or ends with '_'", {_pos.line, _pos.column});
                    }
                    _text.erase(std::remove(_text.begin(), _text.end(), '_'), _text.end());
                    return Token(Integer(_text), _pos);
                }break;
                // Action 21
                case 98:
                case 142:
                    state = 18;
                    text = current;
                {
                    // Check underscore
                    if(_text.ends_with('_') || (_text.find("__") != std::string::npos)){
                        throw Exception::Parse("integer can't have consecutive '_' or ends with '_'", {_pos.line, _pos.column});
                    }
                    _text.erase(std::remove(_text.begin(), _text.end(), '_'), _text.end());
                    return Token(Integer(_text), _pos);
                }break;
                // Action 22
                case 118:
                case 125:
                case 490:
                case 583:
                    state = 18;
                    text = current;
                {
                    // Check underscore
                    if(_text.ends_with('_') || (_text.find("__") != std::string::npos)){
                        throw Exception::Parse("floating number can't have consecutive '_' or ends with '_'", {_pos.line, _pos.column});
                    }
                    _text.erase(std::remove(_text.begin(), _text.end(), '_'), _text.end());
                    return Token(Float(_text), _pos);
                }break;
                // Action 23
                case 53:
                case 93:
                case 95:
                case 97:
                case 139:
                case 140:
                case 180:
                    state = 18;
                    text = current;
                {
                    // Check underscore
                    if(_text.ends_with('_') || (_text.find("__") != std::string::npos)){
                        throw Exception::Parse("floating number can't have consecutive '_' or ends with '_'", {_pos.line, _pos.column});
                    }
                    _text.erase(std::remove(_text.begin(), _text.end(), '_'), _text.end());
                    return Token(Float(_text), _pos);
                }break;
                // Action 24
                case 141:
                case 181:
                case 183:
                case 185:
                case 269:
                case 270:
                case 388:
                    state = 18;
                    text = current;
                {
                    // Check underscore
                    if(_text.ends_with('_') || (_text.find("__") != std::string::npos)){
                        throw Exception::Parse("floating number can't have consecutive '_' or ends with '_'", {_pos.line, _pos.column});
                    }
                    _text.erase(std::remove(_text.begin(), _text.end(), '_'), _text.end());
                    return Token(Float(_text), _pos);
                }break;
                // Action 25
                case 584:
                case 585:
                case 660:
                    state = 18;
                    text = current;
                {
                    // Check underscore
                    if(_text.ends_with('_') || (_text.find("__") != std::string::npos)){
                        throw Exception::Parse("offset can't have consecutive '_' or ends with '_'", {_pos.line, _pos.column});
                    }
                    _text.erase(std::remove(_text.begin(), _text.end(), '_'), _text.end());
                    return Token(MemOffset(std::stoll(_text.substr(7))), _pos);
                }break;
                // Action 26
                case 709:
                case 756:
                    state = 18;
                    text = current;
                {
                    // Check underscore
                    if(_text.ends_with('_') || (_text.find("__") != std::string::npos)){
                        throw Exception::Parse("offset can't have consecutive '_' or ends with '_'", {_pos.line, _pos.column});
                    }
                    _text.erase(std::remove(_text.begin(), _text.end(), '_'), _text.end());
                    return Token(MemOffset(std::stoll(_text.substr(7), nullptr, 16)), _pos);
                }break;
                // Action 27
                case 389:
                case 390:
                case 501:
                    state = 18;
                    text = current;
                {
                    // Check underscore
                    if(_text.ends_with('_') || (_text.find("__") != std::string::npos)){
                        throw Exception::Parse("align can't have consecutive '_' or ends with '_'", {_pos.line, _pos.column});
                    }
                    _text.erase(std::remove(_text.begin(), _text.end(), '_'), _text.end());
                    return Token(MemAlign(std::stoll(_text.substr(6))), _pos);
                }break;
                // Action 28
                case 597:
                case 671:
                    state = 18;
                    text = current;
                {
                    // Check underscore
                    if(_text.ends_with('_') || (_text.find("__") != std::string::npos)){
                        throw Exception::Parse("align can't have consecutive '_' or ends with '_'", {_pos.line, _pos.column});
                    }
                    _text.erase(std::remove(_text.begin(), _text.end(), '_'), _text.end());
                    return Token(MemAlign(std::stoll(_text.substr(6), nullptr, 16)), _pos);
                }break;
                // Action 29
                case 377:
                    state = 18;
                    text = current;
                {
                    return Token(Module(), _pos);
                }break;
                // Action 30
                case 178:
                    state = 18;
                    text = current;
                {
                    return Token(Type(), _pos);
                }break;
                // Action 31
                case 374:
                    state = 18;
                    text = current;
                {
                    return Token(Import(), _pos);
                }break;
                // Action 32
                case 277:
                    state = 18;
                    text = current;
                {
                    return Token(Export(), _pos);
                }break;
                // Action 33
                case 258:
                    state = 18;
                    text = current;
                {
                    return Token(Param(), _pos);
                }break;
                // Action 34
                case 383:
                    state = 18;
                    text = current;
                {
                    return Token(Result(), _pos);
                }break;
                // Action 35
                case 435:
                    state = 18;
                    text = current;
                {
                    return Token(Funcref(), _pos);
                }break;
                // Action 36
                case 278:
                    state = 18;
                    text = current;
                {
                    return Token(Extern(), _pos);
                }break;
                // Action 37
                case 601:
                    state = 18;
                    text = current;
                {
                    return Token(Externref(), _pos);
                }break;
                // Action 38
                case 111:
                case 112:
                case 115:
                case 116:
                    state = 18;
                    text = current;
                {
                    return Token(NumType(_text), _pos);
                }break;
                // Action 39
                case 158:
                    state = 18;
                    text = current;
                {
                    return Token(Func(), _pos);
                }break;
                // Action 40
                case 266:
                    state = 18;
                    text = current;
                {
                    return Token(Table(), _pos);
                }break;
                // Action 41
                case 376:
                    state = 18;
                    text = current;
                {
                    return Token(Memory(), _pos);
                }break;
                // Action 42
                case 324:
                    state = 18;
                    text = current;
                {
                    return Token(Global(), _pos);
                }break;
                // Action 43
                case 124:
                    state = 18;
                    text = current;
                {
                    return Token(Mut(), _pos);
                }break;
                // Action 44
                case 253:
                    state = 18;
                    text = current;
                {
                    return Token(Local(), _pos);
                }break;
                // Action 45
                case 152:
                    state = 18;
                    text = current;
                {
                    return Token(Elem(), _pos);
                }break;
                // Action 46
                case 163:
                    state = 18;
                    text = current;
                {
                    return Token(Item(), _pos);
                }break;
                // Action 47
                case 394:
                    state = 18;
                    text = current;
                {
                    return Token(Declare(), _pos);
                }break;
                // Action 48
                case 379:
                    state = 18;
                    text = current;
                {
                    return Token(Offset(), _pos);
                }break;
                // Action 49
                case 149:
                    state = 18;
                    text = current;
                {
                    return Token(Data(), _pos);
                }break;
                // Action 50
                case 265:
                    state = 18;
                    text = current;
                {
                    return Token(Start(), _pos);
                }break;
                // Action 51
                case 177:
                    state = 18;
                    text = current;
                {
                    return Token(Then(), _pos);
                }break;
                // Action 52
                case 758:
                    state = 18;
                    text = current;
                {
                    return Token(ControlInstr(ControlInstr::Unreachable), _pos);
                }break;
                // Action 53
                case 187:
                    state = 18;
                    text = current;
                {
                    return Token(Block(), _pos);
                }break;
                // Action 54
                case 126:
                    state = 18;
                    text = current;
                {
                    return Token(ControlInstr(ControlInstr::Nop), _pos);
                }break;
                // Action 55
                case 108:
                    state = 18;
                    text = current;
                {
                    return Token(End(), _pos);
                }break;
                // Action 56
                case 165:
                    state = 18;
                    text = current;
                {
                    return Token(Loop(), _pos);
                }break;
                // Action 57
                case 74:
                    state = 18;
                    text = current;
                {
                    return Token(If(), _pos);
                }break;
                // Action 58
                case 153:
                    state = 18;
                    text = current;
                {
                    return Token(Else(), _pos);
                }break;
                // Action 59
                case 60:
                    state = 18;
                    text = current;
                {
                    return Token(Br(), _pos);
                }break;
                // Action 60
                case 188:
                    state = 18;
                    text = current;
                {
                    return Token(Br_if(), _pos);
                }break;
                // Action 61
                case 503:
                    state = 18;
                    text = current;
                {
                    return Token(Br_table(), _pos);
                }break;
                // Action 62
                case 384:
                    state = 18;
                    text = current;
                {
                    return Token(ControlInstr(ControlInstr::Return), _pos);
                }break;
                // Action 63
                case 148:
                    state = 18;
                    text = current;
                {
                    return Token(Call(), _pos);
                }break;
                // Action 64
                case 790:
                    state = 18;
                    text = current;
                {
                    return Token(Call_indirect(), _pos);
                }break;
                // Action 65
                case 588:
                    state = 18;
                    text = current;
                {
                    return Token(Ref_null(), _pos);
                }break;
                // Action 66
                case 757:
                    state = 18;
                    text = current;
                {
                    return Token(Ref_is_null(), _pos);
                }break;
                // Action 67
                case 586:
                    state = 18;
                    text = current;
                {
                    return Token(Ref_func(), _pos);
                }break;
                // Action 68
                case 151:
                    state = 18;
                    text = current;
                {
                    return Token(Drop(), _pos);
                }break;
                // Action 69
                case 385:
                    state = 18;
                    text = current;
                {
                    return Token(Select(), _pos);
                }break;
                // Action 70
                case 652:
                    state = 18;
                    text = current;
                {
                    return Token(VariableInstr(VariableInstr::LocalGet), _pos);
                }break;
                // Action 71
                case 653:
                    state = 18;
                    text = current;
                {
                    return Token(VariableInstr(VariableInstr::LocalSet), _pos);
                }break;
                // Action 72
                case 654:
                    state = 18;
                    text = current;
                {
                    return Token(VariableInstr(VariableInstr::LocalTee), _pos);
                }break;
                // Action 73
                case 683:
                    state = 18;
                    text = current;
                {
                    return Token(VariableInstr(VariableInstr::GlobalGet), _pos);
                }break;
                // Action 74
                case 684:
                    state = 18;
                    text = current;
                {
                    return Token(VariableInstr(VariableInstr::GlobalSet), _pos);
                }break;
                // Action 75
                case 665:
                    state = 18;
                    text = current;
                {
                    return Token(TableInstr(TableInstr::TableGet), _pos);
                }break;
                // Action 76
                case 668:
                    state = 18;
                    text = current;
                {
                    return Token(TableInstr(TableInstr::TableSet), _pos);
                }break;
                // Action 77
                case 715:
                    state = 18;
                    text = current;
                {
                    return Token(TableInstr(TableInstr::TableSize), _pos);
                }break;
                // Action 78
                case 713:
                    state = 18;
                    text = current;
                {
                    return Token(TableInstr(TableInstr::TableGrow), _pos);
                }break;
                // Action 79
                case 712:
                    state = 18;
                    text = current;
                {
                    return Token(TableInstr(TableInstr::TableFill), _pos);
                }break;
                // Action 80
                case 711:
                    state = 18;
                    text = current;
                {
                    return Token(Table_copy(), _pos);
                }break;
                // Action 81
                case 714:
                    state = 18;
                    text = current;
                {
                    return Token(Table_init(), _pos);
                }break;
                // Action 82
                case 600:
                    state = 18;
                    text = current;
                {
                    return Token(Elem_drop(), _pos);
                }break;
                // Action 83
                case 755:
                    state = 18;
                    text = current;
                {
                    return Token(Memory_size(), _pos);
                }break;
                // Action 84
                case 753:
                    state = 18;
                    text = current;
                {
                    return Token(Memory_grow(), _pos);
                }break;
                // Action 85
                case 752:
                    state = 18;
                    text = current;
                {
                    return Token(Memory_fill(), _pos);
                }break;
                // Action 86
                case 754:
                    state = 18;
                    text = current;
                {
                    return Token(Memory_init(), _pos);
                }break;
                // Action 87
                case 751:
                    state = 18;
                    text = current;
                {
                    return Token(Memory_copy(), _pos);
                }break;
                // Action 88
                case 599:
                    state = 18;
                    text = current;
                {
                    return Token(Data_drop(), _pos);
                }break;
                // Action 89
                case 543:
                    state = 18;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I32Load), _pos);
                }break;
                // Action 90
                case 564:
                    state = 18;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I64Load), _pos);
                }break;
                // Action 91
                case 514:
                    state = 18;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::F32Load), _pos);
                }break;
                // Action 92
                case 525:
                    state = 18;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::F64Load), _pos);
                }break;
                // Action 93
                case 731:
                    state = 18;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I32Load8_s), _pos);
                }break;
                // Action 94
                case 732:
                    state = 18;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I32Load8_u), _pos);
                }break;
                // Action 95
                case 770:
                    state = 18;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I32Load16_s), _pos);
                }break;
                // Action 96
                case 771:
                    state = 18;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I32Load16_u), _pos);
                }break;
                // Action 97
                case 744:
                    state = 18;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I64Load8_s), _pos);
                }break;
                // Action 98
                case 745:
                    state = 18;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I64Load8_u), _pos);
                }break;
                // Action 99
                case 782:
                    state = 18;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I64Load16_s), _pos);
                }break;
                // Action 100
                case 783:
                    state = 18;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I64Load16_u), _pos);
                }break;
                // Action 101
                case 784:
                    state = 18;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I64Load32_s), _pos);
                }break;
                // Action 102
                case 785:
                    state = 18;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I64Load32_u), _pos);
                }break;
                // Action 103
                case 634:
                    state = 18;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I32Store), _pos);
                }break;
                // Action 104
                case 650:
                    state = 18;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I64Store), _pos);
                }break;
                // Action 105
                case 609:
                    state = 18;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::F32Store), _pos);
                }break;
                // Action 106
                case 618:
                    state = 18;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::F64Store), _pos);
                }break;
                // Action 107
                case 691:
                    state = 18;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I32Store8), _pos);
                }break;
                // Action 108
                case 734:
                    state = 18;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I32Store16), _pos);
                }break;
                // Action 109
                case 702:
                    state = 18;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I64Store8), _pos);
                }break;
                // Action 110
                case 747:
                    state = 18;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I64Store16), _pos);
                }break;
                // Action 111
                case 748:
                    state = 18;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I64Store32), _pos);
                }break;
                // Action 112
                case 622:
                    state = 18;
                    text = current;
                {
                    return Token(I32_const(), _pos);
                }break;
                // Action 113
                case 637:
                    state = 18;
                    text = current;
                {
                    return Token(I64_const(), _pos);
                }break;
                // Action 114
                case 602:
                    state = 18;
                    text = current;
                {
                    return Token(F32_const(), _pos);
                }break;
                // Action 115
                case 611:
                    state = 18;
                    text = current;
                {
                    return Token(F64_const(), _pos);
                }break;
                // Action 116
                case 443:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Eqz), _pos);
                }break;
                // Action 117
                case 331:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Eq), _pos);
                }break;
                // Action 118
                case 339:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Ne), _pos);
                }break;
                // Action 119
                case 544:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Lt_s), _pos);
                }break;
                // Action 120
                case 545:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Lt_u), _pos);
                }break;
                // Action 121
                case 539:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Gt_s), _pos);
                }break;
                // Action 122
                case 540:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Gt_u), _pos);
                }break;
                // Action 123
                case 541:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Le_s), _pos);
                }break;
                // Action 124
                case 542:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Le_u), _pos);
                }break;
                // Action 125
                case 537:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Ge_s), _pos);
                }break;
                // Action 126
                case 538:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Ge_u), _pos);
                }break;
                // Action 127
                case 468:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Eqz), _pos);
                }break;
                // Action 128
                case 356:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Eq), _pos);
                }break;
                // Action 129
                case 364:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Ne), _pos);
                }break;
                // Action 130
                case 565:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Lt_s), _pos);
                }break;
                // Action 131
                case 566:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Lt_u), _pos);
                }break;
                // Action 132
                case 560:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Gt_s), _pos);
                }break;
                // Action 133
                case 561:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Gt_u), _pos);
                }break;
                // Action 134
                case 562:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Le_s), _pos);
                }break;
                // Action 135
                case 563:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Le_u), _pos);
                }break;
                // Action 136
                case 558:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Ge_s), _pos);
                }break;
                // Action 137
                case 559:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Ge_u), _pos);
                }break;
                // Action 138
                case 285:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Eq), _pos);
                }break;
                // Action 139
                case 295:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Ne), _pos);
                }break;
                // Action 140
                case 291:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Lt), _pos);
                }break;
                // Action 141
                case 288:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Gt), _pos);
                }break;
                // Action 142
                case 289:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Le), _pos);
                }break;
                // Action 143
                case 287:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Ge), _pos);
                }break;
                // Action 144
                case 306:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Eq), _pos);
                }break;
                // Action 145
                case 316:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Ne), _pos);
                }break;
                // Action 146
                case 312:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Lt), _pos);
                }break;
                // Action 147
                case 309:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Gt), _pos);
                }break;
                // Action 148
                case 310:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Le), _pos);
                }break;
                // Action 149
                case 308:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Ge), _pos);
                }break;
                // Action 150
                case 439:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Clz), _pos);
                }break;
                // Action 151
                case 441:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Ctz), _pos);
                }break;
                // Action 152
                case 688:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Popcnt), _pos);
                }break;
                // Action 153
                case 437:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Add), _pos);
                }break;
                // Action 154
                case 458:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Sub), _pos);
                }break;
                // Action 155
                case 450:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Mul), _pos);
                }break;
                // Action 156
                case 623:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Div_s), _pos);
                }break;
                // Action 157
                case 624:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Div_u), _pos);
                }break;
                // Action 158
                case 630:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Rem_s), _pos);
                }break;
                // Action 159
                case 631:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Rem_u), _pos);
                }break;
                // Action 160
                case 438:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32And), _pos);
                }break;
                // Action 161
                case 340:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Or), _pos);
                }break;
                // Action 162
                case 461:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Xor), _pos);
                }break;
                // Action 163
                case 455:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Shl), _pos);
                }break;
                // Action 164
                case 632:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Shr_s), _pos);
                }break;
                // Action 165
                case 633:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Shr_u), _pos);
                }break;
                // Action 166
                case 549:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Rotl), _pos);
                }break;
                // Action 167
                case 550:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Rotr), _pos);
                }break;
                // Action 168
                case 464:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Clz), _pos);
                }break;
                // Action 169
                case 466:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Ctz), _pos);
                }break;
                // Action 170
                case 698:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Popcnt), _pos);
                }break;
                // Action 171
                case 462:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Add), _pos);
                }break;
                // Action 172
                case 483:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Sub), _pos);
                }break;
                // Action 173
                case 475:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Mul), _pos);
                }break;
                // Action 174
                case 638:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Div_s), _pos);
                }break;
                // Action 175
                case 639:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Div_u), _pos);
                }break;
                // Action 176
                case 646:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Rem_s), _pos);
                }break;
                // Action 177
                case 647:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Rem_u), _pos);
                }break;
                // Action 178
                case 463:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64And), _pos);
                }break;
                // Action 179
                case 365:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Or), _pos);
                }break;
                // Action 180
                case 485:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Xor), _pos);
                }break;
                // Action 181
                case 480:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Shl), _pos);
                }break;
                // Action 182
                case 648:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Shr_s), _pos);
                }break;
                // Action 183
                case 649:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Shr_u), _pos);
                }break;
                // Action 184
                case 570:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Rotl), _pos);
                }break;
                // Action 185
                case 571:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Rotr), _pos);
                }break;
                // Action 186
                case 397:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Abs), _pos);
                }break;
                // Action 187
                case 410:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Neg), _pos);
                }break;
                // Action 188
                case 508:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Ceil), _pos);
                }break;
                // Action 189
                case 606:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Floor), _pos);
                }break;
                // Action 190
                case 610:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Trunc), _pos);
                }break;
                // Action 191
                case 721:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Nearest), _pos);
                }break;
                // Action 192
                case 517:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Sqrt), _pos);
                }break;
                // Action 193
                case 398:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Add), _pos);
                }break;
                // Action 194
                case 414:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Sub), _pos);
                }break;
                // Action 195
                case 408:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Mul), _pos);
                }break;
                // Action 196
                case 403:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Div), _pos);
                }break;
                // Action 197
                case 407:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Min), _pos);
                }break;
                // Action 198
                case 406:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Max), _pos);
                }break;
                // Action 199
                case 761:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Copysign), _pos);
                }break;
                // Action 200
                case 416:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Abs), _pos);
                }break;
                // Action 201
                case 428:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Neg), _pos);
                }break;
                // Action 202
                case 520:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Ceil), _pos);
                }break;
                // Action 203
                case 614:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Floor), _pos);
                }break;
                // Action 204
                case 619:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Trunc), _pos);
                }break;
                // Action 205
                case 725:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Nearest), _pos);
                }break;
                // Action 206
                case 529:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Sqrt), _pos);
                }break;
                // Action 207
                case 417:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Add), _pos);
                }break;
                // Action 208
                case 433:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Sub), _pos);
                }break;
                // Action 209
                case 426:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Mul), _pos);
                }break;
                // Action 210
                case 421:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Div), _pos);
                }break;
                // Action 211
                case 425:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Min), _pos);
                }break;
                // Action 212
                case 424:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Max), _pos);
                }break;
                // Action 213
                case 765:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Copysign), _pos);
                }break;
                // Action 214
                case 776:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Wrap_i64), _pos);
                }break;
                // Action 215
                case 847:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Trunc_s_f32), _pos);
                }break;
                // Action 216
                case 850:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Trunc_u_f32), _pos);
                }break;
                // Action 217
                case 848:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Trunc_s_f64), _pos);
                }break;
                // Action 218
                case 851:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Trunc_u_f64), _pos);
                }break;
                // Action 219
                case 873:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Extend_s_i32), _pos);
                }break;
                // Action 220
                case 874:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Extend_u_i32), _pos);
                }break;
                // Action 221
                case 855:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Trunc_s_f32), _pos);
                }break;
                // Action 222
                case 858:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Trunc_u_f32), _pos);
                }break;
                // Action 223
                case 856:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Trunc_s_f64), _pos);
                }break;
                // Action 224
                case 859:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Trunc_u_f64), _pos);
                }break;
                // Action 225
                case 878:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Convert_s_i32), _pos);
                }break;
                // Action 226
                case 880:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Convert_u_i32), _pos);
                }break;
                // Action 227
                case 879:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Convert_s_i64), _pos);
                }break;
                // Action 228
                case 881:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Convert_u_i64), _pos);
                }break;
                // Action 229
                case 816:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Demote_f64), _pos);
                }break;
                // Action 230
                case 883:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Convert_s_i32), _pos);
                }break;
                // Action 231
                case 885:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Convert_u_i32), _pos);
                }break;
                // Action 232
                case 884:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Convert_s_i64), _pos);
                }break;
                // Action 233
                case 886:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Convert_u_i64), _pos);
                }break;
                // Action 234
                case 844:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Promote_f32), _pos);
                }break;
                // Action 235
                case 904:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Reinterpret_f32), _pos);
                }break;
                // Action 236
                case 909:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Reinterpret_f64), _pos);
                }break;
                // Action 237
                case 902:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Reinterpret_i32), _pos);
                }break;
                // Action 238
                case 903:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Reinterpret_i64), _pos);
                }break;
                // Action 239
                case 800:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Extend8_s), _pos);
                }break;
                // Action 240
                case 822:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Extend16_s), _pos);
                }break;
                // Action 241
                case 807:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Extend8_s), _pos);
                }break;
                // Action 242
                case 829:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Extend16_s), _pos);
                }break;
                // Action 243
                case 830:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Extend32_s), _pos);
                }break;
                // Action 244
                case 905:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Trunc_sat_f32_s), _pos);
                }break;
                // Action 245
                case 906:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Trunc_sat_f32_u), _pos);
                }break;
                // Action 246
                case 907:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Trunc_sat_f64_s), _pos);
                }break;
                // Action 247
                case 908:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Trunc_sat_f64_u), _pos);
                }break;
                // Action 248
                case 910:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Trunc_sat_f32_s), _pos);
                }break;
                // Action 249
                case 913:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Trunc_sat_f64_u), _pos);
                }break;
                // Action 250
                case 912:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Trunc_sat_f64_s), _pos);
                }break;
                // Action 251
                case 911:
                    state = 18;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Trunc_sat_f32_u), _pos);
                }break;
                // Action 252
                case 19:
                    state = 18;
                    text = current;
                {
                    return Token(std::monostate(), _pos);
                }break;
                default:
                    throw UnknownToken(_pos, text);
            }
        }
    }
}

const char* UnknownToken::what(){
    return msg.c_str();
}

} // namespace WasmVM


