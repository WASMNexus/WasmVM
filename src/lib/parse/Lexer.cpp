/** generated by ParGen **/
#include "Lexer.hpp"


namespace WasmVM {

using namespace Tokens;

Lexer::Lexer(std::filesystem::path path, std::istream& stream) :
  stream(stream), state(16)
{
    current = fetch();
    pos.path = path;
}

Lexer::Chars::Chars(std::initializer_list<Chars::char_t> init) : min(init.begin()[0]){
    if(init.size() == 1){
        max = init.begin()[0];
    }else{
        max = init.begin()[1];
    }
}

bool Lexer::Chars::operator<(const Chars& rhs) const {
    return (min < rhs.min) && (max < rhs.min);
}

Lexer::Chars::char_t Lexer::fetch(){
    std::string line_end = "";
    Chars::char_t res = stream.get();
    if(res != std::istream::traits_type::eof()){
        line_end += res;
        text += res;
        if(line_end.size() > 2){
            line_end = line_end.substr(line_end.size() - 2);
        }
        if(text.ends_with("\n")){
            cur.line += 1;
            cur.column = 0;
        }else{
            cur.column += 1;
        }
    }
    return res;
}

std::vector<Lexer::State> Lexer::states = {
    {{{-1},1}, {{0},2}, {{40},3}, {{59},4}, }, // S0
    {}, // S1
    {}, // S2
    {{{59},5}, }, // S3
    {{{41},6}, }, // S4
    {}, // S5
    {}, // S6
    {{{-1},8}, {{0},9}, {{10},10}, }, // S7
    {}, // S8
    {}, // S9
    {}, // S10
    {{{-1},12}, {{0},13}, {{1,31},14}, {{34},15}, {{127},14}, }, // S11
    {}, // S12
    {}, // S13
    {}, // S14
    {}, // S15
    {{{-1},17}, {{9},18}, {{10},19}, {{13},20}, {{32},21}, {{34},22}, {{36},23}, {{40},24}, {{41},25}, {{43},26}, {{45},26}, {{48},27}, {{49,57},28}, {{59},29}, {{97},30}, {{98},31}, {{99},32}, {{100},33}, {{101},34}, {{102},35}, {{103},36}, {{105},37}, {{108},38}, {{109},39}, {{110},40}, {{111},41}, {{112},42}, {{114},43}, {{115},44}, {{116},45}, {{117},46}, }, // S16
    {}, // S17
    {}, // S18
    {}, // S19
    {}, // S20
    {}, // S21
    {}, // S22
    {{{33},47}, {{35,39},47}, {{42,43},47}, {{45,58},47}, {{60,90},47}, {{92},47}, {{94,122},47}, {{124},47}, {{126},47}, }, // S23
    {{{59},48}, }, // S24
    {}, // S25
    {{{48},27}, {{49,57},28}, {{105},49}, {{110},50}, }, // S26
    {{{46},51}, {{48,57},52}, {{69},53}, {{95},52}, {{101},53}, {{120},54}, }, // S27
    {{{46},51}, {{48,57},52}, {{69},53}, {{95},52}, {{101},53}, }, // S28
    {{{59},55}, }, // S29
    {{{108},56}, }, // S30
    {{{108},57}, {{114},58}, }, // S31
    {{{97},59}, }, // S32
    {{{97},60}, {{101},61}, {{114},62}, }, // S33
    {{{108},63}, {{110},64}, {{120},65}, }, // S34
    {{{51},66}, {{54},67}, {{117},68}, }, // S35
    {{{108},69}, }, // S36
    {{{51},70}, {{54},71}, {{102},72}, {{109},73}, {{110},74}, {{116},75}, }, // S37
    {{{111},76}, }, // S38
    {{{101},77}, {{111},78}, {{117},79}, }, // S39
    {{{97},80}, {{111},81}, }, // S40
    {{{102},82}, }, // S41
    {{{97},83}, }, // S42
    {{{101},84}, }, // S43
    {{{101},85}, {{116},86}, }, // S44
    {{{97},87}, {{104},88}, {{121},89}, }, // S45
    {{{110},90}, }, // S46
    {{{33},47}, {{35,39},47}, {{42,43},47}, {{45,58},47}, {{60,90},47}, {{92},47}, {{94,122},47}, {{124},47}, {{126},47}, }, // S47
    {}, // S48
    {{{110},74}, }, // S49
    {{{97},80}, }, // S50
    {{{48,57},91}, {{69},92}, {{95},93}, {{101},92}, }, // S51
    {{{46},51}, {{48,57},52}, {{69},53}, {{95},52}, {{101},53}, }, // S52
    {{{43},94}, {{45},94}, {{48,57},95}, }, // S53
    {{{48,57},96}, {{65,70},96}, {{97,102},96}, }, // S54
    {}, // S55
    {{{105},97}, }, // S56
    {{{111},98}, }, // S57
    {{{95},99}, }, // S58
    {{{108},100}, }, // S59
    {{{116},101}, }, // S60
    {{{99},102}, }, // S61
    {{{111},103}, }, // S62
    {{{101},104}, {{115},105}, }, // S63
    {{{100},106}, }, // S64
    {{{112},107}, {{116},108}, }, // S65
    {{{50},109}, }, // S66
    {{{52},110}, }, // S67
    {{{110},111}, }, // S68
    {{{111},112}, }, // S69
    {{{50},113}, }, // S70
    {{{52},114}, }, // S71
    {}, // S72
    {{{112},115}, }, // S73
    {{{102},116}, }, // S74
    {{{101},117}, }, // S75
    {{{99},118}, {{111},119}, }, // S76
    {{{109},120}, }, // S77
    {{{100},121}, }, // S78
    {{{116},122}, }, // S79
    {{{110},123}, }, // S80
    {{{112},124}, }, // S81
    {{{102},125}, }, // S82
    {{{114},126}, }, // S83
    {{{102},127}, {{115},128}, {{116},129}, }, // S84
    {{{108},130}, }, // S85
    {{{97},131}, }, // S86
    {{{98},132}, }, // S87
    {{{101},133}, }, // S88
    {{{112},134}, }, // S89
    {{{114},135}, }, // S90
    {{{48,57},93}, {{69},92}, {{95},93}, {{101},92}, }, // S91
    {{{43},136}, {{45},136}, {{48,57},137}, }, // S92
    {{{48,57},93}, {{69},92}, {{95},93}, {{101},92}, }, // S93
    {{{48,57},95}, }, // S94
    {{{48,57},138}, {{95},138}, }, // S95
    {{{46},139}, {{48,57},140}, {{65,70},140}, {{80},141}, {{95},140}, {{97,102},140}, {{112},141}, }, // S96
    {{{103},142}, }, // S97
    {{{99},143}, }, // S98
    {{{105},144}, {{116},145}, }, // S99
    {{{108},146}, }, // S100
    {{{97},147}, }, // S101
    {{{108},148}, }, // S102
    {{{112},149}, }, // S103
    {{{109},150}, }, // S104
    {{{101},151}, }, // S105
    {}, // S106
    {{{111},152}, }, // S107
    {{{101},153}, }, // S108
    {{{46},154}, }, // S109
    {{{46},155}, }, // S110
    {{{99},156}, }, // S111
    {{{98},157}, }, // S112
    {{{46},158}, }, // S113
    {{{46},159}, }, // S114
    {{{111},160}, }, // S115
    {}, // S116
    {{{109},161}, }, // S117
    {{{97},162}, }, // S118
    {{{112},163}, }, // S119
    {{{111},164}, }, // S120
    {{{117},165}, }, // S121
    {}, // S122
    {{{58},166}, }, // S123
    {}, // S124
    {{{115},167}, }, // S125
    {{{97},168}, }, // S126
    {{{46},169}, }, // S127
    {{{117},170}, }, // S128
    {{{117},171}, }, // S129
    {{{101},172}, }, // S130
    {{{114},173}, }, // S131
    {{{108},174}, }, // S132
    {{{110},175}, }, // S133
    {{{101},176}, }, // S134
    {{{101},177}, }, // S135
    {{{48,57},137}, }, // S136
    {{{48,57},178}, {{95},178}, }, // S137
    {{{48,57},138}, {{95},138}, }, // S138
    {{{48,57},179}, {{65,70},179}, {{80},180}, {{95},181}, {{97,102},179}, {{112},180}, }, // S139
    {{{46},139}, {{48,57},140}, {{65,70},140}, {{80},141}, {{95},140}, {{97,102},140}, {{112},141}, }, // S140
    {{{43},182}, {{45},182}, {{48,57},183}, }, // S141
    {{{110},184}, }, // S142
    {{{107},185}, }, // S143
    {{{102},186}, }, // S144
    {{{97},187}, }, // S145
    {{{95},188}, }, // S146
    {{{46},189}, }, // S147
    {{{97},190}, }, // S148
    {}, // S149
    {{{46},191}, }, // S150
    {}, // S151
    {{{114},192}, }, // S152
    {{{114},193}, }, // S153
    {{{97},194}, {{99},195}, {{100},196}, {{101},197}, {{102},198}, {{103},199}, {{108},200}, {{109},201}, {{110},202}, {{114},203}, {{115},204}, {{116},205}, }, // S154
    {{{97},206}, {{99},207}, {{100},208}, {{101},209}, {{102},210}, {{103},211}, {{108},212}, {{109},213}, {{110},214}, {{112},215}, {{114},216}, {{115},217}, {{116},218}, }, // S155
    {{{114},219}, }, // S156
    {{{97},220}, }, // S157
    {{{97},221}, {{99},222}, {{100},223}, {{101},224}, {{103},225}, {{108},226}, {{109},227}, {{110},228}, {{111},229}, {{112},230}, {{114},231}, {{115},232}, {{116},233}, {{119},234}, {{120},235}, }, // S158
    {{{97},236}, {{99},237}, {{100},238}, {{101},239}, {{103},240}, {{108},241}, {{109},242}, {{110},243}, {{111},244}, {{112},245}, {{114},246}, {{115},247}, {{116},248}, {{120},249}, }, // S159
    {{{114},250}, }, // S160
    {}, // S161
    {{{108},251}, }, // S162
    {}, // S163
    {{{114},252}, }, // S164
    {{{108},253}, }, // S165
    {{{48},254}, }, // S166
    {{{101},255}, }, // S167
    {{{109},256}, }, // S168
    {{{102},257}, {{105},258}, {{110},259}, }, // S169
    {{{108},260}, }, // S170
    {{{114},261}, }, // S171
    {{{99},262}, }, // S172
    {{{116},263}, }, // S173
    {{{101},264}, }, // S174
    {}, // S175
    {}, // S176
    {{{97},265}, }, // S177
    {{{48,57},178}, {{95},178}, }, // S178
    {{{48,57},181}, {{65,70},181}, {{80},180}, {{95},181}, {{97,102},181}, {{112},180}, }, // S179
    {{{43},266}, {{45},266}, {{48,57},267}, }, // S180
    {{{48,57},181}, {{65,70},181}, {{80},180}, {{95},181}, {{97,102},181}, {{112},180}, }, // S181
    {{{48,57},183}, }, // S182
    {{{48,57},268}, {{95},268}, }, // S183
    {{{61},269}, }, // S184
    {}, // S185
    {}, // S186
    {{{98},270}, }, // S187
    {{{105},271}, }, // S188
    {{{100},272}, }, // S189
    {{{114},273}, }, // S190
    {{{100},274}, }, // S191
    {{{116},275}, }, // S192
    {{{110},276}, }, // S193
    {{{98},277}, {{100},278}, }, // S194
    {{{101},279}, {{111},280}, }, // S195
    {{{101},281}, {{105},282}, }, // S196
    {{{113},283}, }, // S197
    {{{108},284}, }, // S198
    {{{101},285}, {{116},286}, }, // S199
    {{{101},287}, {{111},288}, {{116},289}, }, // S200
    {{{97},290}, {{105},291}, {{117},292}, }, // S201
    {{{101},293}, }, // S202
    {{{101},294}, }, // S203
    {{{113},295}, {{116},296}, {{117},297}, }, // S204
    {{{114},298}, }, // S205
    {{{98},299}, {{100},300}, }, // S206
    {{{101},301}, {{111},302}, }, // S207
    {{{105},303}, }, // S208
    {{{113},304}, }, // S209
    {{{108},305}, }, // S210
    {{{101},306}, {{116},307}, }, // S211
    {{{101},308}, {{111},309}, {{116},310}, }, // S212
    {{{97},311}, {{105},312}, {{117},313}, }, // S213
    {{{101},314}, }, // S214
    {{{114},315}, }, // S215
    {{{101},316}, }, // S216
    {{{113},317}, {{116},318}, {{117},319}, }, // S217
    {{{114},320}, }, // S218
    {{{101},321}, }, // S219
    {{{108},322}, }, // S220
    {{{100},323}, {{110},324}, }, // S221
    {{{108},325}, {{111},326}, {{116},327}, }, // S222
    {{{105},328}, }, // S223
    {{{113},329}, {{120},330}, }, // S224
    {{{101},331}, {{116},332}, }, // S225
    {{{101},333}, {{111},334}, {{116},335}, }, // S226
    {{{117},336}, }, // S227
    {{{101},337}, }, // S228
    {{{114},338}, }, // S229
    {{{111},339}, }, // S230
    {{{101},340}, {{111},341}, }, // S231
    {{{104},342}, {{116},343}, {{117},344}, }, // S232
    {{{114},345}, }, // S233
    {{{114},346}, }, // S234
    {{{111},347}, }, // S235
    {{{100},348}, {{110},349}, }, // S236
    {{{108},350}, {{111},351}, {{116},352}, }, // S237
    {{{105},353}, }, // S238
    {{{113},354}, {{120},355}, }, // S239
    {{{101},356}, {{116},357}, }, // S240
    {{{101},358}, {{111},359}, {{116},360}, }, // S241
    {{{117},361}, }, // S242
    {{{101},362}, }, // S243
    {{{114},363}, }, // S244
    {{{111},364}, }, // S245
    {{{101},365}, {{111},366}, }, // S246
    {{{104},367}, {{116},368}, {{117},369}, }, // S247
    {{{114},370}, }, // S248
    {{{111},371}, }, // S249
    {{{116},372}, }, // S250
    {{{46},373}, }, // S251
    {{{121},374}, }, // S252
    {{{101},375}, }, // S253
    {{{120},376}, }, // S254
    {{{116},377}, }, // S255
    {}, // S256
    {{{117},378}, }, // S257
    {{{115},379}, }, // S258
    {{{117},380}, }, // S259
    {{{116},381}, }, // S260
    {{{110},382}, }, // S261
    {{{116},383}, }, // S262
    {}, // S263
    {{{46},384}, }, // S264
    {{{99},385}, }, // S265
    {{{48,57},267}, }, // S266
    {{{48,57},386}, {{95},386}, }, // S267
    {{{48,57},268}, {{95},268}, }, // S268
    {{{48},387}, {{49,57},388}, }, // S269
    {{{108},389}, }, // S270
    {{{110},390}, }, // S271
    {{{114},391}, }, // S272
    {{{101},392}, }, // S273
    {{{114},393}, }, // S274
    {}, // S275
    {{{114},394}, }, // S276
    {{{115},395}, }, // S277
    {{{100},396}, }, // S278
    {{{105},397}, }, // S279
    {{{110},398}, {{112},399}, }, // S280
    {{{109},400}, }, // S281
    {{{118},401}, }, // S282
    {}, // S283
    {{{111},402}, }, // S284
    {}, // S285
    {}, // S286
    {}, // S287
    {{{97},403}, }, // S288
    {}, // S289
    {{{120},404}, }, // S290
    {{{110},405}, }, // S291
    {{{108},406}, }, // S292
    {{{97},407}, {{103},408}, }, // S293
    {{{105},409}, }, // S294
    {{{114},410}, }, // S295
    {{{111},411}, }, // S296
    {{{98},412}, }, // S297
    {{{117},413}, }, // S298
    {{{115},414}, }, // S299
    {{{100},415}, }, // S300
    {{{105},416}, }, // S301
    {{{110},417}, {{112},418}, }, // S302
    {{{118},419}, }, // S303
    {}, // S304
    {{{111},420}, }, // S305
    {}, // S306
    {}, // S307
    {}, // S308
    {{{97},421}, }, // S309
    {}, // S310
    {{{120},422}, }, // S311
    {{{110},423}, }, // S312
    {{{108},424}, }, // S313
    {{{97},425}, {{103},426}, }, // S314
    {{{111},427}, }, // S315
    {{{105},428}, }, // S316
    {{{114},429}, }, // S317
    {{{111},430}, }, // S318
    {{{98},431}, }, // S319
    {{{117},432}, }, // S320
    {{{102},433}, }, // S321
    {{{46},434}, }, // S322
    {{{100},435}, }, // S323
    {{{100},436}, }, // S324
    {{{122},437}, }, // S325
    {{{110},438}, }, // S326
    {{{122},439}, }, // S327
    {{{118},440}, }, // S328
    {{{122},441}, }, // S329
    {{{116},442}, }, // S330
    {{{95},443}, }, // S331
    {{{95},444}, }, // S332
    {{{95},445}, }, // S333
    {{{97},446}, }, // S334
    {{{95},447}, }, // S335
    {{{108},448}, }, // S336
    {}, // S337
    {}, // S338
    {{{112},449}, }, // S339
    {{{105},450}, {{109},451}, }, // S340
    {{{116},452}, }, // S341
    {{{108},453}, {{114},454}, }, // S342
    {{{111},455}, }, // S343
    {{{98},456}, }, // S344
    {{{117},457}, }, // S345
    {{{97},458}, }, // S346
    {{{114},459}, }, // S347
    {{{100},460}, }, // S348
    {{{100},461}, }, // S349
    {{{122},462}, }, // S350
    {{{110},463}, }, // S351
    {{{122},464}, }, // S352
    {{{118},465}, }, // S353
    {{{122},466}, }, // S354
    {{{116},467}, }, // S355
    {{{95},468}, }, // S356
    {{{95},469}, }, // S357
    {{{95},470}, }, // S358
    {{{97},471}, }, // S359
    {{{95},472}, }, // S360
    {{{108},473}, }, // S361
    {}, // S362
    {}, // S363
    {{{112},474}, }, // S364
    {{{105},475}, {{109},476}, }, // S365
    {{{116},477}, }, // S366
    {{{108},478}, {{114},479}, }, // S367
    {{{111},480}, }, // S368
    {{{98},481}, }, // S369
    {{{117},482}, }, // S370
    {{{114},483}, }, // S371
    {}, // S372
    {{{103},484}, {{115},485}, {{116},486}, }, // S373
    {{{46},487}, }, // S374
    {}, // S375
    {{{48,57},488}, {{65,70},488}, {{97,102},488}, }, // S376
    {{{61},489}, }, // S377
    {{{110},490}, }, // S378
    {{{95},491}, }, // S379
    {{{108},492}, }, // S380
    {}, // S381
    {}, // S382
    {}, // S383
    {{{99},493}, {{102},494}, {{103},495}, {{105},496}, {{115},497}, }, // S384
    {{{104},498}, }, // S385
    {{{48,57},386}, {{95},386}, }, // S386
    {{{48,57},499}, {{95},499}, {{120},500}, }, // S387
    {{{48,57},499}, {{95},499}, }, // S388
    {{{101},501}, }, // S389
    {{{100},502}, }, // S390
    {{{111},503}, }, // S391
    {}, // S392
    {{{111},504}, }, // S393
    {{{101},505}, }, // S394
    {}, // S395
    {}, // S396
    {{{108},506}, }, // S397
    {{{115},507}, {{118},508}, }, // S398
    {{{121},509}, }, // S399
    {{{111},510}, }, // S400
    {}, // S401
    {{{111},511}, }, // S402
    {{{100},512}, }, // S403
    {}, // S404
    {}, // S405
    {}, // S406
    {{{114},513}, }, // S407
    {}, // S408
    {{{110},514}, }, // S409
    {{{116},515}, }, // S410
    {{{114},516}, }, // S411
    {}, // S412
    {{{110},517}, }, // S413
    {}, // S414
    {}, // S415
    {{{108},518}, }, // S416
    {{{115},519}, {{118},520}, }, // S417
    {{{121},521}, }, // S418
    {}, // S419
    {{{111},522}, }, // S420
    {{{100},523}, }, // S421
    {}, // S422
    {}, // S423
    {}, // S424
    {{{114},524}, }, // S425
    {}, // S426
    {{{109},525}, }, // S427
    {{{110},526}, }, // S428
    {{{116},527}, }, // S429
    {{{114},528}, }, // S430
    {}, // S431
    {{{110},529}, }, // S432
    {}, // S433
    {{{103},530}, {{115},531}, }, // S434
    {}, // S435
    {}, // S436
    {}, // S437
    {{{115},532}, }, // S438
    {}, // S439
    {{{95},533}, }, // S440
    {}, // S441
    {{{101},534}, }, // S442
    {{{115},535}, {{117},536}, }, // S443
    {{{115},537}, {{117},538}, }, // S444
    {{{115},539}, {{117},540}, }, // S445
    {{{100},541}, }, // S446
    {{{115},542}, {{117},543}, }, // S447
    {}, // S448
    {{{99},544}, }, // S449
    {{{110},545}, }, // S450
    {{{95},546}, }, // S451
    {{{108},547}, {{114},548}, }, // S452
    {}, // S453
    {{{95},549}, }, // S454
    {{{114},550}, }, // S455
    {}, // S456
    {{{110},551}, }, // S457
    {{{112},552}, }, // S458
    {}, // S459
    {}, // S460
    {}, // S461
    {}, // S462
    {{{115},553}, }, // S463
    {}, // S464
    {{{95},554}, }, // S465
    {}, // S466
    {{{101},555}, }, // S467
    {{{115},556}, {{117},557}, }, // S468
    {{{115},558}, {{117},559}, }, // S469
    {{{115},560}, {{117},561}, }, // S470
    {{{100},562}, }, // S471
    {{{115},563}, {{117},564}, }, // S472
    {}, // S473
    {{{99},565}, }, // S474
    {{{110},566}, }, // S475
    {{{95},567}, }, // S476
    {{{108},568}, {{114},569}, }, // S477
    {}, // S478
    {{{95},570}, }, // S479
    {{{114},571}, }, // S480
    {}, // S481
    {{{110},572}, }, // S482
    {}, // S483
    {{{101},573}, }, // S484
    {{{101},574}, }, // S485
    {{{101},575}, }, // S486
    {{{99},576}, {{102},577}, {{103},578}, {{105},579}, {{115},580}, }, // S487
    {{{48,57},581}, {{65,70},581}, {{95},581}, {{97,102},581}, }, // S488
    {{{48},582}, {{49,57},583}, }, // S489
    {{{99},584}, }, // S490
    {{{110},585}, }, // S491
    {{{108},586}, }, // S492
    {{{111},587}, }, // S493
    {{{105},588}, }, // S494
    {{{101},589}, {{114},590}, }, // S495
    {{{110},591}, }, // S496
    {{{101},592}, {{105},593}, }, // S497
    {{{97},594}, }, // S498
    {{{48,57},499}, {{95},499}, }, // S499
    {{{48,57},595}, {{65,70},595}, {{97,102},595}, }, // S500
    {}, // S501
    {{{105},596}, }, // S502
    {{{112},597}, }, // S503
    {{{112},598}, }, // S504
    {{{102},599}, }, // S505
    {}, // S506
    {{{116},600}, }, // S507
    {{{101},601}, }, // S508
    {{{115},602}, }, // S509
    {{{116},603}, }, // S510
    {{{114},604}, }, // S511
    {}, // S512
    {{{101},605}, }, // S513
    {{{116},606}, }, // S514
    {}, // S515
    {{{101},607}, }, // S516
    {{{99},608}, }, // S517
    {}, // S518
    {{{116},609}, }, // S519
    {{{101},610}, }, // S520
    {{{115},611}, }, // S521
    {{{114},612}, }, // S522
    {}, // S523
    {{{101},613}, }, // S524
    {{{111},614}, }, // S525
    {{{116},615}, }, // S526
    {}, // S527
    {{{101},616}, }, // S528
    {{{99},617}, }, // S529
    {{{101},618}, }, // S530
    {{{101},619}, }, // S531
    {{{116},620}, }, // S532
    {{{115},621}, {{117},622}, }, // S533
    {{{110},623}, }, // S534
    {}, // S535
    {}, // S536
    {}, // S537
    {}, // S538
    {}, // S539
    {}, // S540
    {{{49},624}, {{56},625}, }, // S541
    {}, // S542
    {}, // S543
    {{{110},626}, }, // S544
    {{{116},627}, }, // S545
    {{{115},628}, {{117},629}, }, // S546
    {}, // S547
    {}, // S548
    {{{115},630}, {{117},631}, }, // S549
    {{{101},632}, }, // S550
    {{{99},633}, }, // S551
    {{{95},634}, }, // S552
    {{{116},635}, }, // S553
    {{{115},636}, {{117},637}, }, // S554
    {{{110},638}, }, // S555
    {}, // S556
    {}, // S557
    {}, // S558
    {}, // S559
    {}, // S560
    {}, // S561
    {{{49},639}, {{51},640}, {{56},641}, }, // S562
    {}, // S563
    {}, // S564
    {{{110},642}, }, // S565
    {{{116},643}, }, // S566
    {{{115},644}, {{117},645}, }, // S567
    {}, // S568
    {}, // S569
    {{{115},646}, {{117},647}, }, // S570
    {{{101},648}, }, // S571
    {{{99},649}, }, // S572
    {{{116},650}, }, // S573
    {{{116},651}, }, // S574
    {{{101},652}, }, // S575
    {{{111},653}, }, // S576
    {{{105},654}, }, // S577
    {{{114},655}, }, // S578
    {{{110},656}, }, // S579
    {{{105},657}, }, // S580
    {{{48,57},581}, {{65,70},581}, {{95},581}, {{97,102},581}, }, // S581
    {{{48,57},658}, {{95},658}, {{120},659}, }, // S582
    {{{48,57},658}, {{95},658}, }, // S583
    {}, // S584
    {{{117},660}, }, // S585
    {}, // S586
    {{{112},661}, }, // S587
    {{{108},662}, }, // S588
    {{{116},663}, }, // S589
    {{{111},664}, }, // S590
    {{{105},665}, }, // S591
    {{{116},666}, }, // S592
    {{{122},667}, }, // S593
    {{{98},668}, }, // S594
    {{{48,57},669}, {{65,70},669}, {{95},669}, {{97,102},669}, }, // S595
    {{{114},670}, }, // S596
    {}, // S597
    {}, // S598
    {}, // S599
    {}, // S600
    {{{114},671}, }, // S601
    {{{105},672}, }, // S602
    {{{101},673}, }, // S603
    {}, // S604
    {{{115},674}, }, // S605
    {{{101},675}, }, // S606
    {}, // S607
    {}, // S608
    {}, // S609
    {{{114},676}, }, // S610
    {{{105},677}, }, // S611
    {}, // S612
    {{{115},678}, }, // S613
    {{{116},679}, }, // S614
    {{{101},680}, }, // S615
    {}, // S616
    {}, // S617
    {{{116},681}, }, // S618
    {{{116},682}, }, // S619
    {}, // S620
    {}, // S621
    {}, // S622
    {{{100},683}, }, // S623
    {{{54},684}, }, // S624
    {{{95},685}, }, // S625
    {{{116},686}, }, // S626
    {{{101},687}, }, // S627
    {}, // S628
    {}, // S629
    {}, // S630
    {}, // S631
    {{{49},688}, {{56},689}, }, // S632
    {{{95},690}, }, // S633
    {{{105},691}, }, // S634
    {}, // S635
    {}, // S636
    {}, // S637
    {{{100},692}, }, // S638
    {{{54},693}, }, // S639
    {{{50},694}, }, // S640
    {{{95},695}, }, // S641
    {{{116},696}, }, // S642
    {{{101},697}, }, // S643
    {}, // S644
    {}, // S645
    {}, // S646
    {}, // S647
    {{{49},698}, {{51},699}, {{56},700}, }, // S648
    {{{95},701}, }, // S649
    {}, // S650
    {}, // S651
    {}, // S652
    {{{112},702}, }, // S653
    {{{108},703}, }, // S654
    {{{111},704}, }, // S655
    {{{105},705}, }, // S656
    {{{122},706}, }, // S657
    {{{48,57},658}, {{95},658}, }, // S658
    {{{48,57},707}, {{65,70},707}, {{97,102},707}, }, // S659
    {{{108},708}, }, // S660
    {{{121},709}, }, // S661
    {{{108},710}, }, // S662
    {}, // S663
    {{{119},711}, }, // S664
    {{{116},712}, }, // S665
    {}, // S666
    {{{101},713}, }, // S667
    {{{108},714}, }, // S668
    {{{48,57},669}, {{65,70},669}, {{95},669}, {{97,102},669}, }, // S669
    {{{101},715}, }, // S670
    {{{116},716}, }, // S671
    {{{103},717}, }, // S672
    {{{95},718}, }, // S673
    {{{116},719}, }, // S674
    {{{114},720}, }, // S675
    {{{116},721}, }, // S676
    {{{103},722}, }, // S677
    {{{116},723}, }, // S678
    {{{101},724}, }, // S679
    {{{114},725}, }, // S680
    {}, // S681
    {}, // S682
    {{{49},726}, {{56},727}, }, // S683
    {{{95},728}, }, // S684
    {{{115},729}, {{117},730}, }, // S685
    {}, // S686
    {{{114},731}, }, // S687
    {{{54},732}, }, // S688
    {}, // S689
    {{{115},733}, {{117},734}, }, // S690
    {{{54},735}, }, // S691
    {{{49},736}, {{51},737}, {{56},738}, {{95},739}, }, // S692
    {{{95},740}, }, // S693
    {{{95},741}, }, // S694
    {{{115},742}, {{117},743}, }, // S695
    {}, // S696
    {{{114},744}, }, // S697
    {{{54},745}, }, // S698
    {{{50},746}, }, // S699
    {}, // S700
    {{{115},747}, {{117},748}, }, // S701
    {{{121},749}, }, // S702
    {{{108},750}, }, // S703
    {{{119},751}, }, // S704
    {{{116},752}, }, // S705
    {{{101},753}, }, // S706
    {{{48,57},754}, {{65,70},754}, {{95},754}, {{97,102},754}, }, // S707
    {{{108},755}, }, // S708
    {}, // S709
    {}, // S710
    {}, // S711
    {}, // S712
    {}, // S713
    {{{101},756}, }, // S714
    {{{99},757}, }, // S715
    {{{95},758}, }, // S716
    {{{110},759}, }, // S717
    {{{102},760}, }, // S718
    {}, // S719
    {{{112},761}, }, // S720
    {{{95},762}, }, // S721
    {{{110},763}, }, // S722
    {}, // S723
    {{{95},764}, }, // S724
    {{{112},765}, }, // S725
    {{{54},766}, }, // S726
    {{{95},767}, }, // S727
    {{{115},768}, {{117},769}, }, // S728
    {}, // S729
    {}, // S730
    {{{112},770}, }, // S731
    {}, // S732
    {{{95},771}, {{97},772}, }, // S733
    {{{95},773}, }, // S734
    {{{52},774}, }, // S735
    {{{54},775}, }, // S736
    {{{50},776}, }, // S737
    {{{95},777}, }, // S738
    {{{115},778}, {{117},779}, }, // S739
    {{{115},780}, {{117},781}, }, // S740
    {{{115},782}, {{117},783}, }, // S741
    {}, // S742
    {}, // S743
    {{{112},784}, }, // S744
    {}, // S745
    {}, // S746
    {{{95},785}, {{97},786}, }, // S747
    {{{95},787}, }, // S748
    {}, // S749
    {}, // S750
    {}, // S751
    {}, // S752
    {}, // S753
    {{{48,57},754}, {{65,70},754}, {{95},754}, {{97,102},754}, }, // S754
    {}, // S755
    {}, // S756
    {{{116},788}, }, // S757
    {{{115},789}, {{117},790}, }, // S758
    {}, // S759
    {{{54},791}, }, // S760
    {{{114},792}, }, // S761
    {{{115},793}, {{117},794}, }, // S762
    {}, // S763
    {{{102},795}, }, // S764
    {{{114},796}, }, // S765
    {{{95},797}, }, // S766
    {{{115},798}, }, // S767
    {}, // S768
    {}, // S769
    {{{114},799}, }, // S770
    {{{102},800}, }, // S771
    {{{116},801}, }, // S772
    {{{102},802}, }, // S773
    {}, // S774
    {{{95},803}, }, // S775
    {{{95},804}, }, // S776
    {{{115},805}, }, // S777
    {{{95},806}, }, // S778
    {{{95},807}, }, // S779
    {}, // S780
    {}, // S781
    {}, // S782
    {}, // S783
    {{{114},808}, }, // S784
    {{{102},809}, }, // S785
    {{{116},810}, }, // S786
    {{{102},811}, }, // S787
    {}, // S788
    {{{95},812}, }, // S789
    {{{95},813}, }, // S790
    {{{52},814}, }, // S791
    {{{101},815}, }, // S792
    {{{95},816}, }, // S793
    {{{95},817}, }, // S794
    {{{51},818}, }, // S795
    {{{101},819}, }, // S796
    {{{115},820}, }, // S797
    {}, // S798
    {{{101},821}, }, // S799
    {{{51},822}, {{54},823}, }, // S800
    {{{95},824}, }, // S801
    {{{51},825}, {{54},826}, }, // S802
    {{{115},827}, }, // S803
    {{{115},828}, }, // S804
    {}, // S805
    {{{105},829}, }, // S806
    {{{105},830}, }, // S807
    {{{101},831}, }, // S808
    {{{51},832}, {{54},833}, }, // S809
    {{{95},834}, }, // S810
    {{{51},835}, {{54},836}, }, // S811
    {{{105},837}, }, // S812
    {{{105},838}, }, // S813
    {}, // S814
    {{{116},839}, }, // S815
    {{{105},840}, }, // S816
    {{{105},841}, }, // S817
    {{{50},842}, }, // S818
    {{{116},843}, }, // S819
    {}, // S820
    {{{116},844}, }, // S821
    {{{50},845}, }, // S822
    {{{52},846}, }, // S823
    {{{102},847}, }, // S824
    {{{50},848}, }, // S825
    {{{52},849}, }, // S826
    {}, // S827
    {}, // S828
    {{{51},850}, }, // S829
    {{{51},851}, }, // S830
    {{{116},852}, }, // S831
    {{{50},853}, }, // S832
    {{{52},854}, }, // S833
    {{{102},855}, }, // S834
    {{{50},856}, }, // S835
    {{{52},857}, }, // S836
    {{{51},858}, {{54},859}, }, // S837
    {{{51},860}, {{54},861}, }, // S838
    {{{95},862}, }, // S839
    {{{51},863}, {{54},864}, }, // S840
    {{{51},865}, {{54},866}, }, // S841
    {}, // S842
    {{{95},867}, }, // S843
    {{{95},868}, }, // S844
    {}, // S845
    {}, // S846
    {{{51},869}, {{54},870}, }, // S847
    {}, // S848
    {}, // S849
    {{{50},871}, }, // S850
    {{{50},872}, }, // S851
    {{{95},873}, }, // S852
    {}, // S853
    {}, // S854
    {{{51},874}, {{54},875}, }, // S855
    {}, // S856
    {}, // S857
    {{{50},876}, }, // S858
    {{{52},877}, }, // S859
    {{{50},878}, }, // S860
    {{{52},879}, }, // S861
    {{{105},880}, }, // S862
    {{{50},881}, }, // S863
    {{{52},882}, }, // S864
    {{{50},883}, }, // S865
    {{{52},884}, }, // S866
    {{{105},885}, }, // S867
    {{{102},886}, }, // S868
    {{{50},887}, }, // S869
    {{{52},888}, }, // S870
    {}, // S871
    {}, // S872
    {{{102},889}, }, // S873
    {{{50},890}, }, // S874
    {{{52},891}, }, // S875
    {}, // S876
    {}, // S877
    {}, // S878
    {}, // S879
    {{{51},892}, }, // S880
    {}, // S881
    {}, // S882
    {}, // S883
    {}, // S884
    {{{54},893}, }, // S885
    {{{51},894}, }, // S886
    {{{95},895}, }, // S887
    {{{95},896}, }, // S888
    {{{54},897}, }, // S889
    {{{95},898}, }, // S890
    {{{95},899}, }, // S891
    {{{50},900}, }, // S892
    {{{52},901}, }, // S893
    {{{50},902}, }, // S894
    {{{115},903}, {{117},904}, }, // S895
    {{{115},905}, {{117},906}, }, // S896
    {{{52},907}, }, // S897
    {{{115},908}, {{117},909}, }, // S898
    {{{115},910}, {{117},911}, }, // S899
    {}, // S900
    {}, // S901
    {}, // S902
    {}, // S903
    {}, // S904
    {}, // S905
    {}, // S906
    {}, // S907
    {}, // S908
    {}, // S909
    {}, // S910
    {}, // S911
};

Token Lexer::get(){
    if(current == std::istream::traits_type::eof()){
        return Token(std::monostate(), pos);
    }
    while(true){
        if(states[state].contains(current)){
            state = states[state][current];
            current = fetch();
        }else if(states[state].contains('\0')){
            state = states[state]['\0'];
            current = fetch();
        }else{
            Position _pos = pos;
            pos = cur;
            std::string _text = text;
            if(current != std::istream::traits_type::eof()){
                _text.pop_back();
            }
            switch(state){
                // Action 0
                case 48:
                    stack.emplace_back(16, text);
                    state = 0;
                    text = current;
                break;
                // Action 1
                case 5:
                    stack.emplace_back(0, text);
                    state = 0;
                    text = current;
                break;
                // Action 2
                case 6:
                    state = stack.back().first;
                    text = current;
                    stack.pop_back();
                break;
                // Action 3
                case 3:
                    state = 0;
                    text = current;
                break;
                // Action 4
                case 4:
                    state = 0;
                    text = current;
                break;
                // Action 5
                case 2:
                    state = 0;
                    text = current;
                break;
                // Action 6
                case 1:
                    state = 0;
                    text = current;
                {
                    throw Exception::Parse("block comment not close", {_pos.line, _pos.column});
                }break;
                // Action 7
                case 55:
                    stack.emplace_back(16, text);
                    state = 7;
                    text = current;
                break;
                // Action 8
                case 8:
                case 10:
                    state = stack.back().first;
                    text = current;
                    stack.pop_back();
                break;
                // Action 9
                case 9:
                    state = 7;
                    text = current;
                break;
                // Action 10
                case 18:
                case 19:
                case 20:
                case 21:
                    state = 16;
                    text = current;
                break;
                // Action 11
                case 24:
                    state = 16;
                    text = current;
                {
                    return Token(ParenL(), _pos);
                }break;
                // Action 12
                case 25:
                    state = 16;
                    text = current;
                {
                    return Token(ParenR(), _pos);
                }break;
                // Action 13
                case 47:
                    state = 16;
                    text = current;
                {
                    return Token(Id(_text.substr(1)), _pos);
                }break;
                // Action 14
                case 22:
                    stack.emplace_back(16, text);
                    state = 11;
                    text = current;
                break;
                // Action 15
                case 14:
                    state = 11;
                    text = current;
                {
                    throw Exception::Parse("invalid character in string", {_pos.line, _pos.column});
                }break;
                // Action 16
                case 12:
                    state = 11;
                    text = current;
                {
                    throw Exception::Parse("string not close", {_pos.line, _pos.column});
                }break;
                // Action 17
                case 13:
                    state = 11;
                break;
                // Action 18
                case 15:
                    state = stack.back().first;
                    text = current;
                    stack.pop_back();
                {
                    return Token(String(_text.substr(0, _text.size() - 1)), _pos);
                }break;
                // Action 19
                case 27:
                case 28:
                case 52:
                    state = 16;
                    text = current;
                {
                    // Check underscore
                    if(_text.ends_with('_') || (_text.find("__") != std::string::npos)){
                        throw Exception::Parse("integer can't have consecutive '_' or ends with '_'", {_pos.line, _pos.column});
                    }
                    _text.erase(std::remove(_text.begin(), _text.end(), '_'), _text.end());
                    return Token(Integer(_text), _pos);
                }break;
                // Action 20
                case 96:
                case 140:
                    state = 16;
                    text = current;
                {
                    // Check underscore
                    if(_text.ends_with('_') || (_text.find("__") != std::string::npos)){
                        throw Exception::Parse("integer can't have consecutive '_' or ends with '_'", {_pos.line, _pos.column});
                    }
                    _text.erase(std::remove(_text.begin(), _text.end(), '_'), _text.end());
                    return Token(Integer(_text), _pos);
                }break;
                // Action 21
                case 116:
                case 123:
                case 488:
                case 581:
                    state = 16;
                    text = current;
                {
                    // Check underscore
                    if(_text.ends_with('_') || (_text.find("__") != std::string::npos)){
                        throw Exception::Parse("floating number can't have consecutive '_' or ends with '_'", {_pos.line, _pos.column});
                    }
                    _text.erase(std::remove(_text.begin(), _text.end(), '_'), _text.end());
                    return Token(Float(_text), _pos);
                }break;
                // Action 22
                case 51:
                case 91:
                case 93:
                case 95:
                case 137:
                case 138:
                case 178:
                    state = 16;
                    text = current;
                {
                    // Check underscore
                    if(_text.ends_with('_') || (_text.find("__") != std::string::npos)){
                        throw Exception::Parse("floating number can't have consecutive '_' or ends with '_'", {_pos.line, _pos.column});
                    }
                    _text.erase(std::remove(_text.begin(), _text.end(), '_'), _text.end());
                    return Token(Float(_text), _pos);
                }break;
                // Action 23
                case 139:
                case 179:
                case 181:
                case 183:
                case 267:
                case 268:
                case 386:
                    state = 16;
                    text = current;
                {
                    // Check underscore
                    if(_text.ends_with('_') || (_text.find("__") != std::string::npos)){
                        throw Exception::Parse("floating number can't have consecutive '_' or ends with '_'", {_pos.line, _pos.column});
                    }
                    _text.erase(std::remove(_text.begin(), _text.end(), '_'), _text.end());
                    return Token(Float(_text), _pos);
                }break;
                // Action 24
                case 582:
                case 583:
                case 658:
                    state = 16;
                    text = current;
                {
                    // Check underscore
                    if(_text.ends_with('_') || (_text.find("__") != std::string::npos)){
                        throw Exception::Parse("offset can't have consecutive '_' or ends with '_'", {_pos.line, _pos.column});
                    }
                    _text.erase(std::remove(_text.begin(), _text.end(), '_'), _text.end());
                    return Token(MemOffset(std::stoll(_text.substr(7))), _pos);
                }break;
                // Action 25
                case 707:
                case 754:
                    state = 16;
                    text = current;
                {
                    // Check underscore
                    if(_text.ends_with('_') || (_text.find("__") != std::string::npos)){
                        throw Exception::Parse("offset can't have consecutive '_' or ends with '_'", {_pos.line, _pos.column});
                    }
                    _text.erase(std::remove(_text.begin(), _text.end(), '_'), _text.end());
                    return Token(MemOffset(std::stoll(_text.substr(7), nullptr, 16)), _pos);
                }break;
                // Action 26
                case 387:
                case 388:
                case 499:
                    state = 16;
                    text = current;
                {
                    // Check underscore
                    if(_text.ends_with('_') || (_text.find("__") != std::string::npos)){
                        throw Exception::Parse("align can't have consecutive '_' or ends with '_'", {_pos.line, _pos.column});
                    }
                    _text.erase(std::remove(_text.begin(), _text.end(), '_'), _text.end());
                    return Token(MemAlign(std::stoll(_text.substr(6))), _pos);
                }break;
                // Action 27
                case 595:
                case 669:
                    state = 16;
                    text = current;
                {
                    // Check underscore
                    if(_text.ends_with('_') || (_text.find("__") != std::string::npos)){
                        throw Exception::Parse("align can't have consecutive '_' or ends with '_'", {_pos.line, _pos.column});
                    }
                    _text.erase(std::remove(_text.begin(), _text.end(), '_'), _text.end());
                    return Token(MemAlign(std::stoll(_text.substr(6), nullptr, 16)), _pos);
                }break;
                // Action 28
                case 375:
                    state = 16;
                    text = current;
                {
                    return Token(Module(), _pos);
                }break;
                // Action 29
                case 176:
                    state = 16;
                    text = current;
                {
                    return Token(Type(), _pos);
                }break;
                // Action 30
                case 372:
                    state = 16;
                    text = current;
                {
                    return Token(Import(), _pos);
                }break;
                // Action 31
                case 275:
                    state = 16;
                    text = current;
                {
                    return Token(Export(), _pos);
                }break;
                // Action 32
                case 256:
                    state = 16;
                    text = current;
                {
                    return Token(Param(), _pos);
                }break;
                // Action 33
                case 381:
                    state = 16;
                    text = current;
                {
                    return Token(Result(), _pos);
                }break;
                // Action 34
                case 433:
                    state = 16;
                    text = current;
                {
                    return Token(Funcref(), _pos);
                }break;
                // Action 35
                case 276:
                    state = 16;
                    text = current;
                {
                    return Token(Extern(), _pos);
                }break;
                // Action 36
                case 599:
                    state = 16;
                    text = current;
                {
                    return Token(Externref(), _pos);
                }break;
                // Action 37
                case 109:
                case 110:
                case 113:
                case 114:
                    state = 16;
                    text = current;
                {
                    return Token(NumType(_text), _pos);
                }break;
                // Action 38
                case 156:
                    state = 16;
                    text = current;
                {
                    return Token(Func(), _pos);
                }break;
                // Action 39
                case 264:
                    state = 16;
                    text = current;
                {
                    return Token(Table(), _pos);
                }break;
                // Action 40
                case 374:
                    state = 16;
                    text = current;
                {
                    return Token(Memory(), _pos);
                }break;
                // Action 41
                case 322:
                    state = 16;
                    text = current;
                {
                    return Token(Global(), _pos);
                }break;
                // Action 42
                case 122:
                    state = 16;
                    text = current;
                {
                    return Token(Mut(), _pos);
                }break;
                // Action 43
                case 251:
                    state = 16;
                    text = current;
                {
                    return Token(Local(), _pos);
                }break;
                // Action 44
                case 150:
                    state = 16;
                    text = current;
                {
                    return Token(Elem(), _pos);
                }break;
                // Action 45
                case 161:
                    state = 16;
                    text = current;
                {
                    return Token(Item(), _pos);
                }break;
                // Action 46
                case 392:
                    state = 16;
                    text = current;
                {
                    return Token(Declare(), _pos);
                }break;
                // Action 47
                case 377:
                    state = 16;
                    text = current;
                {
                    return Token(Offset(), _pos);
                }break;
                // Action 48
                case 147:
                    state = 16;
                    text = current;
                {
                    return Token(Data(), _pos);
                }break;
                // Action 49
                case 263:
                    state = 16;
                    text = current;
                {
                    return Token(Start(), _pos);
                }break;
                // Action 50
                case 175:
                    state = 16;
                    text = current;
                {
                    return Token(Then(), _pos);
                }break;
                // Action 51
                case 756:
                    state = 16;
                    text = current;
                {
                    return Token(ControlInstr(ControlInstr::Unreachable), _pos);
                }break;
                // Action 52
                case 185:
                    state = 16;
                    text = current;
                {
                    return Token(Block(), _pos);
                }break;
                // Action 53
                case 124:
                    state = 16;
                    text = current;
                {
                    return Token(ControlInstr(ControlInstr::Nop), _pos);
                }break;
                // Action 54
                case 106:
                    state = 16;
                    text = current;
                {
                    return Token(End(), _pos);
                }break;
                // Action 55
                case 163:
                    state = 16;
                    text = current;
                {
                    return Token(Loop(), _pos);
                }break;
                // Action 56
                case 72:
                    state = 16;
                    text = current;
                {
                    return Token(If(), _pos);
                }break;
                // Action 57
                case 151:
                    state = 16;
                    text = current;
                {
                    return Token(Else(), _pos);
                }break;
                // Action 58
                case 58:
                    state = 16;
                    text = current;
                {
                    return Token(Br(), _pos);
                }break;
                // Action 59
                case 186:
                    state = 16;
                    text = current;
                {
                    return Token(Br_if(), _pos);
                }break;
                // Action 60
                case 501:
                    state = 16;
                    text = current;
                {
                    return Token(Br_table(), _pos);
                }break;
                // Action 61
                case 382:
                    state = 16;
                    text = current;
                {
                    return Token(ControlInstr(ControlInstr::Return), _pos);
                }break;
                // Action 62
                case 146:
                    state = 16;
                    text = current;
                {
                    return Token(Call(), _pos);
                }break;
                // Action 63
                case 788:
                    state = 16;
                    text = current;
                {
                    return Token(Call_indirect(), _pos);
                }break;
                // Action 64
                case 586:
                    state = 16;
                    text = current;
                {
                    return Token(Ref_null(), _pos);
                }break;
                // Action 65
                case 755:
                    state = 16;
                    text = current;
                {
                    return Token(Ref_is_null(), _pos);
                }break;
                // Action 66
                case 584:
                    state = 16;
                    text = current;
                {
                    return Token(Ref_func(), _pos);
                }break;
                // Action 67
                case 149:
                    state = 16;
                    text = current;
                {
                    return Token(Drop(), _pos);
                }break;
                // Action 68
                case 383:
                    state = 16;
                    text = current;
                {
                    return Token(Select(), _pos);
                }break;
                // Action 69
                case 650:
                    state = 16;
                    text = current;
                {
                    return Token(VariableInstr(VariableInstr::LocalGet), _pos);
                }break;
                // Action 70
                case 651:
                    state = 16;
                    text = current;
                {
                    return Token(VariableInstr(VariableInstr::LocalSet), _pos);
                }break;
                // Action 71
                case 652:
                    state = 16;
                    text = current;
                {
                    return Token(VariableInstr(VariableInstr::LocalTee), _pos);
                }break;
                // Action 72
                case 681:
                    state = 16;
                    text = current;
                {
                    return Token(VariableInstr(VariableInstr::GlobalGet), _pos);
                }break;
                // Action 73
                case 682:
                    state = 16;
                    text = current;
                {
                    return Token(VariableInstr(VariableInstr::GlobalSet), _pos);
                }break;
                // Action 74
                case 663:
                    state = 16;
                    text = current;
                {
                    return Token(TableInstr(TableInstr::TableGet), _pos);
                }break;
                // Action 75
                case 666:
                    state = 16;
                    text = current;
                {
                    return Token(TableInstr(TableInstr::TableSet), _pos);
                }break;
                // Action 76
                case 713:
                    state = 16;
                    text = current;
                {
                    return Token(TableInstr(TableInstr::TableSize), _pos);
                }break;
                // Action 77
                case 711:
                    state = 16;
                    text = current;
                {
                    return Token(TableInstr(TableInstr::TableGrow), _pos);
                }break;
                // Action 78
                case 710:
                    state = 16;
                    text = current;
                {
                    return Token(TableInstr(TableInstr::TableFill), _pos);
                }break;
                // Action 79
                case 709:
                    state = 16;
                    text = current;
                {
                    return Token(Table_copy(), _pos);
                }break;
                // Action 80
                case 712:
                    state = 16;
                    text = current;
                {
                    return Token(Table_init(), _pos);
                }break;
                // Action 81
                case 598:
                    state = 16;
                    text = current;
                {
                    return Token(Elem_drop(), _pos);
                }break;
                // Action 82
                case 753:
                    state = 16;
                    text = current;
                {
                    return Token(Memory_size(), _pos);
                }break;
                // Action 83
                case 751:
                    state = 16;
                    text = current;
                {
                    return Token(Memory_grow(), _pos);
                }break;
                // Action 84
                case 750:
                    state = 16;
                    text = current;
                {
                    return Token(Memory_fill(), _pos);
                }break;
                // Action 85
                case 752:
                    state = 16;
                    text = current;
                {
                    return Token(Memory_init(), _pos);
                }break;
                // Action 86
                case 749:
                    state = 16;
                    text = current;
                {
                    return Token(Memory_copy(), _pos);
                }break;
                // Action 87
                case 597:
                    state = 16;
                    text = current;
                {
                    return Token(Data_drop(), _pos);
                }break;
                // Action 88
                case 541:
                    state = 16;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I32Load), _pos);
                }break;
                // Action 89
                case 562:
                    state = 16;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I64Load), _pos);
                }break;
                // Action 90
                case 512:
                    state = 16;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::F32Load), _pos);
                }break;
                // Action 91
                case 523:
                    state = 16;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::F64Load), _pos);
                }break;
                // Action 92
                case 729:
                    state = 16;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I32Load8_s), _pos);
                }break;
                // Action 93
                case 730:
                    state = 16;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I32Load8_u), _pos);
                }break;
                // Action 94
                case 768:
                    state = 16;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I32Load16_s), _pos);
                }break;
                // Action 95
                case 769:
                    state = 16;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I32Load16_u), _pos);
                }break;
                // Action 96
                case 742:
                    state = 16;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I64Load8_s), _pos);
                }break;
                // Action 97
                case 743:
                    state = 16;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I64Load8_u), _pos);
                }break;
                // Action 98
                case 780:
                    state = 16;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I64Load16_s), _pos);
                }break;
                // Action 99
                case 781:
                    state = 16;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I64Load16_u), _pos);
                }break;
                // Action 100
                case 782:
                    state = 16;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I64Load32_s), _pos);
                }break;
                // Action 101
                case 783:
                    state = 16;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I64Load32_u), _pos);
                }break;
                // Action 102
                case 632:
                    state = 16;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I32Store), _pos);
                }break;
                // Action 103
                case 648:
                    state = 16;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I64Store), _pos);
                }break;
                // Action 104
                case 607:
                    state = 16;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::F32Store), _pos);
                }break;
                // Action 105
                case 616:
                    state = 16;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::F64Store), _pos);
                }break;
                // Action 106
                case 689:
                    state = 16;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I32Store8), _pos);
                }break;
                // Action 107
                case 732:
                    state = 16;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I32Store16), _pos);
                }break;
                // Action 108
                case 700:
                    state = 16;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I64Store8), _pos);
                }break;
                // Action 109
                case 745:
                    state = 16;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I64Store16), _pos);
                }break;
                // Action 110
                case 746:
                    state = 16;
                    text = current;
                {
                    return Token(MemoryInstr(MemoryInstr::I64Store32), _pos);
                }break;
                // Action 111
                case 620:
                    state = 16;
                    text = current;
                {
                    return Token(I32_const(), _pos);
                }break;
                // Action 112
                case 635:
                    state = 16;
                    text = current;
                {
                    return Token(I64_const(), _pos);
                }break;
                // Action 113
                case 600:
                    state = 16;
                    text = current;
                {
                    return Token(F32_const(), _pos);
                }break;
                // Action 114
                case 609:
                    state = 16;
                    text = current;
                {
                    return Token(F64_const(), _pos);
                }break;
                // Action 115
                case 441:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Eqz), _pos);
                }break;
                // Action 116
                case 329:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Eq), _pos);
                }break;
                // Action 117
                case 337:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Ne), _pos);
                }break;
                // Action 118
                case 542:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Lt_s), _pos);
                }break;
                // Action 119
                case 543:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Lt_u), _pos);
                }break;
                // Action 120
                case 537:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Gt_s), _pos);
                }break;
                // Action 121
                case 538:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Gt_u), _pos);
                }break;
                // Action 122
                case 539:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Le_s), _pos);
                }break;
                // Action 123
                case 540:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Le_u), _pos);
                }break;
                // Action 124
                case 535:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Ge_s), _pos);
                }break;
                // Action 125
                case 536:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Ge_u), _pos);
                }break;
                // Action 126
                case 466:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Eqz), _pos);
                }break;
                // Action 127
                case 354:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Eq), _pos);
                }break;
                // Action 128
                case 362:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Ne), _pos);
                }break;
                // Action 129
                case 563:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Lt_s), _pos);
                }break;
                // Action 130
                case 564:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Lt_u), _pos);
                }break;
                // Action 131
                case 558:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Gt_s), _pos);
                }break;
                // Action 132
                case 559:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Gt_u), _pos);
                }break;
                // Action 133
                case 560:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Le_s), _pos);
                }break;
                // Action 134
                case 561:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Le_u), _pos);
                }break;
                // Action 135
                case 556:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Ge_s), _pos);
                }break;
                // Action 136
                case 557:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Ge_u), _pos);
                }break;
                // Action 137
                case 283:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Eq), _pos);
                }break;
                // Action 138
                case 293:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Ne), _pos);
                }break;
                // Action 139
                case 289:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Lt), _pos);
                }break;
                // Action 140
                case 286:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Gt), _pos);
                }break;
                // Action 141
                case 287:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Le), _pos);
                }break;
                // Action 142
                case 285:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Ge), _pos);
                }break;
                // Action 143
                case 304:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Eq), _pos);
                }break;
                // Action 144
                case 314:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Ne), _pos);
                }break;
                // Action 145
                case 310:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Lt), _pos);
                }break;
                // Action 146
                case 307:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Gt), _pos);
                }break;
                // Action 147
                case 308:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Le), _pos);
                }break;
                // Action 148
                case 306:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Ge), _pos);
                }break;
                // Action 149
                case 437:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Clz), _pos);
                }break;
                // Action 150
                case 439:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Ctz), _pos);
                }break;
                // Action 151
                case 686:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Popcnt), _pos);
                }break;
                // Action 152
                case 435:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Add), _pos);
                }break;
                // Action 153
                case 456:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Sub), _pos);
                }break;
                // Action 154
                case 448:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Mul), _pos);
                }break;
                // Action 155
                case 621:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Div_s), _pos);
                }break;
                // Action 156
                case 622:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Div_u), _pos);
                }break;
                // Action 157
                case 628:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Rem_s), _pos);
                }break;
                // Action 158
                case 629:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Rem_u), _pos);
                }break;
                // Action 159
                case 436:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32And), _pos);
                }break;
                // Action 160
                case 338:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Or), _pos);
                }break;
                // Action 161
                case 459:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Xor), _pos);
                }break;
                // Action 162
                case 453:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Shl), _pos);
                }break;
                // Action 163
                case 630:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Shr_s), _pos);
                }break;
                // Action 164
                case 631:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Shr_u), _pos);
                }break;
                // Action 165
                case 547:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Rotl), _pos);
                }break;
                // Action 166
                case 548:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Rotr), _pos);
                }break;
                // Action 167
                case 462:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Clz), _pos);
                }break;
                // Action 168
                case 464:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Ctz), _pos);
                }break;
                // Action 169
                case 696:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Popcnt), _pos);
                }break;
                // Action 170
                case 460:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Add), _pos);
                }break;
                // Action 171
                case 481:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Sub), _pos);
                }break;
                // Action 172
                case 473:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Mul), _pos);
                }break;
                // Action 173
                case 636:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Div_s), _pos);
                }break;
                // Action 174
                case 637:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Div_u), _pos);
                }break;
                // Action 175
                case 644:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Rem_s), _pos);
                }break;
                // Action 176
                case 645:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Rem_u), _pos);
                }break;
                // Action 177
                case 461:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64And), _pos);
                }break;
                // Action 178
                case 363:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Or), _pos);
                }break;
                // Action 179
                case 483:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Xor), _pos);
                }break;
                // Action 180
                case 478:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Shl), _pos);
                }break;
                // Action 181
                case 646:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Shr_s), _pos);
                }break;
                // Action 182
                case 647:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Shr_u), _pos);
                }break;
                // Action 183
                case 568:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Rotl), _pos);
                }break;
                // Action 184
                case 569:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Rotr), _pos);
                }break;
                // Action 185
                case 395:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Abs), _pos);
                }break;
                // Action 186
                case 408:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Neg), _pos);
                }break;
                // Action 187
                case 506:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Ceil), _pos);
                }break;
                // Action 188
                case 604:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Floor), _pos);
                }break;
                // Action 189
                case 608:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Trunc), _pos);
                }break;
                // Action 190
                case 719:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Nearest), _pos);
                }break;
                // Action 191
                case 515:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Sqrt), _pos);
                }break;
                // Action 192
                case 396:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Add), _pos);
                }break;
                // Action 193
                case 412:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Sub), _pos);
                }break;
                // Action 194
                case 406:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Mul), _pos);
                }break;
                // Action 195
                case 401:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Div), _pos);
                }break;
                // Action 196
                case 405:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Min), _pos);
                }break;
                // Action 197
                case 404:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Max), _pos);
                }break;
                // Action 198
                case 759:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Copysign), _pos);
                }break;
                // Action 199
                case 414:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Abs), _pos);
                }break;
                // Action 200
                case 426:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Neg), _pos);
                }break;
                // Action 201
                case 518:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Ceil), _pos);
                }break;
                // Action 202
                case 612:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Floor), _pos);
                }break;
                // Action 203
                case 617:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Trunc), _pos);
                }break;
                // Action 204
                case 723:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Nearest), _pos);
                }break;
                // Action 205
                case 527:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Sqrt), _pos);
                }break;
                // Action 206
                case 415:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Add), _pos);
                }break;
                // Action 207
                case 431:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Sub), _pos);
                }break;
                // Action 208
                case 424:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Mul), _pos);
                }break;
                // Action 209
                case 419:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Div), _pos);
                }break;
                // Action 210
                case 423:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Min), _pos);
                }break;
                // Action 211
                case 422:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Max), _pos);
                }break;
                // Action 212
                case 763:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Copysign), _pos);
                }break;
                // Action 213
                case 774:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Wrap_i64), _pos);
                }break;
                // Action 214
                case 845:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Trunc_s_f32), _pos);
                }break;
                // Action 215
                case 848:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Trunc_u_f32), _pos);
                }break;
                // Action 216
                case 846:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Trunc_s_f64), _pos);
                }break;
                // Action 217
                case 849:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Trunc_u_f64), _pos);
                }break;
                // Action 218
                case 871:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Extend_s_i32), _pos);
                }break;
                // Action 219
                case 872:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Extend_u_i32), _pos);
                }break;
                // Action 220
                case 853:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Trunc_s_f32), _pos);
                }break;
                // Action 221
                case 856:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Trunc_u_f32), _pos);
                }break;
                // Action 222
                case 854:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Trunc_s_f64), _pos);
                }break;
                // Action 223
                case 857:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Trunc_u_f64), _pos);
                }break;
                // Action 224
                case 876:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Convert_s_i32), _pos);
                }break;
                // Action 225
                case 878:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Convert_u_i32), _pos);
                }break;
                // Action 226
                case 877:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Convert_s_i64), _pos);
                }break;
                // Action 227
                case 879:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Convert_u_i64), _pos);
                }break;
                // Action 228
                case 814:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Demote_f64), _pos);
                }break;
                // Action 229
                case 881:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Convert_s_i32), _pos);
                }break;
                // Action 230
                case 883:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Convert_u_i32), _pos);
                }break;
                // Action 231
                case 882:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Convert_s_i64), _pos);
                }break;
                // Action 232
                case 884:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Convert_u_i64), _pos);
                }break;
                // Action 233
                case 842:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Promote_f32), _pos);
                }break;
                // Action 234
                case 902:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Reinterpret_f32), _pos);
                }break;
                // Action 235
                case 907:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Reinterpret_f64), _pos);
                }break;
                // Action 236
                case 900:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F32Reinterpret_i32), _pos);
                }break;
                // Action 237
                case 901:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::F64Reinterpret_i64), _pos);
                }break;
                // Action 238
                case 798:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Extend8_s), _pos);
                }break;
                // Action 239
                case 820:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Extend16_s), _pos);
                }break;
                // Action 240
                case 805:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Extend8_s), _pos);
                }break;
                // Action 241
                case 827:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Extend16_s), _pos);
                }break;
                // Action 242
                case 828:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Extend32_s), _pos);
                }break;
                // Action 243
                case 903:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Trunc_sat_f32_s), _pos);
                }break;
                // Action 244
                case 904:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Trunc_sat_f32_u), _pos);
                }break;
                // Action 245
                case 905:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Trunc_sat_f64_s), _pos);
                }break;
                // Action 246
                case 906:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I32Trunc_sat_f64_u), _pos);
                }break;
                // Action 247
                case 908:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Trunc_sat_f32_s), _pos);
                }break;
                // Action 248
                case 911:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Trunc_sat_f64_u), _pos);
                }break;
                // Action 249
                case 910:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Trunc_sat_f64_s), _pos);
                }break;
                // Action 250
                case 909:
                    state = 16;
                    text = current;
                {
                    return Token(NumericInstr(NumericInstr::I64Trunc_sat_f32_u), _pos);
                }break;
                // Action 251
                case 17:
                    state = 16;
                    text = current;
                {
                    return Token(std::monostate(), _pos);
                }break;
                default:
                    throw UnknownToken(_pos, text);
            }
        }
    }
}

const char* UnknownToken::what(){
    return msg.c_str();
}

} // namespace WasmVM


